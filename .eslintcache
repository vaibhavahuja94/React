[{"D:\\w3bizz\\React\\src\\index.js":"1","D:\\w3bizz\\React\\src\\store.js":"2","D:\\w3bizz\\React\\src\\App.js":"3","D:\\w3bizz\\React\\src\\Services\\localStorage.js":"4","D:\\w3bizz\\React\\src\\redux\\rootReducer.js":"5","D:\\w3bizz\\React\\src\\component\\about\\Login.js":"6","D:\\w3bizz\\React\\src\\component\\about\\Register.js":"7","D:\\w3bizz\\React\\src\\component\\home\\Home.js":"8","D:\\w3bizz\\React\\src\\component\\profile\\ProfileUpdate.js":"9","D:\\w3bizz\\React\\src\\Services\\apiFunction.js":"10","D:\\w3bizz\\React\\src\\component\\AdminLayout.js":"11","D:\\w3bizz\\React\\src\\redux\\actions\\LoginActions.js":"12","D:\\w3bizz\\React\\src\\redux\\actions\\GetBlogByIdActions.js":"13","D:\\w3bizz\\React\\src\\redux\\reducer\\LoginReducers.js":"14","D:\\w3bizz\\React\\src\\redux\\reducer\\GetBlogByIdReducers.js":"15","D:\\w3bizz\\React\\src\\component\\home\\HomeNavBar.js":"16","D:\\w3bizz\\React\\src\\Services\\headerServices.js":"17","D:\\w3bizz\\React\\src\\component\\about\\ForgotPassword.js":"18","D:\\w3bizz\\React\\src\\component\\Modal\\Template.js":"19","D:\\w3bizz\\React\\src\\component\\payment\\StripeApp.js":"20","D:\\w3bizz\\React\\src\\component\\modal\\Template.js":"21","D:\\w3bizz\\React\\src\\component\\modal\\SlotModal.js":"22","D:\\w3bizz\\React\\src\\component\\modal\\Page.js":"23","D:\\w3bizz\\React\\src\\services\\ProtectedRoute.js":"24","D:\\w3bizz\\React\\src\\services\\Auth.js":"25","D:\\w3bizz\\React\\src\\component\\lottieIcons\\LottieIco.js":"26","D:\\w3bizz\\React\\src\\services\\apiFunction.js":"27","D:\\w3bizz\\React\\src\\services\\headerServices.js":"28","D:\\w3bizz\\React\\src\\services\\localStorage.js":"29","D:\\w3bizz\\React\\src\\component\\cardComponent\\TemplateCard.js":"30","D:\\w3bizz\\React\\src\\component\\modal\\AvailableSlot.js":"31","D:\\w3bizz\\React\\src\\component\\cardComponent\\PageCard.js":"32","D:\\w3bizz\\React\\src\\component\\template\\UserTemplate.js":"33","D:\\w3bizz\\React\\src\\component\\template\\AdminTemplate.js":"34","D:\\w3bizz\\React\\src\\component\\template\\AdminTemplateById.js":"35","D:\\w3bizz\\React\\src\\component\\template\\UserTemplateById.js":"36","D:\\w3bizz\\React\\src\\component\\pages\\PageDisplay.js":"37","D:\\w3bizz\\React\\src\\component\\pages\\DefaultPages.js":"38","D:\\w3bizz\\React\\src\\component\\modal\\DefaultPagesModal.js":"39"},{"size":343,"mtime":1622381557433,"results":"40","hashOfConfig":"41"},{"size":744,"mtime":1632585756105,"results":"42","hashOfConfig":"41"},{"size":1881,"mtime":1632643488125,"results":"43","hashOfConfig":"41"},{"size":658,"mtime":1622380864606,"results":"44","hashOfConfig":"41"},{"size":246,"mtime":1630558079509,"results":"45","hashOfConfig":"41"},{"size":8037,"mtime":1632585341458,"results":"46","hashOfConfig":"41"},{"size":6165,"mtime":1632708311953,"results":"47","hashOfConfig":"41"},{"size":2803,"mtime":1627618219537,"results":"48","hashOfConfig":"41"},{"size":26848,"mtime":1632650984921,"results":"49","hashOfConfig":"41"},{"size":6813,"mtime":1632419754405,"results":"50","hashOfConfig":"41"},{"size":8930,"mtime":1632650529183,"results":"51","hashOfConfig":"41"},{"size":262,"mtime":1630079981616,"results":"52","hashOfConfig":"41"},{"size":2407,"mtime":1632585739121,"results":"53","hashOfConfig":"41"},{"size":657,"mtime":1622393163975,"results":"54","hashOfConfig":"41"},{"size":1297,"mtime":1632419754418,"results":"55","hashOfConfig":"41"},{"size":10737,"mtime":1627616481272,"results":"56","hashOfConfig":"41"},{"size":465,"mtime":1622380533531,"results":"57","hashOfConfig":"41"},{"size":9743,"mtime":1632581402782,"results":"58","hashOfConfig":"41"},{"size":6979,"mtime":1632421569631,"results":"59","hashOfConfig":"41"},{"size":8552,"mtime":1632585698506,"results":"60","hashOfConfig":"41"},{"size":7626,"mtime":1632631890042,"results":"61","hashOfConfig":"41"},{"size":8214,"mtime":1632639095573,"results":"62","hashOfConfig":"41"},{"size":11524,"mtime":1632646483745,"results":"63","hashOfConfig":"41"},{"size":566,"mtime":1632577890562,"results":"64","hashOfConfig":"41"},{"size":170,"mtime":1632577890410,"results":"65","hashOfConfig":"41"},{"size":941,"mtime":1632632146347,"results":"66","hashOfConfig":"41"},{"size":6813,"mtime":1632419754405,"results":"67","hashOfConfig":"41"},{"size":465,"mtime":1622380533531,"results":"68","hashOfConfig":"41"},{"size":658,"mtime":1622380864606,"results":"69","hashOfConfig":"41"},{"size":10976,"mtime":1632650476040,"results":"70","hashOfConfig":"41"},{"size":9417,"mtime":1632638777680,"results":"71","hashOfConfig":"41"},{"size":6146,"mtime":1632651217579,"results":"72","hashOfConfig":"41"},{"size":2738,"mtime":1632641928755,"results":"73","hashOfConfig":"41"},{"size":3864,"mtime":1632650263935,"results":"74","hashOfConfig":"41"},{"size":1566,"mtime":1632650282453,"results":"75","hashOfConfig":"41"},{"size":2962,"mtime":1632641906112,"results":"76","hashOfConfig":"41"},{"size":4889,"mtime":1632650371860,"results":"77","hashOfConfig":"41"},{"size":3072,"mtime":1632651065301,"results":"78","hashOfConfig":"41"},{"size":4525,"mtime":1632649286050,"results":"79","hashOfConfig":"41"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},"1fpfzq5",{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"82"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"82"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"82"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"82"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"82"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"82"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"126","messages":"127","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"82"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"82"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"82"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"82"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"82"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"82"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"82"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"82"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"82"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"82"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"82"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"82"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"82"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"82"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"82"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"82"},"D:\\w3bizz\\React\\src\\index.js",[],["182","183"],"D:\\w3bizz\\React\\src\\store.js",[],"D:\\w3bizz\\React\\src\\App.js",[],"D:\\w3bizz\\React\\src\\Services\\localStorage.js",[],["184","185"],"D:\\w3bizz\\React\\src\\redux\\rootReducer.js",[],"D:\\w3bizz\\React\\src\\component\\about\\Login.js",["186","187","188"],"import React, { Component } from 'react';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport ReCAPTCHA from \"react-google-recaptcha\"\nimport { Link, Redirect, withRouter } from 'react-router-dom'\nimport { loginUserError, loginUserSuccess } from '../../redux/actions/LoginActions'\nimport { connect } from 'react-redux';\nimport { postLogin } from '../../services/apiFunction'\nimport { CircularProgress, Typography } from '@material-ui/core'\nimport '../App.css'\n\nclass Login extends Component {\n    state = {\n        loginError: false,\n        loader: false,\n        loginMessage: \"Username or Paasword is Incorrect\",\n        token: JSON.parse(localStorage.getItem('login'))\n    }\n\n    onSubmit = async (fields) => {\n        delete fields.recap;\n        this.captcha.reset();\n        this.setState({ loader: true })\n        await postLogin(fields)\n            .then((res) => {\n                if (res.data.success == 1) {\n                    this.setState({ loginError: false })\n                    let user1 = res.data.data\n                    this.props.loginUsersSuccess(user1)\n                    localStorage.setItem('login', JSON.stringify(true))\n                    localStorage.setItem('token', (res.data.token))\n                    this.props.history.push('/recentWebTemplate')\n                }\n                else {\n                    this.setState({ loginError: true })\n                    this.setState({ loader: false })\n                }\n            })\n            .catch(err => { console.log(err) })\n    }\n\n    // loginUnsuccessFul() {\n    //     console.log(this.props.data)\n    //     if (this.props.data.length===0) {\n    //         console.log(\"true\")\n    //         this.setState({ loginError: true })\n    //         return \"Error\"\n    //     }\n    //     else {\n    //         this.setState({ loginError: false })\n    //         return \"Success\"\n    //     }\n    // }\n    render() {\n        return (\n            <>\n                <div className=\"row col-lg-10 mx-auto mt-5\">\n                    <div className=\"col-sm-6 col-lg-6\" >\n                    <img src=\"/login.jpeg\" className=\"img-fluid\"/>\n                    </div>\n                    <div className=\"col-sm-6 col-lg-6\" >\n                        <Formik\n                            initialValues={{\n                                email: '',\n                                password: '',\n                                recap: \"\",\n                            }}\n                            validationSchema={Yup.object().shape({\n                                email: Yup.string()\n                                    .email('Email is invalid')\n                                    .required('Email is required'),\n                                password: Yup.string()\n                                    .min(6, 'Password must be at least 6 characters')\n                                    .required('Password is required'),\n                                recap: Yup.string().required('I am Not Robot').nullable()\n                            })}\n                            onSubmit={this.onSubmit}\n                            render={({ errors, status, touched, setFieldValue }) => (\n                                <div className=\"card\" style={{ width: \"90%\" }}>\n                                    <div className=\"card-body card-Width\" >\n                                        <Form>\n                                            <div className=\"form-group\">\n                                                <label htmlFor=\"email\">Email</label>\n                                                <Field name=\"email\" type=\"text\" className={'form-control' + (errors.email && touched.email ? ' is-invalid' : '')} />\n                                                <ErrorMessage name=\"email\" component=\"div\" className=\"invalid-feedback\" />\n                                            </div>\n                                            <div className=\"form-group\">\n                                                <label htmlFor=\"password\">Password</label>\n                                                <Field name=\"password\" type=\"password\" className={'form-control' + (errors.password && touched.password ? ' is-invalid' : '')} />\n                                                <ErrorMessage name=\"password\" component=\"div\" className=\"invalid-feedback\" />\n                                            </div>\n                                            <div className=\"form-group\"\n                                            style = {{transform:\"scale(0.77)\",webkiTransform:\"scale(0.77)\",transformOrigin:\"0 0\",webkitTransformOrigin:\"0 0\"}}\n                                            >\n                                                <ReCAPTCHA name=\"recap\"\n                                                    siz=\"compact\"\n                                                    sitekey=\"6Le_5kgcAAAAANIwiif5bGdTIxqLTEF1Z3mL12ue\"\n                                                    onChange={(value) => setFieldValue('recap', value)}\n                                                    ref={e => (this.captcha = e)}\n                                                    className={(errors.recap && touched.recap ? ' is-invalid' : '')}\n                                                />\n                                                <ErrorMessage name=\"recap\" component=\"div\" className=\"invalid-feedback\" />\n                                            </div>\n                                            <div className=\"form-group\">\n                                                {this.state.loader ?\n                                                    <CircularProgress /> :\n                                                    <button style={{ borderRadius: \"6px\", backgroundColor: \"#1DABB8\" }} type=\"submit\" className=\"btn mr-2 text-white\">Login</button>\n                                                }\n                                                &nbsp;\n                                                <button type=\"reset\" className=\"btn text-white\" style={{ borderRadius: \"6px\", backgroundColor: \"#1DABB8\" }}\n                                                    onClick={() => this.captcha.reset()}\n                                                >Reset</button>\n                                            </div>\n                                            <div className=\"form-group\">\n                                                <Link to=\"/forgotpass\" className=\"btn text-white\" style={{ borderRadius: \"6px\", backgroundColor: \"#1DABB8\" }}>Forgot Password?</Link>\n                                            </div>\n                                            <div>\n                                                {this.state.loginError === true && <p style={{ \"color\": \"red\" }}>{this.state.loginMessage}</p>}\n                                            </div>\n                                            <Typography variant=\"body1\">\n                                                Don't have an account?{' '}\n                                                <Link to=\"/register\">\n                                                    Sign up\n                                                </Link>\n                                            </Typography>\n                                        </Form>\n                                        <br />\n                                    </div>\n                                </div>\n                            )}\n                        />\n                    </div>\n                </div>\n            </>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        error: state.login && state.login.error,\n        data: state.login && state.login.data\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        loginUsersSuccess: (data) => dispatch(loginUserSuccess(data)),\n        loginUsersError: (data) => dispatch(loginUserError(data))\n    }\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Login));","D:\\w3bizz\\React\\src\\component\\about\\Register.js",["189","190","191"],"D:\\w3bizz\\React\\src\\component\\home\\Home.js",[],"D:\\w3bizz\\React\\src\\component\\profile\\ProfileUpdate.js",["192","193","194","195","196","197","198","199","200","201","202","203"],"import React, { Component } from 'react';\nimport EditIcon from '@material-ui/icons/Edit';\nimport CheckIcon from '@material-ui/icons/Check';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport Modal from 'react-modal'\nimport { connect } from 'react-redux'\nimport { ToastContainer, toast } from 'react-toastify';\nimport { getSlots, patchApi, updateSlots } from '../../services/apiFunction'\nimport 'react-toastify/dist/ReactToastify.css';\nimport { loginUserSuccess } from '../../redux/actions/LoginActions'\nimport AdminLayout from '../AdminLayout';\nimport Accordion from '@material-ui/core/Accordion';\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\nimport Typography from '@material-ui/core/Typography';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport SlotModal from '../modal/SlotModal';\nimport LottieIcon from '../lottieIcons/LottieIco';\nimport loadingAnimationData from '../lottieIcons/loadingV2.json'\nimport { withRouter } from 'react-router-dom'\nimport moment from 'moment';\nimport { MDBContainer, MDBModal, MDBModalHeader, MDBModalBody } from 'mdbreact';\nimport StripeApp from '../payment/StripeApp';\n\nclass ProfileUpdate extends Component {\n    state = {\n        country: '',\n        region: '',\n        data: this.props.user,\n        showModal: false,\n        submitCount: 0,\n        slotDetails: [],\n        showModalPayDetails: false,\n        loader: false,\n        slotDetailsExpired: '',\n        renewSlots: [],\n        stripeModal: false,\n        planValue: '',\n        slotNumber: 0,\n    }\n\n    AddSlotsModal = async (e, value) => {\n        e.preventDefault()\n        this.togglePay()\n    }\n\n    toggleLoader = () => {\n        this.setState({ loader: !this.state.loader })\n    }\n\n    togglePay = () => {\n        this.setState({\n            showModalPayDetails: !this.state.showModalPayDetails\n        })\n    }\n\n    toggle = () => {\n        this.setState({\n            stripeModal: !this.state.stripeModal\n        })\n    }\n\n    goToTemplate = (event, value) => {\n        if (this.props.published && this.props.published.length > 0) {\n            let slotPublished = this.props.published.find(val => val.slot_id == value.slot_id)\n            if (slotPublished) {\n                let tempValue = this.props.blog.find(val => val.id == slotPublished.template_id)\n                this.props.history.push({ pathname: 'webTemplate', state: { template: tempValue, type: \"USER\" } })\n            }\n            else {\n                toast.error(\"No Template is published at this Slot\")\n            }\n        }\n        else {\n            toast.error(\"No Slot is Published By You\")\n        }\n    }\n\n    RenewSlots = (e) => {\n        if (this.state.renewSlots.length > 0) {\n            this.setState({ planValue: 699 })\n            this.toggle()\n        } else {\n            toast.error(\"Please select some slot to be renewed\")\n        }\n    }\n\n    editText(e, value, index) {\n        e.preventDefault()\n        let slotDetails = [...this.state.slotDetails]\n        let slotDetail = { ...slotDetails[index] }\n        slotDetail.isInput = true\n        slotDetails[index] = slotDetail\n        this.setState({ slotDetails })\n        this.setState({ publish_name: value.publish_name })\n    }\n\n    getSlotDetails = async () => {\n        let response = await getSlots(this.props.user.username)\n        if (response.STATUS) {\n            let list = []\n            let date = moment().format('YYYY-MM-DD')\n            let expiredList = []\n            response.DATA.map((val) => {\n                if ((date <= val.expiry_date) || val.published == \"FALSE\") {\n                    val.isInput = false\n                    list.push(val)\n                }\n                else {\n                    expiredList.push(val)\n                }\n            })\n\n            this.setState({ slotDetails: list, slotDetailsExpired: expiredList })\n        }\n    }\n\n    onCancel = (e, value, index) => {\n        e.preventDefault()\n        let slotDetails = [...this.state.slotDetails]\n        let slotDetail = { ...slotDetails[index] }\n        slotDetail.isInput = false\n        slotDetails[index] = slotDetail\n        this.setState({ slotDetails })\n        this.setState({ publish_name: \" \" })\n    }\n\n    onUpdate = async (e, value) => {\n        e.preventDefault()\n        if (this.state.publish_name != '') {\n            let obj = {}\n            obj.username = this.props.user.username\n            obj.slot_id = value.slot_id\n            obj.publish_name = this.state.publish_name\n            const response = await updateSlots(obj)\n            if (response.STATUS) {\n                var list = []\n                this.state.slotDetails.forEach((val) => {\n                    if (val.slot_id == value.slot_id) {\n                        val.publish_name = this.state.publish_name\n                        val.isInput = false\n                        list.push(val)\n                    }\n                    else {\n                        list.push(val)\n                    }\n                })\n                toast.success(\"Publish Name Updated Successfully\")\n                this.setState({ slotDetails: list })\n                this.setState({ publish_name: '' })\n            }\n        } else {\n            toast.error(\"Please Enter Some Value\")\n        }\n    }\n\n    componentDidMount() {\n        this.getSlotDetails()\n    }\n\n    onChangeElement = (e, value) => {\n        if (e.target.checked == true) {\n            this.setState({ renewSlots: [...this.state.renewSlots, value] })\n            this.setState({ slotNumber: this.state.slotNumber + 1 })\n        }\n        else {\n            let filterArr = this.state.renewSlots.filter(val => val.slot_id != value.slot_id)\n            this.setState({ renewSlots: filterArr })\n            this.setState({ slotNumber: this.state.slotNumber - 1 })\n        }\n    }\n\n    onSubmit = async (fields) => {\n        fields.id = this.state.data.username\n        await patchApi(fields.id, fields)\n            .then((res) => {\n                let obj = {}\n                obj = this.props.user\n                obj.fname = fields.fname\n                obj.lname = fields.lname\n                obj.country = fields.country\n                obj.state = fields.state\n                obj.city = fields.city\n                obj.company = fields.company\n                obj.mobile = fields.mobile\n                obj.email = fields.email\n                obj.address = fields.address\n                obj.pincode = fields.pincode\n                obj.publish_name = fields.publish_name\n                this.props.loginUsersSuccess(obj)\n            })\n    }\n\n    render() {\n        const customStyles = {\n            content: {\n                top: '31%',\n                left: '75%',\n                right: '0%',\n                bottom: 'auto',\n                transform: 'translate(-1%, -50%)'\n            }\n        };\n\n        Modal.setAppElement('*')\n        const { country, region, data } = this.state;\n        return this.state.loader ?\n            (<>\n                <LottieIcon Play={true} animationData={loadingAnimationData} height={50} width={50} pause={this.state.copyState} />\n            </>) :\n            (\n                <>\n                    <AdminLayout title=\"Update Profile\">\n                        <ToastContainer />\n                        <Accordion>\n                            <AccordionSummary\n                                expandIcon={<ExpandMoreIcon />}\n                                aria-controls=\"panel1a-content\"\n                                id=\"panel1a-header\"\n                            >\n                                <Typography>Profile Details</Typography>\n                            </AccordionSummary>\n                            <AccordionDetails>\n                                <div style={{ width: \"90%\" }} className=\"mx-auto\">\n                                    <div className=\"card\">\n                                        <div className=\"card-body\">\n                                            <Formik\n                                                initialValues={{\n                                                    fname: data.fname,\n                                                    lname: data.lname,\n                                                    country: data.country,\n                                                    state: data.state,\n                                                    city: data.city,\n                                                    company: data.company,\n                                                    mobile: data.mobile,\n                                                    email: data.email,\n                                                    address: data.address,\n                                                    pincode: data.pincode,\n                                                    publish_name: data.publish_name\n                                                }}\n                                                validationSchema={Yup.object().shape({\n                                                    fname: Yup.string()\n                                                        .required('First Name is required'),\n                                                    lname: Yup.string()\n                                                        .required('Last Name is required'),\n                                                    mobile: Yup.string().required('Mobile Number is Required')\n                                                        .matches(/^[0-9]+$/, \"Must be only digits\")\n                                                        .min(10, \"Must be exactly 10 digits\")\n                                                        .max(10, \"Must be exactly 10 digits\"),\n                                                    country: Yup.string().required('Please Select Country'),\n                                                    state: Yup.string().required('Please Select State'),\n                                                    city: Yup.string().required('Please enter City'),\n                                                    address: Yup.string(),\n                                                    email: Yup.string()\n                                                        .email('Email is invalid')\n                                                        .required('Email is required'),\n                                                })}\n                                                onSubmit={this.onSubmit}\n                                                render={({ errors, touched, setFieldValue }) => (\n                                                    <div className=\"panel panel-default\">\n                                                        <div className=\"panel-body\">\n                                                            <Form>\n                                                                <div className=\"form-group\">\n                                                                    <label htmlFor=\"FName\">First Name</label>\n                                                                    <Field name=\"fname\" type=\"text\" className={'form-control' + (errors.fname && touched.fname ? ' is-invalid' : '')} />\n                                                                    <ErrorMessage name=\"fname\" component=\"div\" className=\"invalid-feedback\" />\n                                                                </div>\n                                                                <div className=\"form-group\">\n                                                                    <label htmlFor=\"LName\">Last Name</label>\n                                                                    <Field name=\"lname\" type=\"text\" className={'form-control' + (errors.lname && touched.lname ? ' is-invalid' : '')} />\n                                                                    <ErrorMessage name=\"lname\" component=\"div\" className=\"invalid-feedback\" />\n                                                                </div>\n                                                                <div className=\"form-group\">\n                                                                    <label htmlFor=\"mobile\">Mobile</label>\n                                                                    <Field name=\"mobile\" type=\"text\" className={'form-control' + (errors.mobile && touched.mobile ? ' is-invalid' : '')} />\n                                                                    <ErrorMessage name=\"mobile\" component=\"div\" className=\"invalid-feedback\" />\n                                                                </div>\n                                                                <div className=\"form-group\">\n                                                                    <label htmlFor=\"email\">Email</label>\n                                                                    <Field name=\"email\" type=\"text\" className={'form-control' + (errors.email && touched.email ? ' is-invalid' : '')} />\n                                                                    <ErrorMessage name=\"email\" component=\"div\" className=\"invalid-feedback\" />\n                                                                </div>\n                                                                <div className=\"form-group\">\n                                                                    <label htmlFor=\"company\">Company</label>\n                                                                    <Field name=\"company\" type=\"text\" className={'form-control' + (errors.company && touched.company ? ' is-invalid' : '')} />\n                                                                    <ErrorMessage name=\"company\" component=\"div\" className=\"invalid-feedback\" />\n                                                                </div>\n                                                                <div className=\"form-group\">\n                                                                    <label htmlFor=\"address\">Address</label>\n                                                                    <Field name=\"address\" type=\"textarea\" className={'form-control' + (errors.address && touched.address ? ' is-invalid' : '')} />\n                                                                    <ErrorMessage name=\"address\" component=\"div\" className=\"invalid-feedback\" />\n                                                                </div>\n                                                                <div className=\"form-group\">\n                                                                    <label htmlFor=\"City\">City</label>\n                                                                    <Field name=\"city\" type=\"text\" className={'form-control' + (errors.city && touched.city ? ' is-invalid' : '')} />\n                                                                    <ErrorMessage name=\"city\" component=\"div\" className=\"invalid-feedback\" />\n                                                                </div>\n                                                                <div className=\"form-group\">\n                                                                    <label htmlFor=\"state\">State</label>\n                                                                    <Field name=\"state\" type=\"text\" className={'form-control' + (errors.state && touched.state ? ' is-invalid' : '')} />\n                                                                    <ErrorMessage name=\"state\" component=\"div\" className=\"invalid-feedback\" />\n                                                                </div>\n                                                                <div className=\"form-group\">\n                                                                    <label htmlFor=\"country\">Country</label>\n                                                                    <Field name=\"country\" type=\"text\" className={'form-control' + (errors.country && touched.country ? ' is-invalid' : '')} />\n                                                                    <ErrorMessage name=\"country\" component=\"div\" className=\"invalid-feedback\" />\n                                                                </div>\n                                                                <div className=\"form-group\">\n                                                                    <label htmlFor=\"pincode\">PinCode</label>\n                                                                    <Field name=\"pincode\" type=\"text\" className={'form-control' + (errors.pincode && touched.pincode ? ' is-invalid' : '')} />\n                                                                </div>\n                                                                <div className=\"form-group\">\n                                                                    <label htmlFor=\"publishname\">Publish Name</label>\n                                                                    <Field name=\"publishname\" type=\"text\" className={'form-control' + (errors.publishname && touched.publishname ? ' is-invalid' : '')} />\n                                                                </div>\n                                                                <div className=\"form-group\">\n                                                                    <button type=\"submit\" className=\"btn btn-primary mr-2\">Update</button>\n                                                                </div>\n                                                            </Form>\n                                                        </div>\n                                                    </div>\n                                                )}\n                                            />\n                                        </div>\n                                    </div>\n                                </div>\n                            </AccordionDetails>\n                        </Accordion>\n                        <br />\n                        <Accordion>\n                            <AccordionSummary\n                                expandIcon={<ExpandMoreIcon />}\n                                aria-controls=\"panel1a-content\"\n                                id=\"panel1a-header\"\n                            >\n                                <Typography>Prefrencences</Typography>\n                            </AccordionSummary>\n                            <AccordionDetails>\n                                <label>\n                                    <input type=\"checkbox\" name=\"Prefrence\" onChange={(e) => { localStorage.setItem(\"freeEditor\", e.target.checked) }} /> &nbsp;Free Form Editor\n                                </label>\n                            </AccordionDetails>\n                        </Accordion>\n                        <br />\n                        <Accordion>\n                            <AccordionSummary\n                                expandIcon={<ExpandMoreIcon />}\n                                aria-controls=\"panel1a-content\"\n                                id=\"panel1a-header\"\n                            >\n                                <Typography>Available Slots</Typography>\n                            </AccordionSummary>\n                            <AccordionDetails>\n                                <>\n                                    <div className=\"col-md-10\">\n                                        {this.state.slotDetails.length > 0 ?\n                                            <>\n                                                {this.state.slotDetails.map((value, index) => (\n                                                    <div className=\"cardBox\">\n                                                        {!value.isInput &&\n                                                            <>\n                                                                <span style={{paddingRight:\"15px\"}}>{value.publish_name}<span style={{fontWeight:\"bold\"}}>.w3bizz.com</span></span>\n                                                                \n                                                                <EditIcon fontSize=\"small\" onClick={(e) => { this.editText(e, value, index) }} />\n                                                            </>\n                                                        }\n                                                        {value.isInput &&\n                                                            <>\n                                                                <span style={{paddingRight:\"15px\"}}>\n                                                                <input type=\"text\" value={this.state.publish_name} onChange={(e) => this.setState({ publish_name: e.target.value })} /><span style={{fontWeight:\"bold\"}}>.w3bizz.com</span>\n                                                                </span>\n                                                                <CheckIcon onClick={(e) => { this.onUpdate(e, value) }} />\n                                                                <ClearIcon onClick={(e) => this.onCancel(e, value, index)} />\n                                                            </>\n                                                        }\n                                                        <button className=\"btn btn-info left-space\" onClick={(e) => this.goToTemplate(e, value)}>Go to Template</button>\n                                                        <button className=\"btn btn-primary left-space\" onClick={(e) => window.open(('http://' + value.publish_name + '.w3bizz.com'), '_blank')}>Preview Website</button>\n                                                    </div>\n\n                                                ))}\n\n                                            </>\n                                            :\n                                            (\n                                                <>\n                                                    <div>7 Days Free Trial Only. Please Book A Slot</div>\n                                                </>\n                                            )\n                                        }\n                                        <br />\n                                        <br />\n                                        <div>\n                                            <button className=\"btn btn-success\" onClick={(e) => this.AddSlotsModal(e)}>Add More Slots</button>\n                                        </div>\n                                    </div>\n\n                                </>\n                            </AccordionDetails>\n                        </Accordion>\n                        <br />\n                        <Accordion>\n                            <AccordionSummary\n                                expandIcon={<ExpandMoreIcon />}\n                                aria-controls=\"panel1a-content\"\n                                id=\"panel1a-header\"\n                            >\n                                <Typography>Expired Slots</Typography>\n                            </AccordionSummary>\n                            <AccordionDetails>\n                                <>\n                                    <div className=\"col-md-10\"> \n                                        {this.state.slotDetailsExpired.length == 0 &&\n                                            <h5>No Slots To Be Renewed</h5>\n                                        }\n                                        {this.state.slotDetailsExpired.length > 0 &&\n                                            <>\n                                                <h5>Renew Slot at Rs.699</h5>\n                                                <br />\n                                                {this.state.slotDetailsExpired.map((value, index) => (\n                                                    <div className=\"cardBox\">\n                                                        <input type=\"checkbox\" name={value.slot_id + \"name\"} value={value.slot_id} onChange={(e) => this.onChangeElement(e, value)} />\n                                                        &nbsp;&nbsp;\n                                                        <span style={{fontWeight:\"bold\"}}>{value.publish_name}<span>.w3bizz.com</span></span>\n                                                    </div>\n                                                ))}\n                                            </>\n                                        }\n                                        <br />\n                                        {this.state.slotNumber > 0 &&\n                                            <h6>Total Amount to Be Paid is {(this.state.slotNumber) * (699)}</h6>\n                                        }\n                                        <br />\n                                        {this.state.slotDetailsExpired.length > 0 &&\n                                            <div>\n                                                <button className=\"btn btn-success\" onClick={(e) => this.RenewSlots(e)}>Renew Slots</button>\n                                            </div>\n                                        }\n                                    </div>\n                                </>\n                            </AccordionDetails>\n                        </Accordion>\n                    </AdminLayout>\n                    <MDBContainer>\n                        <MDBModal centered isOpen={this.state.stripeModal} toggle={this.toggle}>\n                            <MDBModalHeader toggle={this.toggle}>Renew Slots</MDBModalHeader>\n                            <MDBModalBody>\n                                <StripeApp planValue={this.state.planValue} slotNumber={this.state.slotNumber} username={this.props.user.username} updateData={this.state.slotDetailsExpired} toast={toast} />\n                            </MDBModalBody>\n                        </MDBModal>\n                    </MDBContainer>\n                    <SlotModal modal={this.state.showModalPayDetails} toggle={this.togglePay} loader={this.toggleLoader} slotDetails={this.state.slotDetails} expiredSlots={[]}/>\n                </>\n            );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        user: state.login.data,\n        blog: state.getBlogById.allBlog,\n        published: state.getBlogById && state.getBlogById.published\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        loginUsersSuccess: (data) => dispatch(loginUserSuccess(data))\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(ProfileUpdate));","D:\\w3bizz\\React\\src\\Services\\apiFunction.js",[],"D:\\w3bizz\\React\\src\\component\\AdminLayout.js",["204","205","206","207","208","209","210","211","212","213","214"],"import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport clsx from 'clsx';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport {\n  Drawer, AppBar, Toolbar, List, CssBaseline, Typography, Divider,\n  IconButton, ListItem, ListItemIcon, ListItemText, Collapse, Popover, Button, Link\n} from '@material-ui/core';\nimport {\n  Home, Menu as MenuIcon, ChevronLeft as ChevronLeftIcon, ChevronRight as ChevronRightIcon,\n  ExpandLess as IconExpandLess, ExpandMore as IconExpandMore, Web as WebIcon, MoveToInbox as InboxIcon,\n  KeyboardArrowDown as KeyboardArrowDownIcon, WebAsset\n} from '@material-ui/icons';\nimport { NavLink } from 'react-router-dom';\nimport { useHistory } from 'react-router-dom';\nimport { loginUserSuccess } from '../redux/actions/LoginActions'\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  appBar: {\n    zIndex: theme.zIndex.drawer + 1,\n    transition: theme.transitions.create(['width', 'margin'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n  },\n  menuItem: {\n    width: drawerWidth,\n  },\n  appBarShift: {\n    marginLeft: drawerWidth,\n    width: `calc(100% - ${drawerWidth}px)`,\n    transition: theme.transitions.create(['width', 'margin'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  menuButton: {\n    marginRight: 36,\n  },\n  hide: {\n    display: 'none',\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n    whiteSpace: 'nowrap',\n  },\n  drawerOpen: {\n    width: drawerWidth,\n    transition: theme.transitions.create('width', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  drawerClose: {\n    transition: theme.transitions.create('width', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    overflowX: 'hidden',\n    width: theme.spacing(7) + 1,\n    [theme.breakpoints.up('sm')]: {\n      width: theme.spacing(9) + 1,\n    },\n  },\n  toolbar: {\n    display: 'flex',\n    alignItems: 'center',\n    height: \"5.35em\",\n    justifyContent: 'flex-end',\n    padding: theme.spacing(0, 1),\n    // necessary for content to be below app bar\n    ...theme.mixins.toolbar,\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n  },\n  typography: {\n    padding: theme.spacing(2),\n    cursor: \"default\",\n  },\n  activeListItem: {\n    borderLeft: `4px solid ${\"lightgrey\"}`,\n    borderRadius: '4px',\n    backgroundColor: \"lightgrey\",\n    '& $listItemText': {\n      color: theme.palette.text.primary\n    },\n    '& $listItemIcon': {\n      color: theme.palette.primary.main,\n      marginLeft: '-4px'\n    }\n  }\n}));\n\nexport default function AdminLayout(props) {\n  const classes = useStyles();\n  const theme = useTheme();\n  const [open, setOpen] = React.useState(false);\n  const [open1, setOpen1] = React.useState(false);\n  const [open2, setOpen2] = React.useState(false);\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const history = useHistory()\n  const dispatch = useDispatch()\n  const user = useSelector((state) => state.login.data)\n\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n\n  const openAnchor = Boolean(anchorEl);\n  const id = openAnchor ? 'simple-popover' : undefined;\n\n  function handleClick() {\n    setOpen1(!open1)\n  }\n\n  function handleClick2() {\n    setOpen2(!open2)\n  }\n\n  const handleClickAnchor = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleCloseAnchor = () => {\n    setAnchorEl(null);\n  };\n\n  const logout = () => {\n    localStorage.clear()\n    let obj = {}\n    dispatch(loginUserSuccess(obj))\n    history.push('/')\n  }\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <AppBar\n        color=\"#1DABB8\"\n        position=\"fixed\"\n        className={clsx(classes.appBar, {\n          [classes.appBarShift]: open,\n        })}\n      >\n        <Toolbar style={{ color: \"#1DABB8\" }}>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            onClick={handleDrawerOpen}\n            edge=\"start\"\n            className={clsx(classes.menuButton, {\n              [classes.hide]: open,\n            })}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" noWrap style={{ flex: 1 }}>\n            {props.title}\n          </Typography>\n          <div>\n            <img src=\"/humanavtar.jpg\" height=\"75em\" aria-describedby={id} variant=\"contained\" style={{ color: \"grey\" }} onClick={handleClickAnchor} />\n            <Button className=\"btn text-white\" style={{ borderRadius: \"6px\", backgroundColor: \"#1DABB8\" }} onClick={() => { logout() }}>Logout</Button>\n          </div>\n        </Toolbar>\n      </AppBar>\n      <Drawer\n        variant=\"permanent\"\n        className={clsx(classes.drawer, {\n          [classes.drawerOpen]: open,\n          [classes.drawerClose]: !open,\n        })}\n        classes={{\n          paper: clsx({\n            [classes.drawerOpen]: open,\n            [classes.drawerClose]: !open,\n          }),\n        }}\n      >\n        <div className={classes.toolbar}>\n          <IconButton onClick={handleDrawerClose}>\n            {theme.direction === 'rtl' ? <ChevronRightIcon /> : <ChevronLeftIcon />}\n          </IconButton>\n        </div>\n        <Divider />\n        <List>\n\n          {user.type != \"ADMIN\" &&\n            <ListItem button component={NavLink} to=\"/recentWebTemplate\" className={classes.menuItem} activeClassName={classes.activeListItem}>\n              <ListItemIcon className={classes.menuItemIcon}>\n                <Home />\n              </ListItemIcon>\n              <ListItemText primary=\"Recent\" />\n            </ListItem>\n          }\n          {/* <Collapse in={open1} timeout=\"auto\" unmountOnExit>\n        <Divider />\n        <List component=\"div\" disablePadding>\n          <ListItem >\n          <ListItemIcon className={classes.menuItemIcon}>\n          <WebAssetIcon />\n        </ListItemIcon>\n            <ListItemText primary=\"Template\" />\n          </ListItem>\n          <ListItem button component={NavLink} to=\"/recentPageTemplate\" className={classes.menuItem}>\n          <ListItemIcon className={classes.menuItemIcon}>\n          <PageviewIcon />\n        </ListItemIcon>\n            <ListItemText primary=\"Web Page\" />\n          </ListItem>\n        </List>\n      </Collapse> */}\n\n          <ListItem button component={NavLink} to=\"/savedWebTemplate\" className={classes.menuItem} activeClassName={classes.activeListItem}>\n            <ListItemIcon selected={true} className={classes.menuItemIcon}>\n              <WebIcon />\n            </ListItemIcon>\n            <ListItemText primary=\"Template\" />\n          </ListItem>\n\n\n          {user.type == \"ADMIN\" &&\n            <ListItem button component={NavLink} to=\"/savedPages\" className={classes.menuItem} activeClassName={classes.activeListItem}>\n              <ListItemIcon selected={true} className={classes.menuItemIcon}>\n                <WebAsset />\n              </ListItemIcon>\n              <ListItemText primary=\"Default Page\" />\n            </ListItem>\n          }\n          {/* <Collapse in={open2} timeout=\"auto\" unmountOnExit>\n        <Divider />\n        <List component=\"div\" disablePadding>\n          <ListItem button component={NavLink} to=\"/savedWebTemplate\" className={classes.menuItem}>\n          <ListItemIcon className={classes.menuItemIcon}>\n          <WebAssetIcon />\n        </ListItemIcon>\n          <ListItemText primary=\"Template\" />\n          </ListItem>\n          <ListItem button component={NavLink} to=\"/savedPageTemplate\" className={classes.menuItem}>\n          <ListItemIcon className={classes.menuItemIcon}>\n          <PageviewIcon />\n        </ListItemIcon>\n            <ListItemText primary=\"Web Page\" />\n          </ListItem>\n        </List>\n      </Collapse> */}\n\n        </List>\n      </Drawer>\n      <main className={classes.content}>\n        <div className={classes.toolbar} />\n        <div>\n          {props.children}\n        </div>\n      </main>\n      <Popover\n        id={id}\n        open={openAnchor}\n        anchorEl={anchorEl}\n        onClose={handleCloseAnchor}\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'center',\n        }}\n        transformOrigin={{\n          vertical: 'top',\n          horizontal: 'center',\n        }}\n      >\n        <Typography className={classes.typography} onClick={() => { history.push('/updateProfile') }}>User-Profile</Typography>\n      </Popover>\n    </div>\n  );\n}\n\nAdminLayout.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  classes: PropTypes.object.isRequired,\n  title: PropTypes.string,\n  width: PropTypes.string.isRequired\n};\n","D:\\w3bizz\\React\\src\\redux\\actions\\LoginActions.js",["215"],"import axios from 'axios'\n\nexport const loginUserError = (error) => {\n    return{\n        type:'LOGINUSERERROR',\n        payload:error\n    }\n}\n\nexport const loginUserSuccess = (data) => {\n    return{\n        type:'LOGINUSERSUCCESS',\n        payload:data\n    }\n}\n","D:\\w3bizz\\React\\src\\redux\\actions\\GetBlogByIdActions.js",[],"D:\\w3bizz\\React\\src\\redux\\reducer\\LoginReducers.js",[],"D:\\w3bizz\\React\\src\\redux\\reducer\\GetBlogByIdReducers.js",[],"D:\\w3bizz\\React\\src\\component\\home\\HomeNavBar.js",["216","217"],"import React, { useState } from 'react';\r\n\r\nconst HomeNavBar = () => {\r\n    return (\r\n        <>\r\n        <nav className=\"navbar navbar-expand-lg navbar-light bg-white fixed-top \">\r\n               <div className=\"container \">\r\n                 <a\r\n                  aria-current=\"page\"\r\n                  className=\"navbar-brand\"\r\n                  href=\"https://www.chatwoot.com/\"\r\n                >\r\n                  <img\r\n                    src=\"/asset/brand-d6ec4f18194acc9e590c511b9ae51974.svg\"\r\n                    className=\"navbar-brand-img\"\r\n                    alt=\"...\"\r\n                    style={{maxHeight: \"2rem\" ,verticalAlign: \"top\",width: \"auto\"}}\r\n                  />\r\n                </a>\r\n                <button\r\n                  className=\"navbar-toggler\"\r\n                  type=\"button\"\r\n                  data-toggle=\"collapse\"\r\n                  data-target=\"#navbarCollapse\"\r\n                  aria-controls=\"navbarCollapse\"\r\n                  aria-expanded=\"false\"\r\n                  aria-label=\"Toggle navigation\"\r\n                >\r\n                  <span className=\"navbar-toggler-icon\" />\r\n                </button>\r\n                <div\r\n                  className=\"collapse navbar-collapse justify-content-end mt-xs-10\"\r\n                  id=\"navbarCollapse\"\r\n                >\r\n                  <ul className=\"navbar-nav\">\r\n                    <li className=\"nav-item dropdown\">\r\n                      <a\r\n                        className=\"nav-link dropdown-toggle\"\r\n                        id=\"navbarDocumentation\"\r\n                        data-toggle=\"dropdown\"\r\n                        href=\"https://www.chatwoot.com/#\"\r\n                        aria-haspopup=\"true\"\r\n                        aria-expanded=\"false\"\r\n                      >\r\n                        Features\r\n                      </a>\r\n                      <div\r\n                        className=\"dropdown-menu dropdown-menu-md px-5 bg-white\"\r\n                        aria-labelledby=\"navbarDocumentation\"\r\n                      >\r\n                        <div className=\"row \">\r\n                          <div className=\"col-md-6 border-right-md\">\r\n                            <div className=\"list-group list-group-flush \">\r\n                              <a\r\n                                className=\"features-menu-item list-group-item bg-white\"\r\n                                href=\"https://www.chatwoot.com/features/shared-inbox\"\r\n                              >\r\n                                <div className=\"mx-2\">\r\n                                  <h4 className=\"mb-1 d-flex align-items-center title\">\r\n                                    <div className=\"icon icon-xs mr-3 d-inline-block text-primary\">\r\n                                      <span role=\"img\" aria-label=\"Shared Inbox\">\r\n                                        📥\r\n                                      </span>\r\n                                    </div>\r\n                                    Shared inbox\r\n                                  </h4>\r\n                                  <p className=\"font-size-sm text-gray-700 mb-0\">\r\n                                    Collaborate easily with other agents and manage\r\n                                    conversations\r\n                                  </p>\r\n                                </div>\r\n                              </a>\r\n                              <a\r\n                                className=\"features-menu-item list-group-item bg-white\"\r\n                                href=\"https://www.chatwoot.com/features/live-chat\"\r\n                              >\r\n                                <div className=\"mx-2\">\r\n                                  <h4 className=\"mb-1 d-flex align-items-center title\">\r\n                                    <div className=\"icon icon-xs mr-3 d-inline-block text-primary\">\r\n                                      <span role=\"img\" aria-label=\"Live chat\">\r\n                                        💬\r\n                                      </span>\r\n                                    </div>\r\n                                    Live Chat\r\n                                  </h4>\r\n                                  <p className=\"font-size-sm text-gray-700 mb-0\">\r\n                                    Simple and elegant live chat for your website\r\n                                  </p>\r\n                                </div>\r\n                              </a>\r\n                              <a\r\n                                className=\"features-menu-item list-group-item bg-white\"\r\n                                href=\"https://www.chatwoot.com/features/channels\"\r\n                              >\r\n                                <div className=\"mx-2\">\r\n                                  <h4 className=\"mb-1 d-flex align-items-center title\">\r\n                                    <div className=\"icon icon-xs mr-3 d-inline-block text-primary\">\r\n                                      <span role=\"img\" aria-label=\"Live chat\">\r\n                                        🎡\r\n                                      </span>\r\n                                    </div>\r\n                                    Channels\r\n                                  </h4>\r\n                                  <p className=\"font-size-sm text-gray-700 mb-0\">\r\n                                    Connect with your customers on the channels of\r\n                                    their choice\r\n                                  </p>\r\n                                </div>\r\n                              </a>\r\n                            </div>\r\n                          </div>\r\n                          <div className=\"col-md-6\">\r\n                            <div className=\"list-group list-group-flush border-top border-top-md-0\">\r\n                              <a\r\n                                className=\"features-menu-item list-group-item bg-white\"\r\n                                href=\"https://www.chatwoot.com/features/chatbots\"\r\n                              >\r\n                                <div className=\"mx-2\">\r\n                                  <h4 className=\"mb-1 d-flex align-items-center title\">\r\n                                    <div className=\"icon icon-xs mr-3 d-inline-block text-primary\">\r\n                                      <span role=\"img\" aria-label=\"Chatbots\">\r\n                                        🤖\r\n                                      </span>\r\n                                    </div>\r\n                                    Chatbots\r\n                                  </h4>\r\n                                  <p className=\"font-size-sm text-gray-700 mb-0\">\r\n                                    Easily integrate with popular chatbot platforms to\r\n                                    automate conversations\r\n                                  </p>\r\n                                </div>\r\n                              </a>\r\n                              <a\r\n                                className=\"features-menu-item list-group-item bg-white\"\r\n                                href=\"https://www.chatwoot.com/mobile-apps\"\r\n                              >\r\n                                <div className=\"mx-2\">\r\n                                  <h4 className=\"mb-1 d-flex align-items-center title\">\r\n                                    <div className=\"icon icon-xs mr-3 d-inline-block text-primary\">\r\n                                      <span role=\"img\" aria-label=\"Mobile apps\">\r\n                                        📱\r\n                                      </span>\r\n                                    </div>\r\n                                    Mobile apps\r\n                                  </h4>\r\n                                  <p className=\"font-size-sm text-gray-700 mb-0\">\r\n                                    Don't miss out on new customers. Manage\r\n                                    conversations on the go\r\n                                  </p>\r\n                                </div>\r\n                              </a>\r\n                              <a\r\n                                className=\"features-menu-item list-group-item bg-white\"\r\n                                href=\"https://www.chatwoot.com/features/integrations\"\r\n                              >\r\n                                <div className=\"mx-2\">\r\n                                  <h4 className=\"mb-1 d-flex align-items-center title\">\r\n                                    <div className=\"icon icon-xs mr-3 d-inline-block text-primary\">\r\n                                      <span role=\"img\" aria-label=\"Integrations\">\r\n                                        ⚡\r\n                                      </span>\r\n                                    </div>\r\n                                    Integrations\r\n                                  </h4>\r\n                                  <p className=\"font-size-sm text-gray-700 mb-0\">\r\n                                    Super charge your workflow with integrations\r\n                                  </p>\r\n                                </div>\r\n                              </a>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                      <a className=\"nav-link\" href=\"https://www.chatwoot.com/blog\">\r\n                        Blog\r\n                      </a>\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                      <a className=\"nav-link\" href=\"https://www.chatwoot.com/pricing\">\r\n                        Pricing\r\n                      </a>\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                      <a\r\n                        className=\"nav-link\"\r\n                        href=\"https://www.chatwoot.com/help-center\"\r\n                      >\r\n                        Help Center\r\n                      </a>\r\n                    </li>\r\n                    <li className=\"nav-item mr-4\">\r\n                      <a\r\n                        className=\"nav-link\"\r\n                        href=\"https://app.chatwoot.com/app/login\"\r\n                      >\r\n                        Login\r\n                      </a>\r\n                    </li>\r\n                  </ul>\r\n                  <a\r\n                    className=\"navbar-btn btn btn-sm btn-primary lift\"\r\n                    href=\"https://app.chatwoot.com/app/auth/signup\"\r\n                  >\r\n                    Create an account\r\n                  </a>\r\n                </div>\r\n              </div>\r\n            </nav>\r\n            </>\r\n    );\r\n}\r\n \r\nexport default HomeNavBar;","D:\\w3bizz\\React\\src\\Services\\headerServices.js",[],"D:\\w3bizz\\React\\src\\component\\about\\ForgotPassword.js",["218","219","220","221"],"import React, { Component } from 'react';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { withRouter } from 'react-router-dom'\nimport { loginUserError, loginUserSuccess } from '../../redux/actions/LoginActions'\nimport { connect } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { sendEmailOTP, sendVerifyOTP, patchApi } from '../../services/apiFunction'\nimport { CircularProgress } from '@material-ui/core'\nimport '../App.css'\n\nclass ForgotPassword extends Component {\n    state = {\n        otpDisplay: false,\n        loader: false,\n        passwordDisplay:false,\n        otpError:false,\n        passwordError:false,\n        email:'',\n    }\n\n    onOTPSubmit = async (fields) => {\n      const obj = {}\n        obj.email = fields.email\n        obj.otp = fields.otp\n        const response = await sendVerifyOTP(obj)\n        if(response.STATUS == \"SUCCESS\"){\n          this.setState({email:fields.email})\n          this.setState({passwordDisplay:true})\n        }else{\n          this.setState({otpError:true})\n        }\n    }\n\n    onEmailSubmit = async (fields) => {\n      const obj = {}\n      obj.email = fields.email\n      const response = await sendEmailOTP(obj)\n      if(response.STATUS == \"SUCCESS\"){\n        this.setState({email:fields.email})\n        this.setState({otpDisplay:true})\n      }else{\n        this.setState({passwordError:true})\n      }\n  }\n\n  onPasswordSubmit = async (fields) => {\n    \n    const obj = {}\n    obj.email = fields.email\n    obj.password = fields.password\n    const response = await patchApi(obj)\n    if(response.STATUS == \"SUCCESS\"){\n      this.props.history.push('/login')\n      this.setState({email:fields.email})\n    }else{\n    toast.error(\"Something Went Wrong\")\n    }\n}\n    render() {\n        return (\n            <>\n                <div className=\"row col-lg-10 mx-auto mt-5\">\n                    <div className=\"col-lg-6\">\n                    <img src=\"/login.jpeg\" className=\"img-fluid\"/>\n                    </div>\n                    <div className=\"col-lg-6 col-xs-12\">\n                    {!this.state.otpDisplay && !this.state.passwordDisplay &&\n                      <Formik\n                            initialValues={{\n                                email: ''\n                            }}\n                            validationSchema={Yup.object().shape({\n                                email: Yup.string()\n                                    .email('Email is invalid')\n                                    .required('Email is required')\n                            })}\n                            onSubmit={this.onEmailSubmit}\n                            render={({ errors, status, touched, setFieldValue }) => (\n                                <div className=\"card\" style={{ width: \"90%\" }}>\n                                    <div className=\"card-body container\" >\n                                        <Form>\n                                            <div className=\"form-group\">\n                                                <label htmlFor=\"email\">Email</label>\n                                                <Field name=\"email\" type=\"text\" className={'form-control' + (errors.email && touched.email ? ' is-invalid' : '')} />\n                                                <ErrorMessage name=\"email\" component=\"div\" className=\"invalid-feedback\" />\n                                            </div>\n                                            <div className=\"form-group\">\n                                                {this.state.loader ?\n                                                    <CircularProgress /> :\n                                                    <button style={{ borderRadius: \"6px\", backgroundColor: \"#1DABB8\" }} type=\"submit\" className=\"btn mr-2 text-white\">Submit</button>\n                                                }\n                                            </div>\n                                        </Form>\n                                        <br />\n                                    </div>\n                                </div>\n                            )}\n                        />}\n                        {this.state.otpDisplay && !this.state.passwordDisplay &&\n                        <Formik\n                            initialValues={{\n                                email: this.state.email,\n                                otp:''\n                            }}\n                            validationSchema={Yup.object().shape({\n                                otp: Yup.string().required('Please Enter OTP')\n                            })}\n                            onSubmit={this.onOTPSubmit}\n                            render={({ errors, status, touched, setFieldValue }) => (\n                                <div className=\"card\" style={{ width: \"90%\" }}>\n                                    <div className=\"card-body container\" >\n                                        <Form>\n                                            <div className=\"form-group\">\n                                                <label htmlFor=\"email\">Email</label>\n                                                <Field name=\"email\" type=\"text\" className={'form-control' + (errors.email && touched.email ? ' is-invalid' : '')} />\n                                                <ErrorMessage name=\"email\" component=\"div\" className=\"invalid-feedback\" />\n                                            </div>\n                                            <div className=\"form-group\">\n                                                <label htmlFor=\"otp\">Enter OTP</label>\n                                                <Field name=\"otp\" type=\"text\" className={'form-control' + (errors.otp && touched.otp ? ' is-invalid' : '')} />\n                                                <ErrorMessage name=\"otp\" component=\"div\" className=\"invalid-feedback\" />\n                                            </div>\n                                            <div className=\"form-group\">\n                                                {this.state.loader ?\n                                                    <CircularProgress /> :\n                                                    <button style={{ borderRadius: \"6px\", backgroundColor: \"#1DABB8\" }} type=\"submit\" className=\"btn mr-2 text-white\">Submit</button>\n                                                }\n                                            </div>\n                                        </Form>\n                                        {this.state.otpError &&<div style={{color:\"darkred\"}}>Please Enter Correct OTP</div>}\n                                        <br />\n                                    </div>\n                                </div>\n                            )}\n                        />\n                        }\n                        {this.state.passwordDisplay && this.state.otpDisplay &&\n                          <Formik\n                            initialValues={{\n                                email: this.state.email,\n                                password: '',\n                            }}\n                            validationSchema={Yup.object().shape({\n                                password: Yup.string()\n                                    .min(6, 'Password must be at least 6 characters')\n                                    .required('Password is required')\n                            })}\n                            onSubmit={this.onPasswordSubmit}\n                            render={({ errors, status, touched, setFieldValue }) => (\n                                <div className=\"card\" style={{ width: \"90%\" }}>\n                                    <div className=\"card-body container\" >\n                                        <Form>\n                                            <div className=\"form-group\">\n                                                <label htmlFor=\"password\">Password</label>\n                                                <Field name=\"password\" type=\"password\" className={'form-control' + (errors.password && touched.password ? ' is-invalid' : '')} />\n                                                <ErrorMessage name=\"password\" component=\"div\" className=\"invalid-feedback\" />\n                                            </div>\n                                            <div className=\"form-group\">\n                                                {this.state.loader ?\n                                                    <CircularProgress /> :\n                                                    <button style={{ borderRadius: \"6px\", backgroundColor: \"#1DABB8\" }} type=\"submit\" className=\"btn mr-2 text-white\">Submit</button>\n                                                }\n                                            </div>\n                                        </Form>\n                                        <br />\n                                        {this.state.passwordError &&<div style={{color:\"darkred\"}}>Please Enter Correct Password</div>}\n                                    </div>\n                                </div>\n                            )}\n                        />\n                        }\n                    </div>\n                </div>\n            </>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        error: state.login && state.login.error,\n        data: state.login && state.login.data\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        loginUsersSuccess: (data) => dispatch(loginUserSuccess(data)),\n        loginUsersError: (data) => dispatch(loginUserError(data))\n    }\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(ForgotPassword));","D:\\w3bizz\\React\\src\\component\\Modal\\Template.js",["222","223","224","225","226","227","228"],"D:\\w3bizz\\React\\src\\component\\payment\\StripeApp.js",["229","230","231","232","233"],"import React, { useState } from \"react\";\r\nimport { loadStripe } from \"@stripe/stripe-js\";\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport {\r\n  CardElement,\r\n  Elements,\r\n  useElements,\r\n  useStripe\r\n} from \"@stripe/react-stripe-js\";\r\nimport \"./styles.css\";\r\nimport { addSlots, addTransaction, payMoney, updateSlots } from \"../../services/apiFunction\";\r\nimport moment from \"moment\";\r\n\r\nconst CARD_OPTIONS = {\r\n  iconStyle: \"solid\",\r\n  style: {\r\n    base: {\r\n      iconColor: \"#c4f0ff\",\r\n      color: \"blue\",\r\n      fontWeight: 500,\r\n      fontFamily: \"Roboto, Open Sans, Segoe UI, sans-serif\",\r\n      fontSize: \"16px\",\r\n      fontSmoothing: \"antialiased\",\r\n      \":-webkit-autofill\": {\r\n        color: \"#fce883\"\r\n      },\r\n      \"::placeholder\": {\r\n        color: \"#87bbfd\"\r\n      }\r\n    },\r\n    invalid: {\r\n      iconColor: \"#ffc7ee\",\r\n      color: \"#ffc7ee\"\r\n    }\r\n  }\r\n};\r\n\r\nconst CardField = ({ onChange }) => (\r\n  <div className=\"FormRow\">\r\n    <CardElement options={CARD_OPTIONS} onChange={onChange} />\r\n  </div>\r\n);\r\n\r\nconst Field = ({\r\n  label,\r\n  id,\r\n  type,\r\n  placeholder,\r\n  required,\r\n  autoComplete,\r\n  value,\r\n  onChange\r\n}) => (\r\n  <div className=\"FormRow\">\r\n    <label htmlFor={id} className=\"FormRowLabel\">\r\n      {label}\r\n    </label>\r\n    <input\r\n      className=\"FormRowInput\"\r\n      id={id}\r\n      type={type}\r\n      placeholder={placeholder}\r\n      required={required}\r\n      autoComplete={autoComplete}\r\n      value={value}\r\n      onChange={onChange}\r\n    />\r\n  </div>\r\n);\r\n\r\nconst SubmitButton = ({ processing, error, children, disabled }) => (\r\n  <button className={`SubmitButton ${error ? \"SubmitButton--error\" : \"\"}`}\r\n    type=\"submit\"\r\n    disabled={processing || disabled}\r\n  >\r\n    {processing ? \"Processing...\" : children}\r\n  </button>\r\n);\r\n\r\nconst ErrorMessage = ({ children }) => (\r\n  <div role=\"alert\">\r\n    <svg width=\"16\" height=\"16\" viewBox=\"0 0 17 17\">\r\n      <path\r\n        fill=\"#F19\"\r\n        d=\"M8.5,17 C3.80557963,17 0,13.1944204 0,8.5 C0,3.80557963 3.80557963,0 8.5,0 C13.1944204,0 17,3.80557963 17,8.5 C17,13.1944204 13.1944204,17 8.5,17 Z\"\r\n      />\r\n      <path\r\n        fill=\"#6772e5\"\r\n        d=\"M8.5,7.29791847 L6.12604076,4.92395924 C5.79409512,4.59201359 5.25590488,4.59201359 4.92395924,4.92395924 C4.59201359,5.25590488 4.59201359,5.79409512 4.92395924,6.12604076 L7.29791847,8.5 L4.92395924,10.8739592 C4.59201359,11.2059049 4.59201359,11.7440951 4.92395924,12.0760408 C5.25590488,12.4079864 5.79409512,12.4079864 6.12604076,12.0760408 L8.5,9.70208153 L10.8739592,12.0760408 C11.2059049,12.4079864 11.7440951,12.4079864 12.0760408,12.0760408 C12.4079864,11.7440951 12.4079864,11.2059049 12.0760408,10.8739592 L9.70208153,8.5 L12.0760408,6.12604076 C12.4079864,5.79409512 12.4079864,5.25590488 12.0760408,4.92395924 C11.7440951,4.59201359 11.2059049,4.59201359 10.8739592,4.92395924 L8.5,7.29791847 L8.5,7.29791847 Z\"\r\n      />\r\n    </svg>\r\n    {children}\r\n  </div>\r\n);\r\n\r\nconst ResetButton = ({ onClick }) => (\r\n  <button type=\"button\" className=\"ResetButton\" onClick={onClick}>\r\n    <svg width=\"32px\" height=\"32px\" viewBox=\"0 0 32 32\">\r\n      <path\r\n        fill=\"#blue \"\r\n        d=\"M15,7.05492878 C10.5000495,7.55237307 7,11.3674463 7,16 C7,20.9705627 11.0294373,25 16,25 C20.9705627,25 25,20.9705627 25,16 C25,15.3627484 24.4834055,14.8461538 23.8461538,14.8461538 C23.2089022,14.8461538 22.6923077,15.3627484 22.6923077,16 C22.6923077,19.6960595 19.6960595,22.6923077 16,22.6923077 C12.3039405,22.6923077 9.30769231,19.6960595 9.30769231,16 C9.30769231,12.3039405 12.3039405,9.30769231 16,9.30769231 L16,12.0841673 C16,12.1800431 16.0275652,12.2738974 16.0794108,12.354546 C16.2287368,12.5868311 16.5380938,12.6540826 16.7703788,12.5047565 L22.3457501,8.92058924 L22.3457501,8.92058924 C22.4060014,8.88185624 22.4572275,8.83063012 22.4959605,8.7703788 C22.6452866,8.53809377 22.5780351,8.22873685 22.3457501,8.07941076 L22.3457501,8.07941076 L16.7703788,4.49524351 C16.6897301,4.44339794 16.5958758,4.41583275 16.5,4.41583275 C16.2238576,4.41583275 16,4.63969037 16,4.91583275 L16,7 L15,7 L15,7.05492878 Z M16,32 C7.163444,32 0,24.836556 0,16 C0,7.163444 7.163444,0 16,0 C24.836556,0 32,7.163444 32,16 C32,24.836556 24.836556,32 16,32 Z\"\r\n      />\r\n    </svg>\r\n  </button>\r\n);\r\n\r\nconst CheckoutForm = (props) => {\r\n  const stripe = useStripe();\r\n  const elements = useElements();\r\n  const [error, setError] = useState(null);\r\n  const [cardComplete, setCardComplete] = useState(false);\r\n  const [processing, setProcessing] = useState(false);\r\n  const [paymentMethod, setPaymentMethod] = useState(null);\r\n  const [billingDetails, setBillingDetails] = useState({\r\n    email: \"vaibhavsilkmills@gmail.com\",\r\n    phone: \"9998565689\",\r\n    name: \"Vaibhav\"\r\n  });\r\n\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    if (!stripe || !elements) {\r\n      // Stripe.js has not loaded yet. Make sure to disable\r\n      // form submission until Stripe.js has loaded.\r\n      return;\r\n    }\r\n\r\n    if (error) {\r\n      elements.getElement(\"card\").focus();\r\n      return;\r\n    }\r\n\r\n    if (cardComplete) {\r\n      setProcessing(true);\r\n    }\r\n    \r\n    let obj = {}\r\n    obj.amount = props.planValue\r\n    obj.currency = \"INR\"\r\n    const payload = await payMoney(obj)\r\n    console.log(payload)\r\n    if (payload.STATUS == \"SUCCESS\") {\r\n      let objPayData = {}\r\n      toast.success(\"Payment Successful\")\r\n      objPayData.username = props.username\r\n      objPayData.amount = props.planValue\r\n      objPayData.tdata = payload.SECRET\r\n      let payRun = await addTransaction(objPayData)\r\n      console.log(payRun)\r\n      if (props.updateData && props.updateData.length > 0) {\r\n        for(let i=0 ; i<props.updateData.length ; i++){\r\n          let obj = {}\r\n          obj.username = props.username\r\n          obj.slot_id = props.updateData[i].slot_id\r\n          obj.expiry_date = moment(moment(props.updateData[i].expiry_date).add(1, 'y')).format(\"YYYY-MM-DD\")\r\n          const resp = await updateSlots(obj)\r\n        }\r\n        toast.success(\"Slot Renewed Successfully\")\r\n      }\r\n      else {\r\n        for (let i = 0; i < props.slotNum; i++) {\r\n          let obj = {}\r\n          obj.username = props.username\r\n          obj.publish_name = moment().unix() + \"i\" + i\r\n          obj.published = \"FALSE\"\r\n          obj.publish_date = \"\"\r\n          obj.purchase_date = moment().format(\"YYYY-MM-DD\")\r\n          obj.expiry_date = \"\"\r\n          const response = await addSlots(obj)\r\n        }\r\n        toast.success(\"Slot Added Succesfully\")\r\n      }\r\n      window.location.reload()\r\n    }\r\n    setProcessing(false);\r\n\r\n    if (payload.error) {\r\n      setError(payload.error);\r\n    } else {\r\n\r\n    }\r\n  };\r\n\r\n  const reset = () => {\r\n    setError(null);\r\n    setProcessing(false);\r\n    setPaymentMethod(null);\r\n    setBillingDetails({\r\n      email: \"\",\r\n      phone: \"\",\r\n      name: \"Vaibhav\"\r\n    });\r\n  };\r\n\r\n  return paymentMethod ? (\r\n    <div className=\"Result\">\r\n      <div className=\"ResultTitle\" role=\"alert\">\r\n        Payment successful\r\n      </div>\r\n      <div className=\"ResultMessage\">\r\n        Thanks for trying Stripe Elements. No money was charged, but we\r\n        generated a PaymentMethod: {paymentMethod.id}\r\n      </div>\r\n      <ResetButton onClick={reset} />\r\n    </div>\r\n  ) : (\r\n    <>\r\n      <form className=\"Form\" onSubmit={handleSubmit}>\r\n        <fieldset className=\"FormGroup\">\r\n          <CardField\r\n            onChange={(e) => {\r\n              setError(e.error);\r\n              setCardComplete(e.complete);\r\n            }}\r\n          />\r\n        </fieldset>\r\n        {error && <ErrorMessage>{error.message}</ErrorMessage>}\r\n        <SubmitButton processing={processing} error={error} disabled={!stripe}>\r\n          Pay INR-{props.planValue}\r\n        </SubmitButton>\r\n      </form>\r\n    </>\r\n  );\r\n};\r\n\r\nconst ELEMENTS_OPTIONS = {\r\n  fonts: [\r\n    {\r\n      cssSrc: \"https://fonts.googleapis.com/css?family=Roboto\"\r\n    }\r\n  ]\r\n};\r\n\r\n// Make sure to call `loadStripe` outside of a component’s render to avoid\r\n// recreating the `Stripe` object on every render.\r\nconst stripePromise = loadStripe(\"pk_test_6pRNASCoBOKtIshFeQd4XMUh\");\r\n\r\nconst StripeApp = (props) => {\r\n  console.log(props)\r\n  return (\r\n    <div className=\"AppWrapper\">\r\n      <Elements stripe={stripePromise} options={ELEMENTS_OPTIONS}>\r\n        <CheckoutForm planValue={props.planValue} username={props.username} slotNum={props.slotNumber} updateData={props.updateData}/>\r\n      </Elements>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StripeApp;\r\n","D:\\w3bizz\\React\\src\\component\\modal\\Template.js",["234","235","236","237","238","239","240","241","242","243","244"],"import React, { Component } from 'react';\r\nimport { MDBContainer, MDBBtn, MDBModal, MDBModalBody, MDBModalHeader, MDBModalFooter } from 'mdbreact';\r\nimport { addPage, addTemplate, getTemplate, updateTemplate, uploadImage } from '../../services/apiFunction';\r\nimport { connect } from 'react-redux'\r\nimport { toast, ToastContainer } from 'react-toastify';\r\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\r\nimport * as Yup from 'yup'\r\nimport * as actions from '../../redux/actions/GetBlogByIdActions'\r\nimport { withRouter } from 'react-router-dom'\r\n\r\nclass ModalPage extends Component {\r\n    state = {\r\n        modal: false,\r\n        file: '',\r\n        loader: '',\r\n        fileSrc: this.props.data ? this.props.data.image : ''\r\n    }\r\n\r\n    toggle = () => {\r\n        this.setState({\r\n            modal: !this.state.modal,\r\n            file: '',\r\n            fileSrc:''\r\n        });\r\n    }\r\n\r\n    onAdd = async (fields) => {\r\n        this.props.loader()\r\n        if (this.state.file) {\r\n            const response = await uploadImage(this.state.file)\r\n            fields.image = response.data.secure_url\r\n        }\r\n        fields.username = this.props.user.username\r\n        fields.category = \"new category\"\r\n        fields.tags = \"new tags\"\r\n        fields.type = this.props.type == \"DEFAULT\" ? \"DEFAULT\" : \"USER\"\r\n        const resp = await addTemplate(fields)\r\n        if (resp) {\r\n            toast.success(\"Template Created Successfully\")\r\n            let obj = {}\r\n            obj.title = \"Home Page\"\r\n            obj.publish_name = \"New Template\"\r\n            obj.template_id = resp.TEMPLATE_ID\r\n            obj.is_homepage = \"TRUE\"\r\n            obj.code = \"new title\"\r\n            await addPage(obj)\r\n            const tempData1 = await getTemplate(this.props.user.username)\r\n            if (tempData1.STATUS == \"SUCCESS\") {\r\n                this.setState({ file: '', fileSrc: '' })\r\n                this.props.loader()\r\n                this.props.toggle()\r\n                if (this.props.type == \"DEFAULT\") {\r\n                    this.props.createAdminTemplate(tempData1.DEFAULT_TEMPLATE)\r\n                }\r\n                else {\r\n                    this.props.createBlog(tempData1.USER_TEMPLATE)\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            this.props.loader()\r\n            toast.success(resp.data.message)\r\n        }\r\n    }\r\n\r\n    onEdit = async (fields) => {\r\n        this.props.loader()\r\n        if (this.state.file) {\r\n            const response = await uploadImage(this.state.file)\r\n            fields.image = response.data.secure_url\r\n        }\r\n        fields.username = this.props.user.username\r\n        fields.id = this.props.data.id\r\n        const resp = await updateTemplate(fields)\r\n        if (resp) {\r\n            toast.success(\"Template Updated Successfully\")\r\n            this.setState({ loader: false })\r\n            let blog = this.props.type == \"DEFAULT\" ? this.props.adminBlog : this.props.blog\r\n            var list = []\r\n            blog.forEach((el) => {\r\n                if (el.id == fields.id) {\r\n                    el.title = fields.title\r\n                    list.push(el)\r\n                }\r\n                else {\r\n                    list.push(el)\r\n                }\r\n            })\r\n            this.props.toggle()\r\n            this.props.loader()\r\n            this.setState({ file: '', fileSrc: '' })\r\n            if (this.props.type == \"DEFAULT\") {\r\n                this.props.createAdminTemplate(list)\r\n\r\n            }\r\n            else {\r\n                this.props.createBlog(list)\r\n            }\r\n        }\r\n        else {\r\n            this.props.loader()\r\n            toast.success(resp.data.message)\r\n        }\r\n    }\r\n\r\n    handleFile = (e) => {\r\n        this.setState({\r\n            fileSrc: URL.createObjectURL(e.target.files[0]),\r\n            file: e.target.files[0]\r\n        })\r\n    }\r\n\r\n    render() {\r\n        console.log(this.props.data)\r\n        return (\r\n            <MDBContainer>\r\n                <MDBModal centered isOpen={this.props.modal} toggle={this.props.toggle}>\r\n                    <MDBModalHeader toggle={this.props.toggle}>{this.props.title}</MDBModalHeader>\r\n                    <MDBModalBody>\r\n                        <Formik\r\n                            initialValues={{\r\n                                title: this.props.data.title ? this.props.data.title : '',\r\n                            }}\r\n                            validationSchema={Yup.object().shape({\r\n                                title: Yup.string()\r\n                                    .required('Template Title is required'),\r\n                            })}\r\n                            onSubmit={async (fields, { resetForm, initialValues }) => {\r\n                                resetForm(initialValues)\r\n                                if (this.props.Add == true) {\r\n                                    this.onAdd(fields)\r\n                                } else {\r\n                                    this.onEdit(fields)\r\n                                }\r\n\r\n                            }}\r\n                            render={({ errors, touched, setFieldValue }) => (\r\n\r\n                                <Form>\r\n                                    <div className=\"form-group\">\r\n                                        <label htmlFor=\"title\">Title</label>\r\n                                        <Field name=\"title\" type=\"text\" className={'form-control' + (errors.title && touched.title ? ' is-invalid' : '')} />\r\n                                        <ErrorMessage name=\"title\" component=\"div\" className=\"invalid-feedback\" />\r\n                                    </div>\r\n                                    <div className=\"form-group\">\r\n                                        <label htmlFor=\"title\">Images</label>\r\n                                        <input name=\"image\" onChange={(e) => this.handleFile(e)} type=\"file\" className=\"form-control\" />\r\n                                        <br />\r\n                                        {(this.state.fileSrc || this.props.data.image) &&\r\n                                            <img src={this.props.data.image ? this.props.data.image : this.state.fileSrc} style={{ width: \"10em\", height: \"6em\", marginTop: \"10px\" }} />\r\n                                        }\r\n                                    </div>\r\n                                    <br />\r\n                                    <div className=\"form-group\">\r\n                                        <button type=\"submit\" className=\"btn btn-primary\">{this.props.title}</button>\r\n                                        &nbsp;\r\n                                        <button type=\"reset\" onClick={() => this.fileInput.value = \"\"} className=\"btn btn-secondary\">Reset</button>\r\n                                    </div>\r\n                                </Form>\r\n                            )}\r\n                        />\r\n                    </MDBModalBody>\r\n                </MDBModal>\r\n            </MDBContainer>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n\r\n    return {\r\n        user: state.login.data,\r\n        blog: state.getBlogById.allBlog,\r\n        adminBlog: state.getBlogById.allAdminBlog,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        fetchIdBlog: (data) => dispatch(actions.fetchIdTemplate(data)),\r\n        createBlog: (data) => dispatch(actions.getBlogIdSuccess(data)),\r\n        createAdminTemplate: (data) => dispatch(actions.getAdminBlogIdSuccess(data))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(ModalPage));\r\n","D:\\w3bizz\\React\\src\\component\\modal\\SlotModal.js",["245","246","247","248","249"],"import React, { Component } from 'react';\r\nimport { MDBContainer, MDBModal, MDBModalBody, MDBModalHeader, MDBModalFooter } from 'mdbreact';\r\nimport { connect } from 'react-redux'\r\nimport { toast } from 'react-toastify';\r\nimport * as actions from '../../redux/actions/GetBlogByIdActions'\r\nimport {Card, CardContent} from '@material-ui/core';\r\nimport '../../asset/Template.css'\r\nimport StripeApp from '../payment/StripeApp';\r\nimport { addSlots } from '../../services/apiFunction';\r\nimport moment from 'moment';\r\n\r\nclass SlotModal extends Component {\r\n\r\n    state = {\r\n        file: '',\r\n        loader: '',\r\n        payModalError: '',\r\n        radioValue: '',\r\n        stripeModal: false,\r\n        slotNumber: 1,\r\n        planValue: '',\r\n        slotsNumber: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n    }\r\n\r\n    toggle = () => {\r\n        this.setState({\r\n            stripeModal: !this.state.stripeModal\r\n        });\r\n    }\r\n\r\n    AddPay = async (e) => {\r\n        if (this.state.radioValue || this.state.slotNumber) {\r\n            e.preventDefault()\r\n            let planValue = this.state.radioValue ? this.state.radioValue : ((this.state.slotNumber) * 699)\r\n            this.setState({ planValue: planValue })\r\n            if (planValue == 2399) {\r\n                this.setState({ slotsNumber: 3 })\r\n            }\r\n            this.setState({ stripeModal: true })\r\n            this.props.toggle()\r\n            this.setState({ payModalError: \"\" })\r\n        }\r\n        else {\r\n            this.setState({ payModalError: \"Please Select Some Plan\" })\r\n        }\r\n    }\r\n\r\n    AddTrialSlot = async (e) => {\r\n        e.preventDefault()\r\n        this.props.loader()\r\n        let obj = {}\r\n        obj.username = this.props.user.username\r\n        obj.publish_name = this.props.user.lname + Math.floor(100000 + Math.random() * 900000)\r\n        obj.published = \"FALSE\"\r\n        obj.publish_date = \"\"\r\n        obj.purchase_date = moment().format(\"YYYY-MM-DD\")\r\n        obj.expiry_date = moment(moment(obj.purchase_date).add(7,'d')).format('YYYY-MM-DD')\r\n        const response = await addSlots(obj)\r\n        if (response.STATUS == \"SUCCESS\") {\r\n            toast.success(\"Slot Created Successfully\")\r\n            this.props.toggle()\r\n        }\r\n        else {\r\n            toast.error(\"Error in Slot\")\r\n        }\r\n    }\r\n\r\n    render() {\r\n        console.log(this.props.slotDetails)\r\n        return (\r\n            <>\r\n                <MDBContainer>\r\n                    <MDBModal centered isOpen={this.props.modal} toggle={this.props.toggle}>\r\n                        <MDBModalHeader toggle={this.props.toggle}>{this.props.title}</MDBModalHeader>\r\n                        <MDBModalBody>\r\n                            {this.props.slotDetails.length==0 && this.props.expiredSlots.length==0 &&\r\n                                <div className=\"row\">\r\n                                    <div className=\"col-sm-6\">\r\n                                        <label>\r\n                                            <input type=\"radio\" value=\"999\" name=\"page\" className=\"card-input-element\" onChange={(e) => { this.setState({ radioValue: e.target.value }) }} />\r\n                                            <Card className=\"card-input\">\r\n                                                <CardContent>\r\n                                                    <h3>Basic Plan</h3>\r\n                                                    <h2>Rs. 999</h2>\r\n                                                    <div>\r\n                                                        Books 1 Slot For Publishing Website\r\n                                                    </div>\r\n                                                </CardContent>\r\n                                            </Card>\r\n                                        </label>\r\n                                    </div>\r\n                                    <div className=\"col-sm-6\">\r\n                                        <label>\r\n                                            <input type=\"radio\" value=\"2399\" name=\"page\" className=\"card-input-element\" onChange={(e) => { this.setState({ radioValue: e.target.value }) }} />\r\n                                            <Card className=\"card-input\">\r\n                                                <CardContent>\r\n                                                    <h3>Pro Plan</h3>\r\n                                                    <h2>Rs. 2399</h2>\r\n                                                    <div>\r\n                                                        Books 3 Slot For Publishing Website\r\n                                                    </div>\r\n                                                </CardContent>\r\n                                            </Card>\r\n                                        </label>\r\n                                    </div>\r\n                                </div>\r\n                            }\r\n                            {\r\n                                ((this.props.slotDetails.length > 0)||(this.props.expiredSlots.length > 0)) &&\r\n                                <>\r\n                                    <br />\r\n                                    <div style={{ display: \"flex\" }}>\r\n                                        <h6>Buy &nbsp;</h6>\r\n                                        <select name=\"slotnumber\" value={this.state.slotNumber} onChange={(e) => { this.setState({ slotNumber: e.target.value }) }}>\r\n                                            {this.state.slotsNumber.map((val) => (\r\n                                                <option value={val}>{val}</option>\r\n                                            ))}\r\n                                        </select>\r\n                                        <h6> &nbsp;More Slots</h6>\r\n                                    </div>\r\n                                    <Card className=\"card-input\">\r\n                                        <CardContent>\r\n                                            <h3>Extra Slots</h3>\r\n                                            <h2>Rs. 699</h2>\r\n                                            <div>\r\n                                                You Can Use for Publishing more Websites\r\n                                            </div>\r\n                                        </CardContent>\r\n                                    </Card>\r\n                                    <br />\r\n                                    <div><h6>Total Amount to Be Paid is {(this.state.slotNumber) * (699)}</h6></div>\r\n                                </>\r\n                            }\r\n                        </MDBModalBody>\r\n                        <MDBModalFooter>\r\n                            <span style={{ float: \"right\" }}>\r\n                                {this.props.slotDetails.length == 0 &&\r\n                                    <button className=\"btn btn-info\" onClick={(e) => { this.AddTrialSlot(e) }}>7 Days Free Trial</button>\r\n                                }\r\n                                &nbsp;\r\n                                <button className=\"btn btn-info\" onClick={(e) => { this.AddPay(e) }}>Buy Now</button>\r\n                            </span>\r\n                        </MDBModalFooter>\r\n                    </MDBModal>\r\n\r\n                    <MDBModal centered isOpen={this.state.stripeModal} toggle={this.toggle}>\r\n                        <MDBModalHeader toggle={this.toggle}>Pay Order</MDBModalHeader>\r\n                        <MDBModalBody>\r\n                            <StripeApp planValue={this.state.planValue} slotNumber={this.state.slotNumber} username={this.props.user.username} toast={toast} />\r\n                        </MDBModalBody>\r\n                    </MDBModal>\r\n\r\n                </MDBContainer>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n\r\n    return {\r\n        user: state.login.data,\r\n        blog: state.getBlogById.allBlog,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        fetchIdBlog: (data) => dispatch(actions.fetchIdTemplate(data)),\r\n        createBlog: (data) => dispatch(actions.getBlogIdSuccess(data))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SlotModal)","D:\\w3bizz\\React\\src\\component\\modal\\Page.js",["250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265"],"import React, { Component } from 'react';\r\nimport { MDBContainer, MDBModal, MDBModalBody, MDBModalHeader, MDBModalFooter } from 'mdbreact';\r\nimport { addPage, getTemplate, updateHidePage, uploadImage } from '../../services/apiFunction';\r\nimport { connect } from 'react-redux'\r\nimport { toast, ToastContainer } from 'react-toastify';\r\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\r\nimport * as Yup from 'yup'\r\nimport * as actions from '../../redux/actions/GetBlogByIdActions'\r\nimport { withRouter } from 'react-router-dom'\r\n\r\nclass PageModal extends Component {\r\n    state = {\r\n        modal: false,\r\n        file: '',\r\n        loader: '',\r\n        favicon: '',\r\n        fileSrc: this.props.editData ? this.props.editData.image : '',\r\n        faviconSrc: this.props.editData ? this.props.editData.favicon : ''\r\n    }\r\n\r\n    toggle = () => {\r\n        this.setState({\r\n            file: '',\r\n            fileSrc: '',\r\n            favicon: '',\r\n            faviconSrc: ''\r\n        });\r\n        this.props.toggle()\r\n    }\r\n\r\n    onEdit = async (fields) => {\r\n        fields.id = this.props.editData.page_id\r\n        if (fields.homepage == true) {\r\n            fields.is_homepage = \"TRUE\"\r\n        } else {\r\n            fields.is_homepage = \"FALSE\"\r\n        }\r\n        if (this.state.file) {\r\n            const response = await uploadImage(this.state.file)\r\n            fields.image = response.data.secure_url\r\n        }\r\n        if (this.state.favicon) {\r\n            const response = await uploadImage(this.state.favicon)\r\n            fields.favicon = response.data.secure_url\r\n        }\r\n        const resp = await updateHidePage(fields)\r\n        if (resp.STATUS == \"SUCCESS\") {\r\n            const template = await getTemplate(this.props.user.username)\r\n            if (template.STATUS == \"SUCCESS\") {\r\n                this.props.toggle()\r\n                this.props.loader()\r\n                toast.success(\"Page Updated Successfully\")\r\n                if (this.props.type != \"DEFAULT\") {\r\n                    this.props.createPage(template.USER_TEMPLATE)\r\n                }else{\r\n                    this.props.createDefaultPage(template.DEFAULT_PAGES)\r\n                    window.location.reload()\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            toast.error(\"Something Went Wrong\")\r\n            this.props.loader()\r\n        }\r\n    }\r\n\r\n    onAdd = async (fields) => {\r\n        fields.template_id = this.props.type == \"DEFAULT\" ? \"\" : this.props.template_id\r\n        fields.code = \"new code\"\r\n        fields.type = this.props.type == \"DEFAULT\" ? \"DEFAULT\" : \"USER\"\r\n        if (fields.homepage == true) {\r\n            fields.is_homepage = \"TRUE\"\r\n        } else {\r\n            fields.is_homepage = \"FALSE\"\r\n        }\r\n        if (this.state.file) {\r\n            const response = await uploadImage(this.state.file)\r\n            fields.image = response.data.secure_url\r\n        }\r\n        if (this.state.favicon) {\r\n            const response = await uploadImage(this.state.favicon)\r\n            fields.favicon = response.data.secure_url\r\n        }\r\n        const resp = await addPage(fields)\r\n        if (resp.STATUS == \"SUCCESS\") {\r\n            const template = await getTemplate(this.props.user.username)\r\n            if (template.STATUS == \"SUCCESS\") {\r\n                toast.success(\"Page Created Successfully\")\r\n                this.props.toggle()\r\n                this.props.loader()\r\n                if (this.props.type !== \"DEFAULT\") {\r\n                    this.props.createPage(template.USER_TEMPLATE)\r\n                }else{\r\n                    this.props.createDefaultPage(template.DEFAULT_PAGES)\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            toast.error(\"Something Went Wrong\")\r\n            this.props.loader()\r\n        }\r\n    }\r\n\r\n    handleFile = (e) => {\r\n        this.setState({\r\n            fileSrc: URL.createObjectURL(e.target.files[0]),\r\n            file: e.target.files[0]\r\n        })\r\n    }\r\n\r\n    handleFavicon = (e) => {\r\n        this.setState({\r\n            faviconSrc: URL.createObjectURL(e.target.files[0]),\r\n            favicon: e.target.files[0]\r\n        })\r\n    }\r\n\r\n    render() {\r\n        console.log(this.props.editData)\r\n        return (\r\n            <MDBContainer>\r\n                <MDBModal centered isOpen={this.props.modal} toggle={this.toggle}>\r\n                    <MDBModalHeader toggle={this.toggle}>{this.props.title}</MDBModalHeader>\r\n                    <MDBModalBody>\r\n                        <Formik\r\n                            initialValues={{\r\n                                title: this.props.editData.page_title ? this.props.editData.page_title : '',\r\n                                publish_name: this.props.editData.publish_name ? this.props.editData.publish_name : '',\r\n                                homepage: this.props.editData.is_homepage ? (this.props.editData.is_homepage == \"TRUE\" ? true : false) : '',\r\n                                image: this.props.editData.image ? this.props.editData.image : '',\r\n                                favicon: this.props.editData.favicon ? this.props.editData.favicon : '',\r\n                                description: this.props.editData.description ? this.props.editData.description : ''\r\n                            }}\r\n                            validationSchema={Yup.object().shape({\r\n                                title: Yup.string()\r\n                                    .required('Template Title is required'),\r\n                                publish_name: Yup.string()\r\n                                    .required('Publish Name is required'),\r\n                                homepage: '',\r\n                            })}\r\n                            onSubmit={async (fields, { resetForm, initialValues }) => {\r\n                                resetForm(initialValues)\r\n                                this.props.loader()\r\n                                if (this.props.add == true) {\r\n                                    this.onAdd(fields)\r\n                                }\r\n                                else {\r\n                                    this.onEdit(fields)\r\n                                }\r\n                            }}\r\n                            render={({ errors, touched, setFieldValue }) => (\r\n                                <Form>\r\n                                    <div className=\"row\">\r\n                                        <div className=\"col-sm-6\">\r\n                                            <div className=\"form-group\">\r\n                                                <label htmlFor=\"title\">Title</label>\r\n                                                <Field name=\"title\" type=\"text\" className={'form-control' + (errors.title && touched.title ? ' is-invalid' : '')} />\r\n                                                <ErrorMessage name=\"title\" component=\"div\" className=\"invalid-feedback\" />\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className=\"col-sm-6\">\r\n                                            <div className=\"form-group\">\r\n                                                <label htmlFor=\"publish_name\">Publish Name</label>\r\n                                                <Field name=\"publish_name\" type=\"text\" className={'form-control' + (errors.publish_name && touched.publish_name ? ' is-invalid' : '')} />\r\n                                                <ErrorMessage name=\"publish_name\" component=\"div\" className=\"invalid-feedback\" />\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"row\">\r\n                                        <div className=\"col-sm-6\">\r\n                                            <div className=\"form-group\">\r\n                                                <label htmlFor=\"title\">Image Preview</label>\r\n                                                <input name=\"image\" onChange={(e) => this.handleFile(e)} type=\"file\" className=\"form-control\" />\r\n                                                <br />\r\n                                                {(this.props.editData.image || this.state.fileSrc) &&\r\n                                                    <img src={this.props.editData.image ? this.props.editData.image : this.state.fileSrc} style={{ width: \"10em\", height: \"6em\" }} />\r\n                                                }\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className=\"col-sm-6\">\r\n                                            <div className=\"form-group\">\r\n                                                <label htmlFor=\"title\">Favicon</label>\r\n                                                <input name=\"favicon\" onChange={(e) => this.handleFavicon(e)} type=\"file\" className=\"form-control\" />\r\n                                                <br />\r\n                                                {((this.state.faviconSrc || this.props.editData.favicon)) &&\r\n                                                    <img src={this.props.editData.favicon ? this.props.editData.favicon : this.state.faviconSrc} style={{ width: \"10em\", height: \"6em\" }} />\r\n                                                }\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"form-group\">\r\n                                        <label htmlFor=\"description\">Description</label>\r\n                                        <Field name=\"description\" type=\"textarea\" cols=\"10\" className=\"form-control\" />\r\n                                    </div>\r\n                                    {this.props.type != \"DEFAULT\" &&\r\n                                    <div className=\"form-group\">\r\n                                        <label htmlFor=\"homepage\">\r\n                                            <Field name=\"homepage\" type=\"checkbox\" />&nbsp; Default Home Page\r\n                                        </label>\r\n                                    </div>\r\n                                    }\r\n                                    <div className=\"form-group\">\r\n                                        <button type=\"submit\" className=\"btn btn-primary\">{this.props.title}</button>\r\n                                        &nbsp;\r\n                                        <button type=\"reset\" onClick={() => this.setState({ file: '' })} className=\"btn btn-secondary\">Reset</button>\r\n                                    </div>\r\n                                </Form>\r\n                            )}\r\n                        />\r\n                    </MDBModalBody>\r\n                </MDBModal>\r\n            </MDBContainer>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        user: state.login.data,\r\n        blog: state.getBlogById.allBlog,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        createDefaultPage: (data) => dispatch(actions.defaultPagesSuccess(data)),\r\n        fetchIdBlog: (data) => dispatch(actions.fetchIdTemplate(data)),\r\n        createPage: (data) => dispatch(actions.getBlogIdSuccess(data))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(PageModal));\r\n","D:\\w3bizz\\React\\src\\services\\ProtectedRoute.js",[],"D:\\w3bizz\\React\\src\\services\\Auth.js",[],"D:\\w3bizz\\React\\src\\component\\lottieIcons\\LottieIco.js",["266"],"import Lottie from 'react-lottie'\r\n\r\n const LottieIcon = (props) => {\r\n    const defaultOptions = {\r\n        loop: false,\r\n        autoplay: false, \r\n        animationData: props.animationData,\r\n        rendererSettings: {\r\n          preserveAspectRatio: 'xMidYMid slice'\r\n        }\r\n    };\r\n\r\n    const defaultRunningOptions = {\r\n        loop: true,\r\n        autoplay: true, \r\n        animationData: props.animationData,\r\n        rendererSettings: {\r\n          preserveAspectRatio: 'xMidYMid slice'\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <Lottie\r\n            options={props.type==\"Running\" ? defaultRunningOptions : defaultOptions}\r\n            height={props.height?props.height:30}\r\n            width={props.width?props.width:30}\r\n            style={props.style?props.style:{ margin: \"0 0 0 0\" }}\r\n            isStopped={props.stop}\r\n            isPaused={props.pause} />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default LottieIcon","D:\\w3bizz\\React\\src\\services\\apiFunction.js",["267"],"import axios from 'axios';\r\n\r\nexport function postLogin(fields) {\r\n    return new Promise((resolve, reject) => {\r\n        axios.post(\"https://w3bizz.com/template/login.php\", fields)\r\n            .then((res) => resolve(res))\r\n            .catch((err) => reject(err))\r\n    })\r\n}\r\n\r\nexport function addPage(fields, username) {\r\n    return new Promise((resolve, reject) => {\r\n        axios.post(\"https://w3bizz.com/template/classes/addPage.php\", fields)\r\n            .then((res) => resolve(res.data))\r\n            .catch((err) => reject(err))\r\n    })\r\n}\r\n\r\nexport function uploadImage(data) {\r\n    let formData = new FormData()\r\n    formData.append(\"upload_preset\", \"w3bizz_serdxz\")\r\n    formData.append(\"file\", data)\r\n    return new Promise((resolve, reject) => {\r\n        axios.post(\"https://api.cloudinary.com/v1_1/w3bizz-com/image/upload\", formData)\r\n            .then((res) => resolve(res))\r\n            .catch((err) => reject(err))\r\n    })\r\n}\r\n\r\nexport function mergeTemplate(fields, username) {\r\n    return new Promise((resolve, reject) => {\r\n        axios.post(\"https://w3bizz.com/template/classes/mergeTemplate.php\", fields)\r\n            .then((res) => resolve(res.data))\r\n            .catch((err) => reject(err))\r\n    })\r\n}\r\n\r\nexport function mergePage(fields, username) {\r\n    return new Promise((resolve, reject) => {\r\n        axios.post(\"https://w3bizz.com/template/classes/mergePage.php\", fields)\r\n            .then((res) => resolve(res.data))\r\n            .catch((err) => reject(err))\r\n    })\r\n}\r\n\r\nexport function publishTemplate(fields, username) {\r\n    return new Promise((resolve, reject) => {\r\n        axios.post(\"https://w3bizz.com/template/classes/publish.php\", fields)\r\n            .then((res) => resolve(res.data))\r\n            .catch((err) => reject(err))\r\n    })\r\n}\r\n\r\nexport function addTemplate(fields, username) {\r\n    return new Promise((resolve, reject) => {\r\n        axios.post(\"https://w3bizz.com/template/classes/addTemplate.php\", fields)\r\n            .then((res) => resolve(res.data))\r\n            .catch((err) => reject(err))\r\n    })\r\n}\r\n\r\nexport function sendEmailOTP(fields, username) {\r\n    return new Promise((resolve, reject) => {\r\n        axios.post(\"https://w3bizz.com/template/classes/sendemailotp.php\", fields)\r\n            .then((res) => resolve(res.data))\r\n            .catch((err) => reject(err))\r\n    })\r\n}\r\n\r\nexport function sendVerifyOTP(fields, username) {\r\n    return new Promise((resolve, reject) => {\r\n        axios.post(\"https://w3bizz.com/template/classes/verifyotp.php\", fields)\r\n            .then((res) => resolve(res.data))\r\n            .catch((err) => reject(err))\r\n    })\r\n}\r\n\r\nexport function updateTemplate(fields) {\r\n    return new Promise((resolve, reject) => {\r\n        axios.post(\"https://w3bizz.com/template/classes/updateTemplate.php\", fields)\r\n            .then((res) => resolve(res.data))\r\n            .catch((err) => reject(err))\r\n    })\r\n}\r\n\r\nexport function addSlots(fields) {\r\n    return new Promise((resolve, reject) => {\r\n        axios.post(\"https://w3bizz.com/template/classes/addSlot.php\", fields)\r\n            .then((res) => resolve(res.data))\r\n            .catch((err) => reject(err))\r\n    })\r\n}\r\n\r\nexport function payMoney(fields) {\r\n    return new Promise((resolve, reject) => {\r\n        axios.post(\"https://w3bizz.com/template/classes/getIntent.php\", fields)\r\n            .then((res) => resolve(res.data))\r\n            .catch((err) => reject(err))\r\n    })\r\n}\r\n\r\nexport function addTransaction(fields) {\r\n    return new Promise((resolve, reject) => {\r\n        axios.post(\"https://w3bizz.com/template/classes/addTransaction.php\", fields)\r\n            .then((res) => resolve(res.data))\r\n            .catch((err) => reject(err))\r\n    })\r\n}\r\n\r\nexport function updateTransaction(fields) {\r\n    return new Promise((resolve, reject) => {\r\n        axios.post(\"https://w3bizz.com/template/classes/updateTransaction.php\", fields)\r\n            .then((res) => resolve(res.data))\r\n            .catch((err) => reject(err))\r\n    })\r\n}\r\n\r\nexport function updateSlots(fields) {\r\n    return new Promise((resolve, reject) => {\r\n        axios.post(\"https://w3bizz.com/template/classes/updateSlot.php\", fields)\r\n            .then((res) => resolve(res.data))\r\n            .catch((err) => reject(err))\r\n    })\r\n}\r\n\r\nexport function deleteSlots(fields) {\r\n    return new Promise((resolve, reject) => {\r\n        axios.post(\"https://w3bizz.com/template/classes/deleteSlot.php\", fields)\r\n            .then((res) => resolve(res.data))\r\n            .catch((err) => reject(err))\r\n    })\r\n}\r\n\r\nexport function deleteTransaction(fields) {\r\n    return new Promise((resolve, reject) => {\r\n        axios.post(\"https://w3bizz.com/template/classes/deleteTransaction.php\", fields)\r\n            .then((res) => resolve(res.data))\r\n            .catch((err) => reject(err))\r\n    })\r\n}\r\n\r\nexport function getTemplate(username) {\r\n    return new Promise((resolve, reject) => {\r\n        axios.get(`https://w3bizz.com/template/classes/getTemplate.php?username=${username}`)\r\n            .then((res) => resolve(res.data))\r\n            .catch((err) => reject(err))\r\n    })\r\n}\r\n\r\nexport function getTransaction(username) {\r\n    return new Promise((resolve, reject) => {\r\n        axios.get(`https://w3bizz.com/template/classes/getTransaction.php?username=${username}`)\r\n            .then((res) => resolve(res.data))\r\n            .catch((err) => reject(err))\r\n    })\r\n}\r\n\r\nexport function getSlots(username) {\r\n    return new Promise((resolve, reject) => {\r\n        axios.get(`https://w3bizz.com/template/classes/getSlot.php?username=${username}`)\r\n            .then((res) => resolve(res.data))\r\n            .catch((err) => reject(err))\r\n    })\r\n}\r\n\r\nexport function registerApi(data) {\r\n    return new Promise((resolve, reject) => {\r\n        axios.post('https://w3bizz.com/template/register.php', data)\r\n            .then((res) => resolve(res))\r\n            .catch((err) => reject(err))\r\n    })\r\n}\r\n\r\nexport function patchApi(data, id) {\r\n    return new Promise((resolve, reject) => {\r\n        if (id != undefined) {\r\n            data.username = id\r\n        }\r\n        axios.post(\"https://w3bizz.com/template/classes/updateUser.php\", data)\r\n            .then((res) => resolve(res.data))\r\n            .catch((err) => reject(err))\r\n    })\r\n}\r\n\r\nexport function updateHide(value) {\r\n    return new Promise((resolve, reject) => {\r\n        axios.post(\"https://w3bizz.com/template/classes/updateTemplate.php\", value)\r\n            .then((res) => resolve(res.data))\r\n            .catch((err) => reject(err))\r\n    })\r\n}\r\n\r\nexport function updateHidePage(value) {\r\n    return new Promise((resolve, reject) => {\r\n        axios.post(\"https://w3bizz.com/template/classes/updatePage.php\", value)\r\n            .then((res) => resolve(res.data))\r\n            .catch((err) => reject(err))\r\n    })\r\n}\r\n","D:\\w3bizz\\React\\src\\services\\headerServices.js",[],"D:\\w3bizz\\React\\src\\services\\localStorage.js",[],"D:\\w3bizz\\React\\src\\component\\cardComponent\\TemplateCard.js",["268","269","270","271","272","273","274","275","276","277","278","279","280","281","282","283","284","285","286","287","288","289","290","291"],"import React, { useState, useEffect } from 'react'\r\nimport { Tooltip, Card, CardContent, makeStyles } from '@material-ui/core';\r\nimport { addSlots, getSlots, mergeTemplate, publishTemplate, updateHide, updateSlots } from '../../services/apiFunction';\r\nimport { toast } from 'react-toastify';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../../redux/actions/GetBlogByIdActions'\r\nimport LottieIcon from '../lottieIcons/LottieIco';\r\nimport animationDataCopy from '../lottieIcons/copy.json'\r\nimport editAnimationData from '../lottieIcons/edit.json'\r\nimport MenuIcon from '../lottieIcons/menuV2.json'\r\nimport loadingAnimationData from '../lottieIcons/LottieIco'\r\nimport '../../asset/Template.css'\r\nimport { VisibilityOff as VisibilityOffIcon, Visibility as VisibilityIcon } from '@material-ui/icons';\r\nimport { useHistory } from 'react-router';\r\nimport AvailableSlot from '../modal/AvailableSlot';\r\nimport ModalPage from '../modal/Template'\r\nimport moment from 'moment';\r\n\r\nconst TemplateCard = (props) => {\r\n    const history = useHistory()\r\n    const [slot, setSlot] = useState('')\r\n    const [loader, setLoader] = useState(false)\r\n    const [slotDetails, setSlotDetails] = useState([])\r\n    const [expiredSlots, setExpiredSlots] = useState([])\r\n    const [templateID, setTemplateID] = useState('')\r\n    const [editDetails, setEditDetails] = useState([])\r\n    const [showModal, setShowModal] = useState(false)\r\n    const [editShowModal, setEditShowModal] = useState(false)\r\n    const [fileSrc, setFileSrc] = useState('')\r\n    const [isPaused, setIsPaused] = useState(true)\r\n    const [isStopped, setIsStopped] = useState(true)\r\n\r\n    const handleView = (event, value) => {\r\n        let type = value.type == \"DEFAULT\" ? \"DEFAULT\" : \"USER\"\r\n        history.push({ pathname: 'webTemplate', state: { template: value, type: type } })\r\n    }\r\n\r\n    const toggle = () => {\r\n        setShowModal(!showModal);\r\n    }\r\n\r\n    const editToggle = () => {\r\n        setEditShowModal(!editShowModal)\r\n    }\r\n\r\n    const toggleLoader = () => {\r\n        setLoader(!loader)\r\n    }\r\n\r\n    const publishTemplateFunc = async (e, value) => {\r\n        setTemplateID(value.id)\r\n        const response = await getSlots(props.user.username)\r\n        let date = moment().format('YYYY-MM-DD')\r\n        if (response.STATUS) {\r\n            let list = []\r\n            let expiredList = []\r\n            response.DATA.map((val) => {\r\n                if ((date <= val.expiry_date) || val.published == \"FALSE\") {\r\n                    val.isInput = false\r\n                    val.isExpired = false\r\n                    list.push(val)\r\n                } else {\r\n                    expiredList.push(val)\r\n                }\r\n            })\r\n            list = list.length > 0 ? list : response.DATA\r\n            setSlotDetails(list)\r\n            setExpiredSlots(expiredList)\r\n        }\r\n        setShowModal(true)\r\n    }\r\n\r\n\r\n    const classes = makeStyles({\r\n        root: {\r\n            minWidth: 275,\r\n        },\r\n        bullet: {\r\n            display: 'inline-block',\r\n            margin: '0 2px',\r\n            transform: 'scale(0.8)',\r\n        },\r\n        title: {\r\n            fontSize: 14,\r\n        },\r\n        pos: {\r\n            marginBottom: 12,\r\n        },\r\n    });\r\n\r\n    const handleHide = async (value) => {\r\n        let obj = {}\r\n        obj.username = value.username\r\n        obj.id = value.id\r\n        obj.is_hidden = (value.is_hidden === \"FALSE\" ? \"TRUE\" : \"FALSE\")\r\n        const response = await updateHide(obj)\r\n        if (response.STATUS == \"SUCCESS\") {\r\n            var list = []\r\n            props.userTemplate.forEach((el) => {\r\n                if (el.id == value.id) {\r\n                    el.is_hidden = obj.is_hidden\r\n                    list.push(el)\r\n                }\r\n                else {\r\n                    list.push(el)\r\n                }\r\n            })\r\n            if (props.user.type == \"ADMIN\") {\r\n                props.adminTemplate(list)\r\n            } else {\r\n                props.template(list)\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleEdit = (e, value) => {\r\n        setEditDetails(value)\r\n        setFileSrc(value.image)\r\n        setEditShowModal(true)\r\n        e.preventDefault()\r\n    }\r\n\r\n    const handleMergeTemplate = async (event, value) => {\r\n        let obj = {}\r\n        obj.username = props.user.username\r\n        obj.id = value.id\r\n        const response = await mergeTemplate(obj)\r\n        if (response.STATUS == \"SUCCESS\") {\r\n            toast.success(response.MESSAGE)\r\n        } else {\r\n            toast.error(response.MESSAGE)\r\n        }\r\n        event.preventDefault()\r\n    }\r\n\r\n    return loader ?\r\n        (<>\r\n            <LottieIcon animationData={loadingAnimationData} type=\"Running\" pause={isPaused} height={50} width={50} />\r\n        </>)\r\n        :\r\n        (\r\n            <>\r\n                <div className=\"container-fluid\">\r\n                    <div className=\"row\">\r\n                        {props.userTemplate.length > 0 &&\r\n                            props.userTemplate.map(value =>\r\n                                <div className=\"col-sm-4 col-xs-4\">\r\n                                    <Card className={classes.root} variant=\"outlined\" style={{ boxShadow: \"0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19)\" }}>\r\n                                        <img src={value.image ? value.image : \"https://res.cloudinary.com/w3bizz-com/image/upload/c_scale,w_425/v1632246929/1_qccloi.png\"} style={{ height: \"15em\", width: \"100%\" }} />\r\n                                        <br />\r\n                                        <CardContent>\r\n                                            <span>\r\n                                                <h4 style={{ display: \"inline\" }}>{value.title}</h4>\r\n                                                <br />\r\n                                                <br />\r\n                                                <div style={{ display: \"flex\" }}>\r\n                                                    {props.Publish == true &&\r\n                                                        <Tooltip title=\"Publish Web Template\">\r\n                                                            <span style={{ float: \"right\" }}>\r\n                                                                <button className=\"btn btn-info\" onClick={(e) => { publishTemplateFunc(e, value) }}>Publish Now</button>\r\n                                                            </span>\r\n                                                        </Tooltip>\r\n                                                    }\r\n                                                    {props.UseNow == true &&\r\n                                                        <Tooltip title=\"Use Now\">\r\n                                                            <span onClick={(e) => { handleMergeTemplate(e, value) }}>\r\n                                                                <button className=\"btn btn-info\">Use Now</button>\r\n                                                            </span>\r\n                                                        </Tooltip>\r\n                                                    }\r\n                                                    {props.ShowHide == true &&\r\n                                                        <span onClick={() => { handleHide(value) }}>\r\n                                                            {value.is_hidden == \"TRUE\" ? <Tooltip title=\"Show\"><VisibilityOffIcon /></Tooltip> : <Tooltip title=\"Hide\"><VisibilityIcon /></Tooltip>}\r\n                                                        </span>\r\n                                                    }\r\n                                                    {props.ViewPages == true &&\r\n                                                        <Tooltip title=\"View Pages\">\r\n                                                            <span onClick={(event) => handleView(event, value)}>\r\n                                                                <LottieIcon animationData={MenuIcon} pause={isPaused} stop={isStopped} />\r\n                                                            </span>\r\n                                                        </Tooltip>\r\n                                                    }\r\n                                                    {props.EditTemplate == true &&\r\n                                                        <Tooltip title=\"Edit Template Details\">\r\n                                                            <span onClick={(event) => handleEdit(event, value)}>\r\n                                                                <LottieIcon animationData={editAnimationData} pause={isPaused} stop={isStopped} />\r\n                                                            </span>\r\n                                                        </Tooltip>\r\n                                                    }\r\n                                                    {props.CopyTemplate == true &&\r\n                                                        <Tooltip title=\"Copy Template\">\r\n                                                            <span style={{ color: \"#1DABB8\" }} onClick={(e) => { handleMergeTemplate(e, value) }}>\r\n                                                                <LottieIcon animationData={animationDataCopy} pause={isPaused} stop={isStopped} />\r\n                                                            </span>\r\n                                                        </Tooltip>\r\n                                                    }\r\n                                                </div>\r\n                                            </span>\r\n                                        </CardContent>\r\n                                    </Card>\r\n                                    <br />\r\n                                </div>\r\n                            )}\r\n                    </div>\r\n                </div>\r\n                {slotDetails.length > 0 &&\r\n                    <AvailableSlot modal={showModal} title={\"Available Slots\"} toggle={toggle} slotDetails={slotDetails} templateID={templateID} expiredSlots={expiredSlots} />\r\n                }\r\n                {editShowModal &&\r\n                    <ModalPage modal={editShowModal} loader={toggleLoader} toggle={editToggle} title={editDetails.length > 0 ? \"Edit Template\" : \"Create Template\"} add={editDetails.length > 0 ? false : true} data={editDetails} />\r\n                }\r\n            </>\r\n        )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        user: state.login.data,\r\n        published: state.getBlogById.published\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        adminTemplate: (data) => dispatch(actions.getAdminBlogIdSuccess(data)),\r\n        template: (data) => dispatch(actions.getBlogIdSuccess(data))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TemplateCard)","D:\\w3bizz\\React\\src\\component\\modal\\AvailableSlot.js",["292","293","294","295","296","297","298","299"],"import React, { Component } from 'react';\r\nimport { MDBContainer, MDBModal, MDBModalBody, MDBModalHeader, MDBModalFooter } from 'mdbreact';\r\nimport { connect } from 'react-redux'\r\nimport * as actions from '../../redux/actions/GetBlogByIdActions'\r\nimport { toast } from 'react-toastify';\r\nimport '../../asset/Template.css'\r\nimport { updateSlots, publishTemplate } from '../../services/apiFunction';\r\nimport moment from 'moment';\r\nimport { Edit as EditIcon, Check as CheckIcon, Clear as ClearIcon } from '@material-ui/icons'\r\nimport SlotModal from '../modal/SlotModal'\r\nimport {withRouter} from 'react-router-dom'\r\n\r\nclass AvailableSlot extends Component {\r\n\r\n    state = {\r\n        slotDetails: this.props.slotDetails ? this.props.slotDetails : [],\r\n        slot: '',\r\n        loader: false,\r\n        publish_name: '',\r\n        showModalPayDetails: false\r\n    }\r\n\r\n\r\n    onCancel = (e, value, index) => {\r\n        e.preventDefault()\r\n        let slotDetails = [...this.state.slotDetails]\r\n        let slotDetail = { ...slotDetails[index] }\r\n        slotDetail.isInput = false\r\n        slotDetails[index] = slotDetail\r\n        this.setState({ slotDetails })\r\n        this.setState({ publish_name: \" \" })\r\n    }\r\n\r\n    AddSlotsModal = async (e, value) => {\r\n        console.log(this.state.slotDetails)\r\n        e.preventDefault()\r\n        this.props.toggle()\r\n        this.setState({ showModalPayDetails: true })\r\n    }\r\n\r\n    toggleLoader = () => {\r\n        this.setState({ loader: !this.state.loader })\r\n    }\r\n\r\n    togglePay = () => {\r\n        this.setState({\r\n            showModalPayDetails: !this.state.showModalPayDetails\r\n        })\r\n    }\r\n\r\n    editText(e, value, index) {\r\n        e.preventDefault()\r\n        let slotDetails = [...this.state.slotDetails]\r\n        let slotDetail = { ...slotDetails[index] }\r\n        slotDetail.isInput = true\r\n        slotDetails[index] = slotDetail\r\n        this.setState({ slotDetails })\r\n        this.setState({ publish_name: value.publish_name })\r\n    }\r\n\r\n    publishTemplate = async () => {\r\n        if (this.state.slot) {\r\n            this.setState({ loader: true })\r\n            let obj = {}\r\n            obj.username = this.props.user.username\r\n            obj.template_id = this.props.templateID\r\n            obj.slot_id = this.state.slot\r\n            const response = await publishTemplate(obj)\r\n            if (response.STATUS == \"SUCCESS\") {\r\n                toast.success(\"Template Published Successfully\")\r\n                let slotUpdate = this.state.slotDetails.find(val => val.slot_id == this.state.slot)\r\n                if (slotUpdate.published == \"FALSE\") {\r\n                    slotUpdate.publish_date = moment().format(\"YYYY-MM-DD\")\r\n                    slotUpdate.expiry_date = moment(moment(slotUpdate.publish_date).add(1, 'y')).format(\"YYYY-MM-DD\")\r\n                    slotUpdate.published = \"TRUE\"\r\n                    const responseUpdate = await updateSlots(slotUpdate)\r\n                    console.log(responseUpdate)\r\n                }\r\n                this.setState({ loader: false })\r\n                this.setState({ showModalSlotsDetail: false })\r\n            }\r\n            else {\r\n                toast.error(\"Template Not Published\")\r\n                this.setState({ loader: false })\r\n            }\r\n        }\r\n        else {\r\n            toast.error(\"Please Select Slot\")\r\n        }\r\n    }\r\n\r\n    onUpdate = async (e, value) => {\r\n        e.preventDefault()\r\n        if (this.state.publish_name != '') {\r\n            let obj = {}\r\n            obj.username = this.props.user.username\r\n            obj.slot_id = value.slot_id\r\n            obj.publish_name = this.state.publish_name\r\n            const response = await updateSlots(obj)\r\n            if (response.STATUS) {\r\n                var list = []\r\n                this.props.slotDetails.forEach((val) => {\r\n                    if (val.slot_id == value.slot_id) {\r\n                        val.publish_name = this.state.publish_name\r\n                        val.isInput = false\r\n                        list.push(val)\r\n                    }\r\n                    else {\r\n                        list.push(val)\r\n                    }\r\n                })\r\n                toast.success(\"Publish Name Updated Successfully\")\r\n                this.setState({slotDetails:list})\r\n                this.setState({ publish_name: '' })\r\n            }\r\n        } else {\r\n            toast.error(\"Please Enter Some Value\")\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        console.log(this.state.slotDetails)\r\n        return (\r\n            <>\r\n                <MDBContainer>\r\n                    <MDBModal centered isOpen={this.props.modal} toggle={this.props.toggle}>\r\n                        <MDBModalHeader toggle={this.props.toggle}>{this.props.title}</MDBModalHeader>\r\n                        <MDBModalBody>\r\n                            {this.state.slotDetails.length > 0 ?\r\n                                <>\r\n                                    <table>\r\n                                        {this.state.slotDetails.map((value, index) => (\r\n                                            <tbody>\r\n                                                <tr>\r\n                                                    <td><input type=\"radio\" name=\"slotDetails\" value={value.slot_id} checked={value.isChecked} onChange={(e) => { this.setState({ slot: e.target.value }) }} /></td>\r\n                                                    <td>\r\n                                                        {!value.isInput && value.isExpired == false &&\r\n                                                            <>\r\n                                                                <span>{value.publish_name}<span style={{ fontWeight: 'bold' }}>.w3bizz.com</span></span>\r\n                                                                &nbsp;&nbsp;\r\n                                                                <EditIcon fontSize=\"small\" onClick={(e) => { this.editText(e, value, index) }} />\r\n                                                            </>\r\n                                                        }\r\n                                                        {value.isInput && value.isExpired == false &&\r\n                                                            <>\r\n                                                                <input type=\"text\" value={this.state.publish_name} onChange={(e) => this.setState({ publish_name: e.target.value })} /><span style={{ fontWeight: 'bold' }}>.w3bizz.com</span>\r\n                                                                &nbsp;&nbsp;\r\n                                                                <CheckIcon onClick={(e) => { this.onUpdate(e, value) }} />\r\n                                                                <ClearIcon onClick={(e) => this.onCancel(e, value, index)} />\r\n                                                            </>\r\n                                                        }\r\n                                                    </td>\r\n                                                </tr>\r\n                                            </tbody>\r\n                                        ))}\r\n                                    </table>\r\n                                </>\r\n                                :\r\n                                (\r\n                                    <>\r\n                                        {this.props.user.trial_used == \"\" &&\r\n                                        <div>7 Days Free Trial Only. Please Book A Slot</div>\r\n                                        }\r\n                                        {this.props.expiredSlots.length > 0 &&\r\n                                        <div><button className=\"btn btn-info\" onClick={()=>this.props.history.push('/profileUpdate')}>Renew Slots</button></div>\r\n                                        }\r\n                                    </>\r\n                                )\r\n                            }\r\n                        </MDBModalBody>\r\n                        <MDBModalFooter>\r\n                            <div className=\"w-100\">\r\n                            {this.state.slotDetails.length > 0 &&\r\n                                <button className=\"btn btn-info w-100\" onClick={(e) => this.publishTemplate(e)}>Publish Now</button>\r\n                            }\r\n                            <br />\r\n                                <br />\r\n                                <button className=\"btn btn-info w-100\" onClick={(e) => this.AddSlotsModal(e)}>Add More Slots</button>\r\n                            </div>\r\n                        </MDBModalFooter>\r\n                    </MDBModal>\r\n                </MDBContainer>\r\n                <SlotModal modal={this.state.showModalPayDetails} toggle={this.togglePay} loader={this.toggleLoader} slotDetails={this.state.slotDetails} title={\"Buy More Slots\"} expiredSlots={this.props.expiredSlots}/>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n\r\n    return {\r\n        user: state.login.data,\r\n        blog: state.getBlogById.allBlog,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        fetchIdBlog: (data) => dispatch(actions.fetchIdTemplate(data)),\r\n        createBlog: (data) => dispatch(actions.getBlogIdSuccess(data))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(AvailableSlot))\r\n\r\n","D:\\w3bizz\\React\\src\\component\\cardComponent\\PageCard.js",["300","301","302","303","304","305","306","307","308","309","310","311","312","313"],"import React, { useState, useEffect } from 'react'\r\nimport { Tooltip, Card, CardContent, makeStyles } from '@material-ui/core';\r\nimport { getTemplate, updateHidePage } from '../../services/apiFunction';\r\nimport { toast } from 'react-toastify';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../../redux/actions/GetBlogByIdActions'\r\nimport '../../asset/Template.css'\r\nimport { useHistory } from 'react-router';\r\nimport loadingAnimationData from '../lottieIcons/LottieIco'\r\nimport LottieIcon from '../lottieIcons/LottieIco';\r\nimport PageModal from '../modal/Page'\r\nimport {\r\n    Edit as EditIcon,\r\n    Slideshow as SlideshowIcon,\r\n    Visibility as VisibilityIcon,\r\n    VisibilityOff as VisibilityOffIcon,\r\n    SettingsApplications as SettingsApplicationsIcon,\r\n} from '@material-ui/icons';\r\n\r\n\r\nconst PageCard = (props) => {\r\n    const history = useHistory()\r\n    const [loader, setLoader] = useState(false)\r\n    const [editDetails, setEditDetails] = useState([])\r\n    const [showModal, setShowModal] = useState(false)\r\n    const [isPaused, setIsPaused] = useState(false)\r\n    \r\n    const handleView = (event, value) => {\r\n        window.open(`http://localhost:8080?${value.page_id}`)\r\n    }\r\n\r\n    const handleHide = async (value) => {\r\n        let obj = {}\r\n        obj.id = value.page_id\r\n        obj.is_hidden = (value.is_hidden === \"FALSE\" ? \"TRUE\" : \"FALSE\")\r\n        const response = await updateHidePage(obj)\r\n        if (response.STATUS == \"SUCCESS\") {\r\n            let list = []\r\n            let response = await getTemplate(props.user.username)\r\n            if (props.user.type == \"ADMIN\") {\r\n                props.adminTemplate(response.DEFAULT_TEMPLATE)\r\n            }\r\n            else {\r\n                props.template(response.USER_TEMPLATE)\r\n            }\r\n        }\r\n    }\r\n\r\n    const toggle = () => {\r\n        setShowModal(!showModal)\r\n    }\r\n\r\n    const handleEdit = (e, value) => {\r\n        toggle()\r\n        setEditDetails(value)\r\n        e.preventDefault()\r\n    }\r\n\r\n    const preView = async (e, link) => {\r\n        if (link != '') {\r\n            window.open(link, \"_blank\")\r\n        }\r\n        else {\r\n            toast.error(\"No Preview is Present\")\r\n        }\r\n    }\r\n\r\n    const toggleLoader = () => {\r\n        setLoader(!loader)\r\n    }\r\n\r\n    const classes = makeStyles({\r\n        root: {\r\n            minWidth: 275,\r\n        },\r\n        bullet: {\r\n            display: 'inline-block',\r\n            margin: '0 2px',\r\n            transform: 'scale(0.8)',\r\n        },\r\n        title: {\r\n            fontSize: 14,\r\n        },\r\n        pos: {\r\n            marginBottom: 12,\r\n        },\r\n    });\r\n\r\n\r\n    console.log(props.page)\r\n    return loader ? \r\n    (\r\n        <>\r\n        <LottieIcon animationData={loadingAnimationData} type=\"Running\"  height={50} width={50}/>\r\n        </>\r\n    ):(\r\n        <>\r\n            <div className=\"container-fluid\">\r\n                <div className=\"row\">\r\n                    {props.page.map(value =>\r\n                        <div className=\"col-sm-4 col-xs-4\">\r\n                            <Card className={classes.root} variant=\"outlined\" style={{ boxShadow: \"0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19)\" }}>\r\n                                <img src={value.image ? value.image : \"https://res.cloudinary.com/w3bizz-com/image/upload/c_scale,w_425/v1632246930/2_hjs08o.png\"} style={{ height: \"15em\", width: \"100%\" }} />\r\n                                <br />\r\n                                <CardContent>\r\n                                    <span >\r\n                                        <h4 style={{ display: \"inline\" }}>{value.page_title}</h4>\r\n                                        <br />\r\n                                        <br />\r\n                                        <span style={{ display: \"flex\" }}>\r\n                                            {props.Preview == true &&\r\n                                                <Tooltip title=\"Preview of Page\"><SlideshowIcon onClick={(e) => { preView(e, value.preview_link) }} /></Tooltip>\r\n                                            }\r\n                                            {props.EditCode == true &&\r\n                                                <Tooltip title=\"Edit Page\"><EditIcon onClick={(event) => handleView(event, value)} /></Tooltip>\r\n                                            }\r\n                                            {props.ShowHide == true &&\r\n                                                <span onClick={() => { handleHide(value) }}>\r\n                                                    {value.is_hidden == \"TRUE\" ? <Tooltip title=\"SHOW\"><VisibilityOffIcon /></Tooltip> : <Tooltip title=\"HIDE\"><VisibilityIcon /></Tooltip>}\r\n                                                </span>\r\n                                            }\r\n                                            {props.EditPage == true &&\r\n                                                <Tooltip title=\"Edit Page Details\"><SettingsApplicationsIcon onClick={(event) => handleEdit(event, value)} /></Tooltip>\r\n                                            }\r\n                                        </span>\r\n                                    </span>\r\n                                </CardContent>\r\n                            </Card>\r\n                            <br />\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            </div>\r\n            <PageModal modal={showModal} loader={toggleLoader} toggle={toggle} title={\"Edit Page\"} Add={false} editData={editDetails} type={props.type}/>\r\n        </>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        user: state.login.data,\r\n        template: state.getBlogById.allBlog,\r\n        published: state.getBlogById.published,\r\n        adminTemplate: state.getBlogById.allAdminBlog\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        template: (data) => dispatch(actions.getBlogIdSuccess(data)),\r\n        adminTemplate: (data) => dispatch(actions.getAdminBlogIdSuccess(data)),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PageCard)","D:\\w3bizz\\React\\src\\component\\template\\UserTemplate.js",["314","315"],"import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { getBlogIdSuccess, defaultPagesSuccess } from '../../redux/actions/GetBlogByIdActions'\nimport UserTemplateById from './UserTemplateById';\nimport { ToastContainer } from 'react-toastify';\nimport AdminLayout from '../AdminLayout';\nimport { getTemplate } from '../../services/apiFunction';\nimport ModalPage from '../modal/Template'\nimport LottieIcon from '../lottieIcons/LottieIco';\nimport loadingAnimationData from '../lottieIcons/loadingV2.json'\n\nclass UserTemplate extends Component {\n    state = {\n        showModal: false,\n        loader: true,\n        file: '',\n        string: window.location.pathname.split(\"/\")[1],\n    }\n\n    async componentDidMount() {\n        const response = await getTemplate(this.props.user.username)\n        if (response.STATUS == \"SUCCESS\") {\n            this.props.createBlog(response.USER_TEMPLATE)\n            this.props.defaultPages(response.DEFAULT_PAGES)\n            this.setState({ loader: false })\n        }\n\n    }\n\n    toggleLoader = () => {\n        this.setState({loader:!this.state.loader})\n    }\n\n    toggle = () => {\n        this.setState({\n            showModal: !this.state.showModal,\n        });\n    }\n\n    render() {\n        const { loader, file } = this.state\n        return loader ?\n            (\n                <div style={{ display: 'flex', justifyContent: 'center', marginTop:'20%' }}>\n                    <LottieIcon animationData={loadingAnimationData} type=\"Running\" height={50} width={50}/>\n                </div>\n            ) :\n            (\n                <>\n                    <AdminLayout title=\"All Templates\">\n                        <div style={{ boxSizing: \"border-box\", width: \"100%\", height: \"4em\" }}>\n                            <button style={{ float: \"right\", borderRadius: \"6px\", backgroundColor: \"#1DABB8\" }} className=\"btn text-white\" onClick={() => this.setState({ showModal: true })}>Create Template</button>\n                        </div>\n                        <br />\n                        <UserTemplateById />\n                        <ModalPage modal={this.state.showModal} loader={this.toggleLoader} toggle={this.toggle} title={\"Create Template\"} Add={true} data={\"\"} />\n                    </AdminLayout>\n                    <ToastContainer />\n                </>\n            );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        user: state.login && state.login.data\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        createBlog: (data) => dispatch(getBlogIdSuccess(data)),\n        defaultPages: (data) => dispatch(defaultPagesSuccess(data))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserTemplate);\n","D:\\w3bizz\\React\\src\\component\\template\\AdminTemplate.js",["316","317","318","319","320"],"import React, { Component } from 'react';\nimport Modal from 'react-modal'\nimport { connect } from 'react-redux';\nimport { getAdminBlogIdSuccess, defaultPagesSuccess } from '../../redux/actions/GetBlogByIdActions'\nimport AdminLayout from '../AdminLayout';\nimport { getTemplate } from '../../services/apiFunction';\nimport AdminTemplateById from './AdminTemplateById';\nimport LottieIcon from '../lottieIcons/LottieIco';\nimport loadingAnimationData from '../lottieIcons/loadingV2.json'\nimport ModalPage from '../modal/Template'\nimport PageModal from '../modal/Page'\n\nclass AdminTemplate extends Component {\n    state = {\n        showModal: false,\n        loader: true,\n        isPaused: true,\n        isStopped: true,\n        showPageModal: false,\n    }\n\n\n    async componentDidMount() {\n        const response = await getTemplate(this.props.user.username)\n        if (response.STATUS == \"SUCCESS\") {\n            let list = []\n            if (response.DEFAULT_TEMPLATE && response.DEFAULT_TEMPLATE.length > 0) {\n                response.DEFAULT_TEMPLATE.map((val) => {\n                    if (val.is_hidden == \"FALSE\") {\n                        list.push(val)\n                    }\n                })\n            }\n            if (this.props.user.type == \"ADMIN\") {\n                this.props.AdminTemplate(response.DEFAULT_TEMPLATE)\n            }else{\n                this.props.AdminTemplate(list)\n            }\n            this.setState({ loader: false })\n        }\n\n    }\n\n    toggleLoader = () => {\n        this.setState({ loader: !this.state.loader })\n    }\n\n    toggle = () => {\n        this.setState({\n            showModal: !this.state.showModal,\n        });\n    }\n\n    togglePage = () => {\n        this.setState({\n            showPageModal: !this.state.showPageModal,\n        });\n    }\n\n    render() {\n        Modal.setAppElement('*')\n        const { user } = this.props;\n        const { loader } = this.state\n        return loader ?\n            (\n                <>\n                    <div style={{ display: 'flex', justifyContent: 'center', paddingTop: \"20%\" }}>\n                        <LottieIcon Play={true} animationData={loadingAnimationData} type=\"Running\" height={50} width={50} />\n                    </div>\n                </>\n            ) :\n            (\n                <>\n                    <AdminLayout title=\"Default Templates\">\n                        <div style={{ boxSizing: \"border-box\", width: \"100%\", height: \"4em\" }}>\n                            {user.type == \"ADMIN\" &&\n                                <>\n                                    <button style={{ float: \"right\", borderRadius: \"6px\", backgroundColor: \"#1DABB8\", marginLeft: \"10px\" }} className=\"btn text-white\" onClick={() => this.setState({ showModal: true })}>Create Template</button>\n                                </>\n                            }\n                        </div>\n                        <br />\n                        <AdminTemplateById />\n                        <ModalPage modal={this.state.showModal} loader={this.toggleLoader} toggle={this.toggle} title={\"Create Template\"} add={true} data={\"\"} type={\"DEFAULT\"} />\n                        <PageModal modal={this.state.showPageModal} loader={this.toggleLoader} toggle={this.togglePage} title={\"Add Default Page\"} add={true} editData={\"\"} type={\"DEFAULT\"} />\n                    </AdminLayout>\n                </>\n            );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        user: state.login && state.login.data,\n        defaultPages: state.getBlogById && state.getBlogById.defaultPages\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        AdminTemplate: (data) => dispatch(getAdminBlogIdSuccess(data)),\n        defaultPages: (data) => dispatch(defaultPagesSuccess(data))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AdminTemplate);\n","D:\\w3bizz\\React\\src\\component\\template\\AdminTemplateById.js",["321","322"],"import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport * as actions from '../../redux/actions/GetBlogByIdActions'\nimport { withRouter } from 'react-router-dom'\nimport TemplateCard from '../cardComponent/TemplateCard';\n\nclass AdminTemplateById extends Component {\n    state = {\n        loader: false\n    }\n\n    render() {\n        const { user, adminTemplate } = this.props\n        return (\n            <>\n                <div className=\"container-fluid\">\n                    <div className=\"row\">\n                        {adminTemplate.length > 0 &&\n                            <>\n                                {user.type == \"ADMIN\" &&\n                                    <TemplateCard ViewPages={true} EditTemplate={true} ShowHide={true} userTemplate={adminTemplate} />\n                                }\n                                {user.type == \"DEFAULT\" &&\n                                    <TemplateCard ViewPages={true} UseNow={true} userTemplate={adminTemplate}/>\n                                }\n                            </>\n                        }\n                    </div>\n                </div>\n            </>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        user: state.login.data,\n        adminTemplate: state.getBlogById.allAdminBlog,\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        fetchIdBlog: (data) => dispatch(actions.getAdminBlogIdSuccess(data)),\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(AdminTemplateById));\n","D:\\w3bizz\\React\\src\\component\\template\\UserTemplateById.js",["323","324","325","326","327","328","329"],"import React, { Component } from 'react';\nimport ModalPage from '../modal/Template'\nimport { connect } from 'react-redux';\nimport * as actions from '../../redux/actions/GetBlogByIdActions'\nimport {Tooltip, Card, CardContent} from '@material-ui/core';\nimport { withRouter } from 'react-router-dom'\nimport '../../asset/Template.css'\nimport {Web as WebIcon, WebAsset, Edit as EditIcon, Check as CheckIcon, Clear as ClearIcon} from '@material-ui/icons';\nimport TemplateCard from '../cardComponent/TemplateCard';\n\nclass UserTemplateById extends Component {\n\n    state = {\n        editDetails:'',\n        showModal: false,\n    }\n\n\n    toggle = () => {\n        this.setState({\n            showModal: !this.state.showModal,\n        });\n    }\n\n\n    render() {\n        const {template} = this.props\n        return (\n            <>\n                <div className=\"container-fluid\">\n                    <div className=\"row\">\n                        {template.length > 0 ? \n                        (\n                        <>\n                        <TemplateCard Publish={true} ViewPages={true} EditTemplate={true} CopyTemplate={true} userTemplate={template} />\n                        </>\n                        ):(\n                            <div>\n                                <h3 className=\"demo-heading\">\n                                It is Very Easy To Create Template.\n                                <span className=\"demo-sub\">You Can Either choose Built-In Template or Create New Blank Template to Start.</span>\n                                </h3>\n                                <div className=\"demo-div\">\n                                <Card className=\"demo-card\" onClick={(e)=>{this.props.history.push('/savedWebTemplate')}}>\n                                <WebIcon style={{fontSize:120}} className=\"demo-icon\"/>\n                                <h6 className=\"demo-title\">Template</h6>                                    \n                                <span className=\"demo-sub\">Choose from our pre-defined templates curated for your website.</span> \n                                </Card>\n                                <Card className=\"demo-card\" onClick={(e) => this.toggle()}>\n                                <WebAsset style={{fontSize:120}} className=\"demo-icon\"/>\n                                <h6 className=\"demo-title\">Create New Template</h6>\n                                <span className=\"demo-sub\">You can create a new blank template in few clicks and build your website from scratch.</span>                                  \n                                </Card>\n                                </div>\n                            </div>\n                        )}\n                    </div>\n                </div>\n            </>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        template: state.getBlogById.allBlog\n    }\n}\n\nexport default connect(mapStateToProps, null)(withRouter(UserTemplateById));\n","D:\\w3bizz\\React\\src\\component\\pages\\PageDisplay.js",["330","331","332","333","334","335","336","337","338","339","340","341","342","343"],"import React, { Component } from 'react';\nimport Modal from 'react-modal'\nimport { connect } from 'react-redux';\nimport { getBlogIdSuccess, getAdminBlogIdSuccess } from '../../redux/actions/GetBlogByIdActions'\nimport { toast } from 'react-toastify';\nimport AdminLayout from '../AdminLayout';\nimport { getTemplate, mergePage } from '../../services/apiFunction';\nimport {Card, CardContent, Tooltip} from '@material-ui/core';\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\nimport '../../asset/Template.css'\nimport loadingAnimationData from '../lottieIcons/LottieIco'\nimport LottieIcon from '../lottieIcons/LottieIco';\nimport PageModal from '../modal/Page'\nimport PageCard from '../cardComponent/PageCard';\nimport DefaultPagesModal from '../modal/DefaultPagesModal';\n\nclass RecentPage extends Component {\n    state = {\n        showModal: false,\n        showPageModal: false,\n        loader: false,\n        radioValue: '',\n        valueError: '',\n        pageData: [],\n        isStopped: false,\n        isPaused: false,\n    }\n\n    openModal = (e, value) => {\n        this.setState({ showPageModal: true })\n        e.preventDefault()\n    }\n\n    toggleLoader = () => {\n        this.setState({loader:!this.state.loader})\n    }\n\n    toggle = () => {\n        this.setState({\n            showModal: !this.state.showModal,\n        });\n    }\n\n    togglePageModal = () => {\n        this.setState({\n            showPageModal: !this.state.showPageModal,\n        });\n    }\n\n    render() {\n        const { user, adminTemplate, userTemplate } = this.props\n        const { template, type } = this.props.location.state;\n        let templateData;\n        if(type == \"USER\"){\n            templateData = userTemplate.find(val=> val.s_no == template.s_no)\n        }else{\n            templateData = adminTemplate.find(val=> val.s_no == template.s_no)\n            if(user.type == \"DEFAULT\"){\n                let tempPage = []\n                if(templateData && templateData.pageData.length>0){\n                    templateData.pageData.map((val)=>{\n                        if(val.is_hidden == \"FALSE\"){\n                            tempPage.push(val)\n                        }\n                    })\n                }\n                templateData.pageData = tempPage\n            }\n        }\n        return this.state.loader ? (\n            <LottieIcon animationData={loadingAnimationData} type=\"Running\" height={50} width={50}/>\n        ) :\n            (\n                <>\n                    <AdminLayout title={templateData.title}>\n                        <div style={{ boxSizing: \"border-box\", width: \"100%\", height: \"4em\" }}>\n                            <Tooltip title=\"Add Default Page\">\n                                <span style={{ float: \"right\", marginRight: \"10px\" }} onClick={(e) => { this.openModal(e, templateData) }}>\n                                    <AddCircleOutlineIcon />\n                                </span></Tooltip>\n                            <button style={{ float: \"right\", borderRadius: \"3px\", marginRight: \"10px\", backgroundColor: \"#1DABB8\" }} className=\"btn text-white\" onClick={() => this.setState({ showModal: true })}>Create Page</button>\n                        </div>\n                        <br />\n                        {templateData && type == \"DEFAULT\" ?//Template Type\n                            user.type == \"ADMIN\" ?//User Type\n                            <PageCard page={templateData.pageData} Preview={true} EditCode={true} EditPage={true} ShowHide={true} />:\n                            <PageCard page={templateData.pageData}  Preview={true} ShowHide={true} />\n                            :\n                            <PageCard page={templateData.pageData} EditCode={true} EditPage={true} ShowHide={true} />\n                        }\n                        {this.state.showModal &&\n                            <PageModal modal={this.state.showModal} loader={this.toggleLoader} toggle={this.toggle} title={\"Add Page\"} Add={true} editData={\"\"} />\n                        }\n                        </AdminLayout>\n                        <DefaultPagesModal modal={this.state.showPageModal} loader={this.toggleLoader} toggle={this.togglePageModal} title={\"Default Pages\"} templateData={template} />\n                </>\n            );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        user: state.login && state.login.data,\n        userTemplate : state.getBlogById && state.getBlogById.allBlog,\n        adminTemplate: state.getBlogById && state.getBlogById.allAdminBlog,\n        defaultPages: state.getBlogById && state.getBlogById.defaultPages\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        createPage: (data) => dispatch(getBlogIdSuccess(data)),\n        createAdminPage: (data) => dispatch(getAdminBlogIdSuccess(data))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RecentPage);\n","D:\\w3bizz\\React\\src\\component\\pages\\DefaultPages.js",["344","345","346"],"import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { getBlogIdSuccess, getAdminBlogIdSuccess, defaultPagesSuccess } from '../../redux/actions/GetBlogByIdActions'\r\nimport AdminLayout from '../AdminLayout';\r\nimport { getTemplate, mergePage } from '../../services/apiFunction';\r\nimport '../../asset/Template.css'\r\nimport loadingAnimationData from '../lottieIcons/LottieIco'\r\nimport LottieIcon from '../lottieIcons/LottieIco';\r\nimport PageModal from '../modal/Page'\r\nimport PageCard from '../cardComponent/PageCard';\r\n\r\nclass DefaultPage extends Component {\r\n    state = {\r\n        showModal: false,\r\n        loader: false,\r\n        isStopped: false,\r\n        isPaused: false,\r\n    }\r\n\r\n    toggleLoader = () => {\r\n        this.setState({loader:!this.state.loader})\r\n    }\r\n\r\n    toggle = () => {\r\n        this.setState({\r\n            showModal: !this.state.showModal,\r\n        });\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.getDefaultPages();\r\n    }\r\n\r\n    getDefaultPages = async () => {\r\n        this.setState({loader:true})\r\n        const response = await getTemplate(this.props.user.username)\r\n        if(response.STATUS == \"SUCCESS\"){\r\n            this.setState({loader:false})\r\n            this.props.createDefaultPage(response.DEFAULT_PAGES)\r\n        }\r\n    }\r\n    render() {\r\n        const {pageData} = this.props\r\n        return this.state.loader ? (\r\n            <LottieIcon animationData={loadingAnimationData} type=\"Running\" height={50} width={50} pause={false} stop={false}/>\r\n        ) :\r\n            (\r\n                <>\r\n                    <AdminLayout title={pageData.title}>\r\n                        <div style={{ boxSizing: \"border-box\", width: \"100%\", height: \"4em\" }}>\r\n                            <button style={{ float: \"right\", borderRadius: \"3px\", marginRight: \"10px\", backgroundColor: \"#1DABB8\" }} className=\"btn text-white\" onClick={() => this.setState({ showModal: true })}>Create Page</button>\r\n                        </div>\r\n                        <br />\r\n                        {pageData && pageData.length > 0 &&//Template Type\r\n                            <PageCard page={pageData} EditCode={true} EditPage={true} ShowHide={true} type={\"DEFAULT\"}/>\r\n                        }\r\n                        {this.state.showModal &&\r\n                            <PageModal modal={this.state.showModal} loader={this.toggleLoader} toggle={this.toggle} title={\"Add Page\"} add={true} editData={\"\"} type={\"DEFAULT\"} />\r\n                        }\r\n                    </AdminLayout>\r\n                </>\r\n            );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        user: state.login && state.login.data,\r\n        pageData: state.getBlogById && state.getBlogById.defaultPages\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        createDefaultPage: (data) => dispatch(defaultPagesSuccess(data)),\r\n        createAdminPage: (data) => dispatch(getAdminBlogIdSuccess(data))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DefaultPage)","D:\\w3bizz\\React\\src\\component\\modal\\DefaultPagesModal.js",["347","348","349","350","351"],"import React, { Component } from 'react';\r\nimport { MDBContainer, MDBModal, MDBModalBody, MDBModalHeader, MDBModalFooter } from 'mdbreact';\r\nimport { connect } from 'react-redux'\r\nimport { toast } from 'react-toastify';\r\nimport * as actions from '../../redux/actions/GetBlogByIdActions'\r\nimport '../../asset/Template.css'\r\nimport {Card, CardContent, Tooltip} from '@material-ui/core';\r\nimport '../../asset/Template.css'\r\nimport { getTemplate, mergePage } from '../../services/apiFunction';\r\n\r\nclass DefaultPageModal extends Component {\r\n\r\n    state = {\r\n        loader: false,\r\n        radioValue: '',\r\n        valueError: '',\r\n    }\r\n\r\n\r\n    handleSubmit = async (event) => {\r\n        let value = this.state.radioValue\r\n        const type = this.props.user.type\r\n        if (value != \"\") {\r\n            let obj = {}\r\n            obj.template_id = this.props.templateData.id\r\n            obj.page_id = value\r\n            const response = await mergePage(obj)\r\n            toast.success(response.MESSAGE)\r\n            this.setState({ showPageModal: false })\r\n            const template = await getTemplate(this.props.user.username)\r\n            if (template.STATUS == \"SUCCESS\") {\r\n                if (type != \"DEFAULT\") {\r\n                    this.props.createPage(template.USER_TEMPLATE)\r\n                    window.location.reload()\r\n                }\r\n                else {\r\n                    this.props.createAdminPage(template.DEFAULT_TEMPLATE)\r\n                    window.location.reload()\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            toast.error(\"No Page is Selected\")\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { defaultPages } = this.props\r\n        return (\r\n            <>\r\n                <MDBContainer>\r\n                    <MDBModal size=\"lg\" centered isOpen={this.props.modal} toggle={this.props.toggle}>\r\n                        <MDBModalHeader toggle={this.props.toggle}>{this.props.title}</MDBModalHeader>\r\n                        <MDBModalBody>\r\n                            <div>\r\n                            <div className=\"row\">\r\n                            {defaultPages.length > 0 && defaultPages.map(value =>\r\n                                <>\r\n                                    <div className=\"col-sm-4\">\r\n                                        <div>\r\n                                            <label>\r\n                                                <input type=\"radio\" value={value.page_id} name=\"page\" className=\"card-input-element\" onChange={(e) => { this.setState({ radioValue: e.target.value }) }} />\r\n                                                <Card className=\"card-input\">\r\n                                                    <img src={value.image ? value.image : \"https://res.cloudinary.com/w3bizz-com/image/upload/c_scale,w_425/v1632246930/2_hjs08o.png\"} style={{ height: \"15em\", width: \"100%\" }} />\r\n                                                    <CardContent>\r\n                                                        <span>\r\n                                                            <h4 style={{ display: \"inline\" }}>{value.page_title}</h4>\r\n                                                        </span>\r\n                                                    </CardContent>\r\n                                                </Card>\r\n                                            </label>\r\n                                        </div>\r\n                                        <br />\r\n                                    </div>\r\n                                </>\r\n                            )}\r\n                            </div>\r\n                            </div>\r\n                        </MDBModalBody>\r\n                        <MDBModalFooter>\r\n                            <button className=\"btn btn-info\" style={{ float: \"right\" }} onClick={(event) => { this.handleSubmit(event) }}>Submit</button>\r\n                        </MDBModalFooter>\r\n                    </MDBModal>\r\n\r\n                </MDBContainer>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n\r\n    return {\r\n        user: state.login.data,\r\n        defaultPages: state.getBlogById && state.getBlogById.defaultPages\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        createPage: (data) => dispatch(actions.getBlogIdSuccess(data)),\r\n        createAdminPage: (data) => dispatch(actions.getAdminBlogIdSuccess(data))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DefaultPageModal)",{"ruleId":"352","replacedBy":"353"},{"ruleId":"354","replacedBy":"355"},{"ruleId":"352","replacedBy":"356"},{"ruleId":"354","replacedBy":"357"},{"ruleId":"358","severity":1,"message":"359","line":5,"column":16,"nodeType":"360","messageId":"361","endLine":5,"endColumn":24},{"ruleId":"362","severity":1,"message":"363","line":26,"column":38,"nodeType":"364","messageId":"365","endLine":26,"endColumn":40},{"ruleId":"366","severity":1,"message":"367","line":59,"column":21,"nodeType":"368","endLine":59,"endColumn":67},{"ruleId":"362","severity":1,"message":"363","line":21,"column":33,"nodeType":"364","messageId":"365","endLine":21,"endColumn":35},{"ruleId":"362","severity":1,"message":"363","line":51,"column":55,"nodeType":"364","messageId":"365","endLine":51,"endColumn":57},{"ruleId":"366","severity":1,"message":"367","line":104,"column":17,"nodeType":"368","endLine":104,"endColumn":66},{"ruleId":"362","severity":1,"message":"363","line":67,"column":78,"nodeType":"364","messageId":"365","endLine":67,"endColumn":80},{"ruleId":"362","severity":1,"message":"363","line":69,"column":68,"nodeType":"364","messageId":"365","endLine":69,"endColumn":70},{"ruleId":"369","severity":1,"message":"370","line":106,"column":37,"nodeType":"371","messageId":"372","endLine":106,"endColumn":39},{"ruleId":"362","severity":1,"message":"363","line":107,"column":64,"nodeType":"364","messageId":"365","endLine":107,"endColumn":66},{"ruleId":"362","severity":1,"message":"373","line":132,"column":37,"nodeType":"364","messageId":"365","endLine":132,"endColumn":39},{"ruleId":"362","severity":1,"message":"363","line":141,"column":37,"nodeType":"364","messageId":"365","endLine":141,"endColumn":39},{"ruleId":"362","severity":1,"message":"363","line":164,"column":30,"nodeType":"364","messageId":"365","endLine":164,"endColumn":32},{"ruleId":"362","severity":1,"message":"373","line":169,"column":77,"nodeType":"364","messageId":"365","endLine":169,"endColumn":79},{"ruleId":"358","severity":1,"message":"374","line":197,"column":15,"nodeType":"360","messageId":"361","endLine":197,"endColumn":27},{"ruleId":"358","severity":1,"message":"375","line":208,"column":17,"nodeType":"360","messageId":"361","endLine":208,"endColumn":24},{"ruleId":"358","severity":1,"message":"376","line":208,"column":26,"nodeType":"360","messageId":"361","endLine":208,"endColumn":32},{"ruleId":"362","severity":1,"message":"363","line":414,"column":79,"nodeType":"364","messageId":"365","endLine":414,"endColumn":81},{"ruleId":"358","severity":1,"message":"377","line":8,"column":53,"nodeType":"360","messageId":"361","endLine":8,"endColumn":61},{"ruleId":"358","severity":1,"message":"378","line":8,"column":80,"nodeType":"360","messageId":"361","endLine":8,"endColumn":84},{"ruleId":"358","severity":1,"message":"379","line":12,"column":17,"nodeType":"360","messageId":"361","endLine":12,"endColumn":31},{"ruleId":"358","severity":1,"message":"380","line":12,"column":47,"nodeType":"360","messageId":"361","endLine":12,"endColumn":61},{"ruleId":"358","severity":1,"message":"381","line":12,"column":94,"nodeType":"360","messageId":"361","endLine":12,"endColumn":103},{"ruleId":"358","severity":1,"message":"382","line":13,"column":24,"nodeType":"360","messageId":"361","endLine":13,"endColumn":45},{"ruleId":"358","severity":1,"message":"383","line":121,"column":12,"nodeType":"360","messageId":"361","endLine":121,"endColumn":23},{"ruleId":"358","severity":1,"message":"384","line":125,"column":12,"nodeType":"360","messageId":"361","endLine":125,"endColumn":24},{"ruleId":"366","severity":1,"message":"367","line":173,"column":13,"nodeType":"368","endLine":173,"endColumn":152},{"ruleId":"362","severity":1,"message":"373","line":199,"column":22,"nodeType":"364","messageId":"365","endLine":199,"endColumn":24},{"ruleId":"362","severity":1,"message":"363","line":233,"column":22,"nodeType":"364","messageId":"365","endLine":233,"endColumn":24},{"ruleId":"358","severity":1,"message":"385","line":1,"column":8,"nodeType":"360","messageId":"361","endLine":1,"endColumn":13},{"ruleId":"358","severity":1,"message":"386","line":1,"column":17,"nodeType":"360","messageId":"361","endLine":1,"endColumn":25},{"ruleId":"387","severity":1,"message":"388","line":37,"column":23,"nodeType":"368","endLine":44,"endColumn":24},{"ruleId":"362","severity":1,"message":"363","line":27,"column":28,"nodeType":"364","messageId":"365","endLine":27,"endColumn":30},{"ruleId":"362","severity":1,"message":"363","line":39,"column":26,"nodeType":"364","messageId":"365","endLine":39,"endColumn":28},{"ruleId":"362","severity":1,"message":"363","line":53,"column":24,"nodeType":"364","messageId":"365","endLine":53,"endColumn":26},{"ruleId":"366","severity":1,"message":"367","line":65,"column":21,"nodeType":"368","endLine":65,"endColumn":67},{"ruleId":"358","severity":1,"message":"389","line":2,"column":24,"nodeType":"360","messageId":"361","endLine":2,"endColumn":30},{"ruleId":"358","severity":1,"message":"390","line":2,"column":72,"nodeType":"360","messageId":"361","endLine":2,"endColumn":86},{"ruleId":"358","severity":1,"message":"391","line":5,"column":17,"nodeType":"360","messageId":"361","endLine":5,"endColumn":31},{"ruleId":"362","severity":1,"message":"363","line":47,"column":34,"nodeType":"364","messageId":"365","endLine":47,"endColumn":36},{"ruleId":"362","severity":1,"message":"363","line":76,"column":27,"nodeType":"364","messageId":"365","endLine":76,"endColumn":29},{"ruleId":"362","severity":1,"message":"363","line":118,"column":52,"nodeType":"364","messageId":"365","endLine":118,"endColumn":54},{"ruleId":"366","severity":1,"message":"367","line":138,"column":41,"nodeType":"368","endLine":138,"endColumn":177},{"ruleId":"358","severity":1,"message":"392","line":45,"column":7,"nodeType":"360","messageId":"361","endLine":45,"endColumn":12},{"ruleId":"358","severity":1,"message":"393","line":115,"column":10,"nodeType":"360","messageId":"361","endLine":115,"endColumn":24},{"ruleId":"362","severity":1,"message":"363","line":144,"column":24,"nodeType":"364","messageId":"365","endLine":144,"endColumn":26},{"ruleId":"358","severity":1,"message":"394","line":158,"column":17,"nodeType":"360","messageId":"361","endLine":158,"endColumn":21},{"ruleId":"358","severity":1,"message":"395","line":171,"column":17,"nodeType":"360","messageId":"361","endLine":171,"endColumn":25},{"ruleId":"358","severity":1,"message":"389","line":2,"column":24,"nodeType":"360","messageId":"361","endLine":2,"endColumn":30},{"ruleId":"358","severity":1,"message":"390","line":2,"column":72,"nodeType":"360","messageId":"361","endLine":2,"endColumn":86},{"ruleId":"358","severity":1,"message":"391","line":5,"column":17,"nodeType":"360","messageId":"361","endLine":5,"endColumn":31},{"ruleId":"362","severity":1,"message":"363","line":36,"column":39,"nodeType":"364","messageId":"365","endLine":36,"endColumn":41},{"ruleId":"362","severity":1,"message":"363","line":48,"column":34,"nodeType":"364","messageId":"365","endLine":48,"endColumn":36},{"ruleId":"362","severity":1,"message":"363","line":52,"column":37,"nodeType":"364","messageId":"365","endLine":52,"endColumn":39},{"ruleId":"362","severity":1,"message":"363","line":78,"column":40,"nodeType":"364","messageId":"365","endLine":78,"endColumn":42},{"ruleId":"362","severity":1,"message":"363","line":81,"column":27,"nodeType":"364","messageId":"365","endLine":81,"endColumn":29},{"ruleId":"362","severity":1,"message":"363","line":92,"column":33,"nodeType":"364","messageId":"365","endLine":92,"endColumn":35},{"ruleId":"362","severity":1,"message":"363","line":130,"column":52,"nodeType":"364","messageId":"365","endLine":130,"endColumn":54},{"ruleId":"366","severity":1,"message":"367","line":150,"column":45,"nodeType":"368","endLine":150,"endColumn":185},{"ruleId":"362","severity":1,"message":"363","line":36,"column":27,"nodeType":"364","messageId":"365","endLine":36,"endColumn":29},{"ruleId":"362","severity":1,"message":"363","line":59,"column":29,"nodeType":"364","messageId":"365","endLine":59,"endColumn":31},{"ruleId":"362","severity":1,"message":"363","line":76,"column":59,"nodeType":"364","messageId":"365","endLine":76,"endColumn":61},{"ruleId":"362","severity":1,"message":"363","line":76,"column":96,"nodeType":"364","messageId":"365","endLine":76,"endColumn":98},{"ruleId":"362","severity":1,"message":"363","line":137,"column":64,"nodeType":"364","messageId":"365","endLine":137,"endColumn":66},{"ruleId":"358","severity":1,"message":"390","line":2,"column":64,"nodeType":"360","messageId":"361","endLine":2,"endColumn":78},{"ruleId":"358","severity":1,"message":"391","line":5,"column":17,"nodeType":"360","messageId":"361","endLine":5,"endColumn":31},{"ruleId":"362","severity":1,"message":"363","line":33,"column":29,"nodeType":"364","messageId":"365","endLine":33,"endColumn":31},{"ruleId":"362","severity":1,"message":"363","line":47,"column":25,"nodeType":"364","messageId":"365","endLine":47,"endColumn":27},{"ruleId":"362","severity":1,"message":"363","line":49,"column":33,"nodeType":"364","messageId":"365","endLine":49,"endColumn":35},{"ruleId":"362","severity":1,"message":"373","line":53,"column":37,"nodeType":"364","messageId":"365","endLine":53,"endColumn":39},{"ruleId":"362","severity":1,"message":"363","line":68,"column":46,"nodeType":"364","messageId":"365","endLine":68,"endColumn":48},{"ruleId":"362","severity":1,"message":"363","line":70,"column":39,"nodeType":"364","messageId":"365","endLine":70,"endColumn":41},{"ruleId":"362","severity":1,"message":"363","line":71,"column":29,"nodeType":"364","messageId":"365","endLine":71,"endColumn":31},{"ruleId":"362","severity":1,"message":"363","line":85,"column":25,"nodeType":"364","messageId":"365","endLine":85,"endColumn":27},{"ruleId":"362","severity":1,"message":"363","line":87,"column":33,"nodeType":"364","messageId":"365","endLine":87,"endColumn":35},{"ruleId":"362","severity":1,"message":"363","line":129,"column":110,"nodeType":"364","messageId":"365","endLine":129,"endColumn":112},{"ruleId":"362","severity":1,"message":"363","line":144,"column":52,"nodeType":"364","messageId":"365","endLine":144,"endColumn":54},{"ruleId":"366","severity":1,"message":"367","line":176,"column":53,"nodeType":"368","endLine":176,"endColumn":182},{"ruleId":"366","severity":1,"message":"367","line":186,"column":53,"nodeType":"368","endLine":186,"endColumn":189},{"ruleId":"362","severity":1,"message":"373","line":195,"column":54,"nodeType":"364","messageId":"365","endLine":195,"endColumn":56},{"ruleId":"362","severity":1,"message":"363","line":25,"column":32,"nodeType":"364","messageId":"365","endLine":25,"endColumn":34},{"ruleId":"362","severity":1,"message":"373","line":176,"column":16,"nodeType":"364","messageId":"365","endLine":176,"endColumn":18},{"ruleId":"358","severity":1,"message":"396","line":1,"column":27,"nodeType":"360","messageId":"361","endLine":1,"endColumn":36},{"ruleId":"358","severity":1,"message":"397","line":3,"column":10,"nodeType":"360","messageId":"361","endLine":3,"endColumn":18},{"ruleId":"358","severity":1,"message":"398","line":3,"column":45,"nodeType":"360","messageId":"361","endLine":3,"endColumn":60},{"ruleId":"358","severity":1,"message":"399","line":3,"column":74,"nodeType":"360","messageId":"361","endLine":3,"endColumn":85},{"ruleId":"358","severity":1,"message":"400","line":21,"column":12,"nodeType":"360","messageId":"361","endLine":21,"endColumn":16},{"ruleId":"358","severity":1,"message":"401","line":21,"column":18,"nodeType":"360","messageId":"361","endLine":21,"endColumn":25},{"ruleId":"358","severity":1,"message":"402","line":29,"column":12,"nodeType":"360","messageId":"361","endLine":29,"endColumn":19},{"ruleId":"358","severity":1,"message":"403","line":30,"column":22,"nodeType":"360","messageId":"361","endLine":30,"endColumn":33},{"ruleId":"358","severity":1,"message":"404","line":31,"column":23,"nodeType":"360","messageId":"361","endLine":31,"endColumn":35},{"ruleId":"362","severity":1,"message":"363","line":34,"column":31,"nodeType":"364","messageId":"365","endLine":34,"endColumn":33},{"ruleId":"369","severity":1,"message":"370","line":57,"column":37,"nodeType":"371","messageId":"372","endLine":57,"endColumn":39},{"ruleId":"362","severity":1,"message":"363","line":58,"column":64,"nodeType":"364","messageId":"365","endLine":58,"endColumn":66},{"ruleId":"362","severity":1,"message":"363","line":97,"column":29,"nodeType":"364","messageId":"365","endLine":97,"endColumn":31},{"ruleId":"362","severity":1,"message":"363","line":100,"column":27,"nodeType":"364","messageId":"365","endLine":100,"endColumn":29},{"ruleId":"362","severity":1,"message":"363","line":108,"column":33,"nodeType":"364","messageId":"365","endLine":108,"endColumn":35},{"ruleId":"362","severity":1,"message":"363","line":128,"column":29,"nodeType":"364","messageId":"365","endLine":128,"endColumn":31},{"ruleId":"366","severity":1,"message":"367","line":149,"column":41,"nodeType":"368","endLine":149,"endColumn":216},{"ruleId":"362","severity":1,"message":"363","line":157,"column":68,"nodeType":"364","messageId":"365","endLine":157,"endColumn":70},{"ruleId":"362","severity":1,"message":"363","line":164,"column":67,"nodeType":"364","messageId":"365","endLine":164,"endColumn":69},{"ruleId":"362","severity":1,"message":"363","line":171,"column":69,"nodeType":"364","messageId":"365","endLine":171,"endColumn":71},{"ruleId":"362","severity":1,"message":"363","line":173,"column":78,"nodeType":"364","messageId":"365","endLine":173,"endColumn":80},{"ruleId":"362","severity":1,"message":"363","line":176,"column":70,"nodeType":"364","messageId":"365","endLine":176,"endColumn":72},{"ruleId":"362","severity":1,"message":"363","line":183,"column":73,"nodeType":"364","messageId":"365","endLine":183,"endColumn":75},{"ruleId":"362","severity":1,"message":"363","line":190,"column":73,"nodeType":"364","messageId":"365","endLine":190,"endColumn":75},{"ruleId":"362","severity":1,"message":"363","line":69,"column":33,"nodeType":"364","messageId":"365","endLine":69,"endColumn":35},{"ruleId":"362","severity":1,"message":"363","line":71,"column":81,"nodeType":"364","messageId":"365","endLine":71,"endColumn":83},{"ruleId":"362","severity":1,"message":"363","line":72,"column":42,"nodeType":"364","messageId":"365","endLine":72,"endColumn":44},{"ruleId":"362","severity":1,"message":"373","line":94,"column":37,"nodeType":"364","messageId":"365","endLine":94,"endColumn":39},{"ruleId":"362","severity":1,"message":"363","line":103,"column":37,"nodeType":"364","messageId":"365","endLine":103,"endColumn":39},{"ruleId":"362","severity":1,"message":"363","line":138,"column":92,"nodeType":"364","messageId":"365","endLine":138,"endColumn":94},{"ruleId":"362","severity":1,"message":"363","line":145,"column":91,"nodeType":"364","messageId":"365","endLine":145,"endColumn":93},{"ruleId":"362","severity":1,"message":"363","line":162,"column":69,"nodeType":"364","messageId":"365","endLine":162,"endColumn":71},{"ruleId":"358","severity":1,"message":"396","line":1,"column":27,"nodeType":"360","messageId":"361","endLine":1,"endColumn":36},{"ruleId":"358","severity":1,"message":"405","line":22,"column":11,"nodeType":"360","messageId":"361","endLine":22,"endColumn":18},{"ruleId":"358","severity":1,"message":"406","line":26,"column":12,"nodeType":"360","messageId":"361","endLine":26,"endColumn":20},{"ruleId":"358","severity":1,"message":"403","line":26,"column":22,"nodeType":"360","messageId":"361","endLine":26,"endColumn":33},{"ruleId":"362","severity":1,"message":"363","line":37,"column":29,"nodeType":"364","messageId":"365","endLine":37,"endColumn":31},{"ruleId":"358","severity":1,"message":"407","line":38,"column":17,"nodeType":"360","messageId":"361","endLine":38,"endColumn":21},{"ruleId":"362","severity":1,"message":"363","line":40,"column":33,"nodeType":"364","messageId":"365","endLine":40,"endColumn":35},{"ruleId":"362","severity":1,"message":"373","line":60,"column":18,"nodeType":"364","messageId":"365","endLine":60,"endColumn":20},{"ruleId":"366","severity":1,"message":"367","line":103,"column":33,"nodeType":"368","endLine":103,"endColumn":208},{"ruleId":"362","severity":1,"message":"363","line":111,"column":60,"nodeType":"364","messageId":"365","endLine":111,"endColumn":62},{"ruleId":"362","severity":1,"message":"363","line":114,"column":61,"nodeType":"364","messageId":"365","endLine":114,"endColumn":63},{"ruleId":"362","severity":1,"message":"363","line":117,"column":61,"nodeType":"364","messageId":"365","endLine":117,"endColumn":63},{"ruleId":"362","severity":1,"message":"363","line":119,"column":70,"nodeType":"364","messageId":"365","endLine":119,"endColumn":72},{"ruleId":"362","severity":1,"message":"363","line":122,"column":61,"nodeType":"364","messageId":"365","endLine":122,"endColumn":63},{"ruleId":"362","severity":1,"message":"363","line":22,"column":29,"nodeType":"364","messageId":"365","endLine":22,"endColumn":31},{"ruleId":"358","severity":1,"message":"408","line":41,"column":25,"nodeType":"360","messageId":"361","endLine":41,"endColumn":29},{"ruleId":"362","severity":1,"message":"363","line":25,"column":29,"nodeType":"364","messageId":"365","endLine":25,"endColumn":31},{"ruleId":"369","severity":1,"message":"370","line":28,"column":53,"nodeType":"371","messageId":"372","endLine":28,"endColumn":55},{"ruleId":"362","severity":1,"message":"363","line":29,"column":39,"nodeType":"364","messageId":"365","endLine":29,"endColumn":41},{"ruleId":"362","severity":1,"message":"363","line":34,"column":38,"nodeType":"364","messageId":"365","endLine":34,"endColumn":40},{"ruleId":"362","severity":1,"message":"363","line":76,"column":40,"nodeType":"364","messageId":"365","endLine":76,"endColumn":42},{"ruleId":"362","severity":1,"message":"363","line":20,"column":44,"nodeType":"364","messageId":"365","endLine":20,"endColumn":46},{"ruleId":"362","severity":1,"message":"363","line":23,"column":44,"nodeType":"364","messageId":"365","endLine":23,"endColumn":46},{"ruleId":"358","severity":1,"message":"409","line":2,"column":8,"nodeType":"360","messageId":"361","endLine":2,"endColumn":17},{"ruleId":"358","severity":1,"message":"410","line":4,"column":13,"nodeType":"360","messageId":"361","endLine":4,"endColumn":20},{"ruleId":"358","severity":1,"message":"411","line":5,"column":9,"nodeType":"360","messageId":"361","endLine":5,"endColumn":16},{"ruleId":"358","severity":1,"message":"412","line":5,"column":24,"nodeType":"360","messageId":"361","endLine":5,"endColumn":35},{"ruleId":"358","severity":1,"message":"413","line":8,"column":43,"nodeType":"360","messageId":"361","endLine":8,"endColumn":51},{"ruleId":"358","severity":1,"message":"414","line":8,"column":62,"nodeType":"360","messageId":"361","endLine":8,"endColumn":71},{"ruleId":"358","severity":1,"message":"415","line":8,"column":82,"nodeType":"360","messageId":"361","endLine":8,"endColumn":91},{"ruleId":"358","severity":1,"message":"416","line":2,"column":8,"nodeType":"360","messageId":"361","endLine":2,"endColumn":13},{"ruleId":"358","severity":1,"message":"417","line":5,"column":10,"nodeType":"360","messageId":"361","endLine":5,"endColumn":15},{"ruleId":"358","severity":1,"message":"418","line":7,"column":10,"nodeType":"360","messageId":"361","endLine":7,"endColumn":21},{"ruleId":"358","severity":1,"message":"419","line":7,"column":23,"nodeType":"360","messageId":"361","endLine":7,"endColumn":32},{"ruleId":"358","severity":1,"message":"420","line":8,"column":9,"nodeType":"360","messageId":"361","endLine":8,"endColumn":13},{"ruleId":"358","severity":1,"message":"412","line":8,"column":15,"nodeType":"360","messageId":"361","endLine":8,"endColumn":26},{"ruleId":"362","severity":1,"message":"363","line":54,"column":17,"nodeType":"364","messageId":"365","endLine":54,"endColumn":19},{"ruleId":"362","severity":1,"message":"363","line":55,"column":61,"nodeType":"364","messageId":"365","endLine":55,"endColumn":63},{"ruleId":"362","severity":1,"message":"363","line":57,"column":62,"nodeType":"364","messageId":"365","endLine":57,"endColumn":64},{"ruleId":"362","severity":1,"message":"363","line":58,"column":26,"nodeType":"364","messageId":"365","endLine":58,"endColumn":28},{"ruleId":"369","severity":1,"message":"370","line":61,"column":52,"nodeType":"371","messageId":"372","endLine":61,"endColumn":54},{"ruleId":"362","severity":1,"message":"363","line":62,"column":42,"nodeType":"364","messageId":"365","endLine":62,"endColumn":44},{"ruleId":"362","severity":1,"message":"363","line":84,"column":47,"nodeType":"364","messageId":"365","endLine":84,"endColumn":49},{"ruleId":"362","severity":1,"message":"363","line":85,"column":39,"nodeType":"364","messageId":"365","endLine":85,"endColumn":41},{"ruleId":"358","severity":1,"message":"421","line":3,"column":10,"nodeType":"360","messageId":"361","endLine":3,"endColumn":26},{"ruleId":"358","severity":1,"message":"419","line":5,"column":23,"nodeType":"360","messageId":"361","endLine":5,"endColumn":32},{"ruleId":"362","severity":1,"message":"363","line":37,"column":28,"nodeType":"364","messageId":"365","endLine":37,"endColumn":30},{"ruleId":"358","severity":1,"message":"411","line":7,"column":28,"nodeType":"360","messageId":"361","endLine":7,"endColumn":35},{"ruleId":"362","severity":1,"message":"373","line":23,"column":19,"nodeType":"364","messageId":"365","endLine":23,"endColumn":21},{"ruleId":"362","severity":1,"message":"363","line":31,"column":33,"nodeType":"364","messageId":"365","endLine":31,"endColumn":35},{"ruleId":"362","severity":1,"message":"373","line":32,"column":26,"nodeType":"364","messageId":"365","endLine":32,"endColumn":28},{"ruleId":"366","severity":1,"message":"367","line":64,"column":53,"nodeType":"368","endLine":64,"endColumn":228},"no-native-reassign",["422"],"no-negated-in-lhs",["423"],["422"],["423"],"no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","Expected '!==' and instead saw '!='.","'customStyles' is assigned a value but never used.","'country' is assigned a value but never used.","'region' is assigned a value but never used.","'Collapse' is defined but never used.","'Link' is defined but never used.","'IconExpandLess' is defined but never used.","'IconExpandMore' is defined but never used.","'InboxIcon' is defined but never used.","'KeyboardArrowDownIcon' is defined but never used.","'handleClick' is defined but never used.","'handleClick2' is defined but never used.","'axios' is defined but never used.","'useState' is defined but never used.","jsx-a11y/role-supports-aria-props","The attribute aria-haspopup is not supported by the role link. This role is implicit on the element a.","'MDBBtn' is defined but never used.","'MDBModalFooter' is defined but never used.","'ToastContainer' is defined but never used.","'Field' is assigned a value but never used.","'billingDetails' is assigned a value but never used.","'resp' is assigned a value but never used.","'response' is assigned a value but never used.","'useEffect' is defined but never used.","'addSlots' is defined but never used.","'publishTemplate' is defined but never used.","'updateSlots' is defined but never used.","'slot' is assigned a value but never used.","'setSlot' is assigned a value but never used.","'fileSrc' is assigned a value but never used.","'setIsPaused' is assigned a value but never used.","'setIsStopped' is assigned a value but never used.","'history' is assigned a value but never used.","'isPaused' is assigned a value but never used.","'list' is assigned a value but never used.","'file' is assigned a value but never used.","'ModalPage' is defined but never used.","'actions' is defined but never used.","'Tooltip' is defined but never used.","'CardContent' is defined but never used.","'EditIcon' is defined but never used.","'CheckIcon' is defined but never used.","'ClearIcon' is defined but never used.","'Modal' is defined but never used.","'toast' is defined but never used.","'getTemplate' is defined but never used.","'mergePage' is defined but never used.","'Card' is defined but never used.","'getBlogIdSuccess' is defined but never used.","no-global-assign","no-unsafe-negation"]