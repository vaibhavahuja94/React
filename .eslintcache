[{"F:\\w3bizz\\React\\src\\index.js":"1","F:\\w3bizz\\React\\src\\store.js":"2","F:\\w3bizz\\React\\src\\App.js":"3","F:\\w3bizz\\React\\src\\services\\localStorage.js":"4","F:\\w3bizz\\React\\src\\services\\ProtectedRoute.js":"5","F:\\w3bizz\\React\\src\\redux\\rootReducer.js":"6","F:\\w3bizz\\React\\src\\component\\about\\Register.js":"7","F:\\w3bizz\\React\\src\\component\\about\\Login.js":"8","F:\\w3bizz\\React\\src\\component\\about\\ForgotPassword.js":"9","F:\\w3bizz\\React\\src\\component\\template\\UserTemplate.js":"10","F:\\w3bizz\\React\\src\\component\\profile\\ProfileUpdate.js":"11","F:\\w3bizz\\React\\src\\component\\template\\AdminTemplate.js":"12","F:\\w3bizz\\React\\src\\component\\pages\\DefaultPages.js":"13","F:\\w3bizz\\React\\src\\component\\pages\\PageDisplay.js":"14","F:\\w3bizz\\React\\src\\component\\home\\Home.js":"15","F:\\w3bizz\\React\\src\\services\\Auth.js":"16","F:\\w3bizz\\React\\src\\component\\AdminLayout.js":"17","F:\\w3bizz\\React\\src\\services\\apiFunction.js":"18","F:\\w3bizz\\React\\src\\component\\template\\UserTemplateById.js":"19","F:\\w3bizz\\React\\src\\redux\\reducer\\SetTemplateReducers.js":"20","F:\\w3bizz\\React\\src\\redux\\reducer\\LoginReducers.js":"21","F:\\w3bizz\\React\\src\\component\\lottieIcons\\LottieIco.js":"22","F:\\w3bizz\\React\\src\\component\\modal\\Template.js":"23","F:\\w3bizz\\React\\src\\redux\\actions\\LoginActions.js":"24","F:\\w3bizz\\React\\src\\component\\modal\\Page.js":"25","F:\\w3bizz\\React\\src\\component\\modal\\DefaultPagesModal.js":"26","F:\\w3bizz\\React\\src\\component\\template\\AdminTemplateById.js":"27","F:\\w3bizz\\React\\src\\redux\\actions\\SetTemplateActions.js":"28","F:\\w3bizz\\React\\src\\component\\home\\HomeNavBar.js":"29","F:\\w3bizz\\React\\src\\component\\cardComponent\\PageCard.js":"30","F:\\w3bizz\\React\\src\\component\\payment\\StripeApp.js":"31","F:\\w3bizz\\React\\src\\component\\modal\\SlotModal.js":"32","F:\\w3bizz\\React\\src\\component\\cardComponent\\TemplateCard.js":"33","F:\\w3bizz\\React\\src\\component\\modal\\AvailableSlot.js":"34"},{"size":343,"mtime":1622381557433,"results":"35","hashOfConfig":"36"},{"size":736,"mtime":1633377384928,"results":"37","hashOfConfig":"36"},{"size":1881,"mtime":1632643488125,"results":"38","hashOfConfig":"36"},{"size":658,"mtime":1622380864606,"results":"39","hashOfConfig":"36"},{"size":567,"mtime":1633103426395,"results":"40","hashOfConfig":"36"},{"size":245,"mtime":1632727443635,"results":"41","hashOfConfig":"36"},{"size":6471,"mtime":1633458792190,"results":"42","hashOfConfig":"36"},{"size":8247,"mtime":1632714553541,"results":"43","hashOfConfig":"36"},{"size":9738,"mtime":1633458688221,"results":"44","hashOfConfig":"36"},{"size":2928,"mtime":1633153278532,"results":"45","hashOfConfig":"36"},{"size":26404,"mtime":1633455100136,"results":"46","hashOfConfig":"36"},{"size":3874,"mtime":1633076143453,"results":"47","hashOfConfig":"36"},{"size":3079,"mtime":1633104368753,"results":"48","hashOfConfig":"36"},{"size":5864,"mtime":1633633116929,"results":"49","hashOfConfig":"36"},{"size":2803,"mtime":1627618219537,"results":"50","hashOfConfig":"36"},{"size":170,"mtime":1632577890410,"results":"51","hashOfConfig":"36"},{"size":8930,"mtime":1632650529183,"results":"52","hashOfConfig":"36"},{"size":6813,"mtime":1632419754405,"results":"53","hashOfConfig":"36"},{"size":2886,"mtime":1633369020070,"results":"54","hashOfConfig":"36"},{"size":839,"mtime":1632712252525,"results":"55","hashOfConfig":"36"},{"size":657,"mtime":1622393163975,"results":"56","hashOfConfig":"36"},{"size":941,"mtime":1633074207588,"results":"57","hashOfConfig":"36"},{"size":7534,"mtime":1633377333382,"results":"58","hashOfConfig":"36"},{"size":262,"mtime":1630079981616,"results":"59","hashOfConfig":"36"},{"size":11892,"mtime":1633773356927,"results":"60","hashOfConfig":"36"},{"size":4561,"mtime":1633456996335,"results":"61","hashOfConfig":"36"},{"size":1429,"mtime":1633153499498,"results":"62","hashOfConfig":"36"},{"size":527,"mtime":1632711849276,"results":"63","hashOfConfig":"36"},{"size":10737,"mtime":1627616481272,"results":"64","hashOfConfig":"36"},{"size":6177,"mtime":1633633249454,"results":"65","hashOfConfig":"36"},{"size":8954,"mtime":1633773008178,"results":"66","hashOfConfig":"36"},{"size":8841,"mtime":1633633756279,"results":"67","hashOfConfig":"36"},{"size":11065,"mtime":1633369637094,"results":"68","hashOfConfig":"36"},{"size":11800,"mtime":1633774090874,"results":"69","hashOfConfig":"36"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},"r5sb9h",{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"72"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"72"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"72"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"72"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"72"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"72"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"72"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"72"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"72"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"72"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"72"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"72"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"72"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"72"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"72"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"136","messages":"137","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"72"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"72"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"72"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"72"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"152","messages":"153","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"72"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"72"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"F:\\w3bizz\\React\\src\\index.js",[],["160","161"],"F:\\w3bizz\\React\\src\\store.js",["162"],"import { createStore, compose, applyMiddleware } from 'redux';\nimport logger from 'redux-logger';\nimport thunk from 'redux-thunk';\nimport { throttle } from 'lodash';\nimport rootReducer from './redux/rootReducer'\nimport { loadState, saveState } from './services/localStorage';\n\n\n \nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nexport default function configureStore(initialState = {}, history) {\n    const persistedState = loadState();\n    const store = createStore(\n        rootReducer,\n        persistedState,\n        composeEnhancer(applyMiddleware(thunk))\n    )\n    \n    store.subscribe(\n        throttle(() => {\n            saveState(store.getState());\n        }, 1000)\n    );\n\n    return store;\n}","F:\\w3bizz\\React\\src\\App.js",[],"F:\\w3bizz\\React\\src\\services\\localStorage.js",[],"F:\\w3bizz\\React\\src\\services\\ProtectedRoute.js",[],"F:\\w3bizz\\React\\src\\redux\\rootReducer.js",[],"F:\\w3bizz\\React\\src\\component\\about\\Register.js",["163","164","165"],"import React from \"react\";\nimport { Formik, Field, Form, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\nimport { Link, Redirect, withRouter } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\nimport { registerApi } from \"../../services/apiFunction\";\nimport { Typography } from \"@material-ui/core\";\nimport LottieIcon from '../lottieIcons/LottieIco';\nimport loadingAnimationData from '../lottieIcons/loadingV2.json'\n\nclass Register extends React.Component {\n  state = {\n    data: \"\",\n    loader: false,\n    isSign: false,\n  };\n  render() {\n    if (this.state.isSign === true) {\n      return <Redirect to=\"/\" />;\n    }\n    return this.state.loader == false ? (\n      <>\n        <br />\n        <div className=\"row col-lg-10 mx-auto mt-5\">\n          <div className=\"col-sm-6 col-lg-6\">\n            <Formik\n              initialValues={{\n                fname: \"\",\n                lname: \"\",\n                email: \"\",\n                password: \"\",\n              }}\n              validationSchema={Yup.object().shape({\n                fname: Yup.string().required(\"First Name is required\"),\n                lname: Yup.string().required(\"Last Name is required\"),\n                email: Yup.string()\n                  .email(\"Email is invalid\")\n                  .required(\"Email is required\"),\n                password: Yup.string()\n                  .required(\"Password is required\")\n                  .matches(\n                    /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/,\n                    \"Must Contain 8 Characters, One Uppercase, One Lowercase, One Number and one special case Character\"\n                  ),\n              })}\n              onSubmit={async (fields) => {\n                this.setState({ loader: true });\n                const response = await registerApi(fields);\n                if (response.data.success == \"1\") {\n                  toast.success(\"Registration Successfully\");\n                  this.props.history.push(\"/\");\n                  this.setState({ loader: false });\n                } else {\n                  this.setState({ loader: false });\n                  toast.error(\"Registration Unsuccessfully\");\n                }\n              }}\n              render={({ errors, touched, setFieldValue }) => (\n                <div className=\"card card-Width\">\n                  <div className=\"card-body\">\n                    <Form>\n                      <div className=\"form-group\">\n                        <label htmlFor=\"First Name\">First Name</label>\n                        <Field\n                          name=\"fname\"\n                          type=\"text\"\n                          className={\n                            \"form-control\" +\n                            (errors.fname && touched.fname ? \" is-invalid\" : \"\")\n                          }\n                        />\n                        <ErrorMessage\n                          name=\"fname\"\n                          component=\"div\"\n                          className=\"invalid-feedback\"\n                        />\n                      </div>\n                      <div className=\"form-group\">\n                        <label htmlFor=\"Last Name\">Last Name</label>\n                        <Field\n                          name=\"lname\"\n                          type=\"text\"\n                          className={\n                            \"form-control\" +\n                            (errors.lname && touched.lname ? \" is-invalid\" : \"\")\n                          }\n                        />\n                        <ErrorMessage\n                          name=\"lname\"\n                          component=\"div\"\n                          className=\"invalid-feedback\"\n                        />\n                      </div>\n                      <div className=\"form-group\">\n                        <label htmlFor=\"email\">Email</label>\n                        <Field\n                          name=\"email\"\n                          type=\"text\"\n                          className={\n                            \"form-control\" +\n                            (errors.email && touched.email ? \" is-invalid\" : \"\")\n                          }\n                        />\n                        <ErrorMessage\n                          name=\"email\"\n                          component=\"div\"\n                          className=\"invalid-feedback\"\n                        />\n                      </div>\n                      <div className=\"form-group\">\n                        <label htmlFor=\"password\">Password</label>\n                        <Field\n                          name=\"password\"\n                          type=\"password\"\n                          className={\n                            \"form-control\" +\n                            (errors.password && touched.password\n                              ? \" is-invalid\"\n                              : \"\")\n                          }\n                        />\n                        <ErrorMessage\n                          name=\"password\"\n                          component=\"div\"\n                          className=\"invalid-feedback\"\n                        />\n                      </div>\n                      <div className=\"form-group\">\n                        <button type=\"submit\" className=\"btn btn-info mr-2\">\n                          Register\n                        </button>\n                        &nbsp;\n                        <button\n                          type=\"reset\"\n                          className=\"btn btn-secondary\"\n                          onClick={this.ResetFunction}\n                        >\n                          Reset\n                        </button>\n                      </div>\n                      <Typography variant=\"body1\">\n                        Already Have an Account? <Link to=\"/\">Login</Link>\n                      </Typography>\n                    </Form>\n                  </div>\n                </div>\n              )}\n            />\n          </div>\n\n          <div className=\"col-sm-6 col-lg-6\">\n            <img src=\"/register.jpeg\" className=\"img-fluid\" />\n          </div>\n        </div>\n      </>\n    ) : (\n      <div\n        style={{ display: \"flex\", justifyContent: \"center\", marginTop: \"20%\" }}\n      >\n        <LottieIcon\n          animationData={loadingAnimationData}\n          type=\"Running\"\n          height={50}\n          width={50}\n        />\n      </div>\n    );\n  }\n}\n\nexport default withRouter(Register);\n","F:\\w3bizz\\React\\src\\component\\about\\Login.js",["166","167","168","169"],"import React, { Component } from 'react';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport ReCAPTCHA from \"react-google-recaptcha\"\nimport { Link, Redirect, withRouter } from 'react-router-dom'\nimport { loginUserError, loginUserSuccess } from '../../redux/actions/LoginActions'\nimport { connect } from 'react-redux';\nimport { postLogin } from '../../services/apiFunction'\nimport { CircularProgress, Typography } from '@material-ui/core'\nimport '../App.css'\n\nclass Login extends Component {\n    state = {\n        loginError: false,\n        loader: false,\n        loginMessage: \"Username or Paasword is Incorrect\",\n        token: JSON.parse(localStorage.getItem('login'))\n    }\n\n    onSubmit = async (fields) => {\n        delete fields.recap;\n        this.captcha.reset();\n        this.setState({ loader: true })\n        await postLogin(fields)\n            .then((res) => {\n                if (res.data.success == 1) {\n                    this.setState({ loginError: false })\n                    let user1 = res.data.data\n                    this.props.loginUsersSuccess(user1)\n                    localStorage.setItem('login', JSON.stringify(true))\n                    localStorage.setItem('token', (res.data.token))\n                    if (user1.type == \"DEFAULT\") {\n                        this.props.history.push('/recentWebTemplate')\n                    }\n                    else{\n                        this.props.history.push('/savedWebTemplate')\n                    }\n                }\n                else {\n                    this.setState({ loginError: true })\n                    this.setState({ loader: false })\n                }\n            })\n            .catch(err => { console.log(err) })\n    }\n\n    // loginUnsuccessFul() {\n    //     console.log(this.props.data)\n    //     if (this.props.data.length===0) {\n    //         console.log(\"true\")\n    //         this.setState({ loginError: true })\n    //         return \"Error\"\n    //     }\n    //     else {\n    //         this.setState({ loginError: false })\n    //         return \"Success\"\n    //     }\n    // }\n    render() {\n        return (\n            <>\n                <div className=\"row col-lg-10 mx-auto mt-5\">\n                    <div className=\"col-sm-6 col-lg-6\" >\n                        <img src=\"/login.jpeg\" className=\"img-fluid\" />\n                    </div>\n                    <div className=\"col-sm-6 col-lg-6\" >\n                        <Formik\n                            initialValues={{\n                                email: '',\n                                password: '',\n                                recap: \"\",\n                            }}\n                            validationSchema={Yup.object().shape({\n                                email: Yup.string()\n                                    .email('Email is invalid')\n                                    .required('Email is required'),\n                                password: Yup.string()\n                                    .min(6, 'Password must be at least 6 characters')\n                                    .required('Password is required'),\n                                recap: Yup.string().required('I am Not Robot').nullable()\n                            })}\n                            onSubmit={this.onSubmit}\n                            render={({ errors, status, touched, setFieldValue }) => (\n                                <div className=\"card\" style={{ width: \"90%\" }}>\n                                    <div className=\"card-body card-Width\" >\n                                        <Form>\n                                            <div className=\"form-group\">\n                                                <label htmlFor=\"email\">Email</label>\n                                                <Field name=\"email\" type=\"text\" className={'form-control' + (errors.email && touched.email ? ' is-invalid' : '')} />\n                                                <ErrorMessage name=\"email\" component=\"div\" className=\"invalid-feedback\" />\n                                            </div>\n                                            <div className=\"form-group\">\n                                                <label htmlFor=\"password\">Password</label>\n                                                <Field name=\"password\" type=\"password\" className={'form-control' + (errors.password && touched.password ? ' is-invalid' : '')} />\n                                                <ErrorMessage name=\"password\" component=\"div\" className=\"invalid-feedback\" />\n                                            </div>\n                                            <div className=\"form-group\"\n                                                style={{ transform: \"scale(0.77)\", webkiTransform: \"scale(0.77)\", transformOrigin: \"0 0\", webkitTransformOrigin: \"0 0\" }}\n                                            >\n                                                <ReCAPTCHA name=\"recap\"\n                                                    siz=\"compact\"\n                                                    sitekey=\"6Le_5kgcAAAAANIwiif5bGdTIxqLTEF1Z3mL12ue\"\n                                                    onChange={(value) => setFieldValue('recap', value)}\n                                                    ref={e => (this.captcha = e)}\n                                                    className={(errors.recap && touched.recap ? ' is-invalid' : '')}\n                                                />\n                                                <ErrorMessage name=\"recap\" component=\"div\" className=\"invalid-feedback\" />\n                                            </div>\n                                            <div className=\"form-group\">\n                                                {this.state.loader ?\n                                                    <CircularProgress /> :\n                                                    <button style={{ borderRadius: \"6px\", backgroundColor: \"#1DABB8\" }} type=\"submit\" className=\"btn mr-2 text-white\">Login</button>\n                                                }\n                                                &nbsp;\n                                                <button type=\"reset\" className=\"btn text-white\" style={{ borderRadius: \"6px\", backgroundColor: \"#1DABB8\" }}\n                                                    onClick={() => this.captcha.reset()}\n                                                >Reset</button>\n                                            </div>\n                                            <div className=\"form-group\">\n                                                <Link to=\"/forgotpass\" className=\"btn text-white\" style={{ borderRadius: \"6px\", backgroundColor: \"#1DABB8\" }}>Forgot Password?</Link>\n                                            </div>\n                                            <div>\n                                                {this.state.loginError === true && <p style={{ \"color\": \"red\" }}>{this.state.loginMessage}</p>}\n                                            </div>\n                                            <Typography variant=\"body1\">\n                                                Don't have an account?{' '}\n                                                <Link to=\"/register\">\n                                                    Sign up\n                                                </Link>\n                                            </Typography>\n                                        </Form>\n                                        <br />\n                                    </div>\n                                </div>\n                            )}\n                        />\n                    </div>\n                </div>\n            </>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        error: state.login && state.login.error,\n        data: state.login && state.login.data\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        loginUsersSuccess: (data) => dispatch(loginUserSuccess(data)),\n        loginUsersError: (data) => dispatch(loginUserError(data))\n    }\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Login));","F:\\w3bizz\\React\\src\\component\\about\\ForgotPassword.js",["170","171","172","173"],"import React, { Component } from 'react';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { withRouter } from 'react-router-dom'\nimport { loginUserError, loginUserSuccess } from '../../redux/actions/LoginActions'\nimport { connect } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { sendEmailOTP, sendVerifyOTP, patchApi } from '../../services/apiFunction'\nimport { CircularProgress } from '@material-ui/core'\nimport '../App.css'\n\nclass ForgotPassword extends Component {\n    state = {\n        otpDisplay: false,\n        loader: false,\n        passwordDisplay:false,\n        otpError:false,\n        passwordError:false,\n        email:'',\n    }\n\n    onOTPSubmit = async (fields) => {\n      const obj = {}\n        obj.email = fields.email\n        obj.otp = fields.otp\n        const response = await sendVerifyOTP(obj)\n        if(response.STATUS == \"SUCCESS\"){\n          this.setState({email:fields.email})\n          this.setState({passwordDisplay:true})\n        }else{\n          this.setState({otpError:true})\n        }\n    }\n\n    onEmailSubmit = async (fields) => {\n      const obj = {}\n      obj.email = fields.email\n      const response = await sendEmailOTP(obj)\n      if(response.STATUS == \"SUCCESS\"){\n        this.setState({email:fields.email})\n        this.setState({otpDisplay:true})\n      }else{\n        this.setState({passwordError:true})\n      }\n  }\n\n  onPasswordSubmit = async (fields) => {\n    \n    const obj = {}\n    obj.email = fields.email\n    obj.password = fields.password\n    const response = await patchApi(obj)\n    if(response.STATUS == \"SUCCESS\"){\n      this.props.history.push('/')\n      this.setState({email:fields.email})\n    }else{\n    toast.error(\"Something Went Wrong\")\n    }\n}\n    render() {\n        return (\n            <>\n                <div className=\"row col-lg-10 mx-auto mt-5\">\n                    <div className=\"col-lg-6\">\n                    <img src=\"/login.jpeg\" className=\"img-fluid\"/>\n                    </div>\n                    <div className=\"col-lg-6 col-xs-12\">\n                    {!this.state.otpDisplay && !this.state.passwordDisplay &&\n                      <Formik\n                            initialValues={{\n                                email: ''\n                            }}\n                            validationSchema={Yup.object().shape({\n                                email: Yup.string()\n                                    .email('Email is invalid')\n                                    .required('Email is required')\n                            })}\n                            onSubmit={this.onEmailSubmit}\n                            render={({ errors, status, touched, setFieldValue }) => (\n                                <div className=\"card\" style={{ width: \"90%\" }}>\n                                    <div className=\"card-body container\" >\n                                        <Form>\n                                            <div className=\"form-group\">\n                                                <label htmlFor=\"email\">Email</label>\n                                                <Field name=\"email\" type=\"text\" className={'form-control' + (errors.email && touched.email ? ' is-invalid' : '')} />\n                                                <ErrorMessage name=\"email\" component=\"div\" className=\"invalid-feedback\" />\n                                            </div>\n                                            <div className=\"form-group\">\n                                                {this.state.loader ?\n                                                    <CircularProgress /> :\n                                                    <button style={{ borderRadius: \"6px\", backgroundColor: \"#1DABB8\" }} type=\"submit\" className=\"btn mr-2 text-white\">Submit</button>\n                                                }\n                                            </div>\n                                        </Form>\n                                        <br />\n                                    </div>\n                                </div>\n                            )}\n                        />}\n                        {this.state.otpDisplay && !this.state.passwordDisplay &&\n                        <Formik\n                            initialValues={{\n                                email: this.state.email,\n                                otp:''\n                            }}\n                            validationSchema={Yup.object().shape({\n                                otp: Yup.string().required('Please Enter OTP')\n                            })}\n                            onSubmit={this.onOTPSubmit}\n                            render={({ errors, status, touched, setFieldValue }) => (\n                                <div className=\"card\" style={{ width: \"90%\" }}>\n                                    <div className=\"card-body container\" >\n                                        <Form>\n                                            <div className=\"form-group\">\n                                                <label htmlFor=\"email\">Email</label>\n                                                <Field name=\"email\" type=\"text\" className={'form-control' + (errors.email && touched.email ? ' is-invalid' : '')} />\n                                                <ErrorMessage name=\"email\" component=\"div\" className=\"invalid-feedback\" />\n                                            </div>\n                                            <div className=\"form-group\">\n                                                <label htmlFor=\"otp\">Enter OTP</label>\n                                                <Field name=\"otp\" type=\"text\" className={'form-control' + (errors.otp && touched.otp ? ' is-invalid' : '')} />\n                                                <ErrorMessage name=\"otp\" component=\"div\" className=\"invalid-feedback\" />\n                                            </div>\n                                            <div className=\"form-group\">\n                                                {this.state.loader ?\n                                                    <CircularProgress /> :\n                                                    <button style={{ borderRadius: \"6px\", backgroundColor: \"#1DABB8\" }} type=\"submit\" className=\"btn mr-2 text-white\">Submit</button>\n                                                }\n                                            </div>\n                                        </Form>\n                                        {this.state.otpError &&<div style={{color:\"darkred\"}}>Please Enter Correct OTP</div>}\n                                        <br />\n                                    </div>\n                                </div>\n                            )}\n                        />\n                        }\n                        {this.state.passwordDisplay && this.state.otpDisplay &&\n                          <Formik\n                            initialValues={{\n                                email: this.state.email,\n                                password: '',\n                            }}\n                            validationSchema={Yup.object().shape({\n                                password: Yup.string()\n                                    .min(6, 'Password must be at least 6 characters')\n                                    .required('Password is required')\n                            })}\n                            onSubmit={this.onPasswordSubmit}\n                            render={({ errors, status, touched, setFieldValue }) => (\n                                <div className=\"card\" style={{ width: \"90%\" }}>\n                                    <div className=\"card-body container\" >\n                                        <Form>\n                                            <div className=\"form-group\">\n                                                <label htmlFor=\"password\">Password</label>\n                                                <Field name=\"password\" type=\"password\" className={'form-control' + (errors.password && touched.password ? ' is-invalid' : '')} />\n                                                <ErrorMessage name=\"password\" component=\"div\" className=\"invalid-feedback\" />\n                                            </div>\n                                            <div className=\"form-group\">\n                                                {this.state.loader ?\n                                                    <CircularProgress /> :\n                                                    <button style={{ borderRadius: \"6px\", backgroundColor: \"#1DABB8\" }} type=\"submit\" className=\"btn mr-2 text-white\">Submit</button>\n                                                }\n                                            </div>\n                                        </Form>\n                                        <br />\n                                        {this.state.passwordError &&<div style={{color:\"darkred\"}}>Please Enter Correct Password</div>}\n                                    </div>\n                                </div>\n                            )}\n                        />\n                        }\n                    </div>\n                </div>\n            </>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        error: state.login && state.login.error,\n        data: state.login && state.login.data\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        loginUsersSuccess: (data) => dispatch(loginUserSuccess(data)),\n        loginUsersError: (data) => dispatch(loginUserError(data))\n    }\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(ForgotPassword));","F:\\w3bizz\\React\\src\\component\\template\\UserTemplate.js",["174","175"],"import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { setUserTemplate, setDefaultPages, publishedTemplates } from '../../redux/actions/SetTemplateActions'\nimport UserTemplateById from './UserTemplateById';\nimport { ToastContainer } from 'react-toastify';\nimport AdminLayout from '../AdminLayout';\nimport { getTemplate } from '../../services/apiFunction';\nimport TemplateModal from '../modal/Template'\nimport LottieIcon from '../lottieIcons/LottieIco';\nimport loadingAnimationData from '../lottieIcons/loadingV2.json'\n\nclass UserTemplate extends Component {\n    state = {\n        showModal: false,\n        loader: true,\n        file: '',\n        string: window.location.pathname.split(\"/\")[1],\n    }\n\n    async componentDidMount() {\n        const response = await getTemplate(this.props.user.username)\n        if (response.STATUS == \"SUCCESS\") {\n            this.props.createUserTemplate(response.USER_TEMPLATE)\n            this.props.defaultPages(response.DEFAULT_PAGES)\n            this.props.publishedTemplates(response.PUBLISHED)\n            this.setState({ loader: false })\n        }\n\n    }\n\n    toggleLoader = () => {\n        this.setState({loader:!this.state.loader})\n    }\n\n    toggle = () => {\n        this.setState({\n            showModal: !this.state.showModal,\n        });\n    }\n\n    render() {\n        const { loader, file } = this.state\n        return loader ?\n            (\n                <div style={{ display: 'flex', justifyContent: 'center', marginTop:'20%' }}>\n                    <LottieIcon animationData={loadingAnimationData} type=\"Running\" height={50} width={50}/>\n                </div>\n            ) :\n            (\n                <>\n                    <AdminLayout title=\"All Templates\">\n                        <div style={{ boxSizing: \"border-box\", width: \"100%\", height: \"4em\" }}>\n                            <button style={{ float: \"right\", borderRadius: \"6px\", backgroundColor: \"#1DABB8\" }} className=\"btn text-white\" onClick={() => this.setState({ showModal: true })}>Create Template</button>\n                        </div>\n                        <br />\n                        <UserTemplateById toggle={this.toggle}/>\n                        <TemplateModal modal={this.state.showModal} loader={this.toggleLoader} toggle={this.toggle} title={\"Create Template\"} Add={true} data={\"\"} />\n                    </AdminLayout>\n                    <ToastContainer />\n                </>\n            );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        user: state.login && state.login.data\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        createUserTemplate: (data) => dispatch(setUserTemplate(data)),\n        defaultPages: (data) => dispatch(setDefaultPages(data)),\n        publishedTemplates: (data) => dispatch(publishedTemplates(data))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserTemplate);\n","F:\\w3bizz\\React\\src\\component\\profile\\ProfileUpdate.js",["176","177","178","179","180","181","182","183","184","185","186","187","188"],"import React, { Component } from \"react\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport CheckIcon from \"@material-ui/icons/Check\";\nimport ClearIcon from \"@material-ui/icons/Clear\";\nimport { Formik, Field, Form, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\nimport Modal from \"react-modal\";\nimport { connect } from \"react-redux\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport { getSlots, patchApi, updateSlots } from \"../../services/apiFunction\";\nimport { loginUserSuccess } from \"../../redux/actions/LoginActions\";\nimport AdminLayout from \"../AdminLayout\";\nimport Accordion from \"@material-ui/core/Accordion\";\nimport AccordionSummary from \"@material-ui/core/AccordionSummary\";\nimport AccordionDetails from \"@material-ui/core/AccordionDetails\";\nimport Typography from \"@material-ui/core/Typography\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport SlotModal from \"../modal/SlotModal\";\nimport LottieIcon from \"../lottieIcons/LottieIco\";\nimport loadingAnimationData from \"../lottieIcons/loadingV2.json\";\nimport { withRouter } from \"react-router-dom\";\nimport moment from \"moment\";\nimport { MDBContainer, MDBModal, MDBModalHeader, MDBModalBody } from \"mdbreact\";\nimport StripeApp from \"../payment/StripeApp\";\n\nclass ProfileUpdate extends Component {\n  state = {\n    country: \"\",\n    region: \"\",\n    data: this.props.user,\n    showModal: false,\n    submitCount: 0,\n    slotDetails: [],\n    showModalPayDetails: false,\n    loader: false,\n    slotDetailsExpired: \"\",\n    renewSlots: [],\n    stripeModal: false,\n    planValue: \"\",\n    slotNumber: 0,\n  };\n\n  AddSlotsModal = async (e, value) => {\n    e.preventDefault();\n    this.togglePay();\n  };\n\n  toggleLoader = () => {\n    this.setState({ loader: !this.state.loader });\n  };\n\n  togglePay = () => {\n    this.setState({\n      showModalPayDetails: !this.state.showModalPayDetails,\n    });\n  };\n\n  toggle = () => {\n    this.setState({\n      stripeModal: !this.state.stripeModal,\n    });\n  };\n\n  goToTemplate = (event, value) => {\n    if (this.props.published && this.props.published.length > 0) {\n      let slotPublished = this.props.published.find(\n        (val) => val.slot_id == value.slot_id\n      );\n      if (slotPublished) {\n        let tempValue = this.props.userTemplate.find(\n          (val) => val.id == slotPublished.template_id\n        );\n        this.props.history.push({\n          pathname: \"webTemplate\",\n          state: { template: tempValue, type: \"USER\" },\n        });\n      } else {\n        toast.error(\"No Template is published at this Slot\");\n      }\n    } else {\n      toast.error(\"No Slot is Purchased By You\");\n    }\n  };\n\n  RenewSlots = (e) => {\n    if (this.state.renewSlots.length > 0) {\n      this.setState({ planValue: 699 });\n      this.toggle();\n    } else {\n      toast.error(\"Please select some slot to be renewed\");\n    }\n  };\n\n  editText(e, value, index) {\n    e.preventDefault();\n    let slotDetails = [...this.state.slotDetails];\n    let slotDetail = { ...slotDetails[index] };\n    slotDetail.isInput = true;\n    slotDetails[index] = slotDetail;\n    this.setState({ slotDetails });\n    this.setState({ publish_name: value.publish_name });\n  }\n\n  getSlotDetails = async () => {\n    let response = await getSlots(this.props.user.username);\n    if (response.STATUS) {\n      let list = [];\n      let date = moment().format(\"YYYY-MM-DD\");\n      let expiredList = [];\n      response.DATA.map((val) => {\n        if (date <= val.expiry_date || val.published == \"FALSE\") {\n          val.isInput = false;\n          list.push(val);\n        } else {\n          expiredList.push(val);\n        }\n      });\n\n      this.setState({ slotDetails: list, slotDetailsExpired: expiredList });\n    }\n  };\n\n  onCancel = (e, value, index) => {\n    e.preventDefault();\n    let slotDetails = [...this.state.slotDetails];\n    let slotDetail = { ...slotDetails[index] };\n    slotDetail.isInput = false;\n    slotDetails[index] = slotDetail;\n    this.setState({ slotDetails });\n    this.setState({ publish_name: \" \" });\n  };\n\n  onUpdate = async (e, value) => {\n    e.preventDefault();\n    if (this.state.publish_name != \"\") {\n      let obj = {};\n      obj.username = this.props.user.username;\n      obj.slot_id = value.slot_id;\n      obj.publish_name = this.state.publish_name;\n      const response = await updateSlots(obj);\n      if (response.STATUS) {\n        var list = [];\n        this.state.slotDetails.forEach((val) => {\n          if (val.slot_id == value.slot_id) {\n            val.publish_name = this.state.publish_name;\n            val.isInput = false;\n            list.push(val);\n          } else {\n            list.push(val);\n          }\n        });\n        toast.success(\"Publish Name Updated Successfully\");\n        this.setState({ slotDetails: list });\n        this.setState({ publish_name: \"\" });\n      }\n    } else {\n      toast.error(\"Please Enter Some Value\");\n    }\n  };\n\n  componentDidMount() {\n    this.getSlotDetails();\n  }\n\n  onChangeElement = (e, value) => {\n    if (e.target.checked == true) {\n      this.setState({ renewSlots: [...this.state.renewSlots, value] });\n      this.setState({ slotNumber: this.state.slotNumber + 1 });\n    } else {\n      let filterArr = this.state.renewSlots.filter(\n        (val) => val.slot_id != value.slot_id\n      );\n      this.setState({ renewSlots: filterArr });\n      this.setState({ slotNumber: this.state.slotNumber - 1 });\n    }\n  };\n\n  onSubmit = async (fields) => {\n    fields.id = this.state.data.username;\n    await patchApi(fields.id, fields).then((res) => {\n      let obj = {};\n      obj = this.props.user;\n      obj.fname = fields.fname;\n      obj.lname = fields.lname;\n      obj.country = fields.country;\n      obj.state = fields.state;\n      obj.city = fields.city;\n      obj.company = fields.company;\n      obj.mobile = fields.mobile;\n      obj.email = fields.email;\n      obj.address = fields.address;\n      obj.pincode = fields.pincode;\n      this.props.loginUsersSuccess(obj);\n    });\n  };\n\n  render() {\n    const customStyles = {\n      content: {\n        top: \"31%\",\n        left: \"75%\",\n        right: \"0%\",\n        bottom: \"auto\",\n        transform: \"translate(-1%, -50%)\",\n      },\n    };\n\n    Modal.setAppElement(\"*\");\n    const { country, region, data } = this.state;\n    return this.state.loader ? (\n      <>\n        <LottieIcon\n          Play={true}\n          animationData={loadingAnimationData}\n          height={50}\n          width={50}\n          pause={this.state.copyState}\n        />\n      </>\n    ) : (\n      <>\n        <AdminLayout title=\"Update Profile\">\n          <ToastContainer />\n          <Accordion>\n            <AccordionSummary\n              expandIcon={<ExpandMoreIcon />}\n              aria-controls=\"panel1a-content\"\n              id=\"panel1a-header\"\n            >\n              <Typography>Profile Details</Typography>\n            </AccordionSummary>\n            <AccordionDetails>\n              <div style={{ width: \"90%\" }} className=\"mx-auto\">\n                <div className=\"card\">\n                  <div className=\"card-body\">\n                    <Formik\n                      initialValues={{\n                        fname: data.fname,\n                        lname: data.lname,\n                        country: data.country,\n                        state: data.state,\n                        city: data.city,\n                        company: data.company,\n                        mobile: data.mobile,\n                        email: data.email,\n                        address: data.address,\n                        pincode: data.pincode,\n                      }}\n                      validationSchema={Yup.object().shape({\n                        fname: Yup.string().required(\"First Name is required\"),\n                        lname: Yup.string().required(\"Last Name is required\"),\n                        mobile: Yup.string()\n                          .required(\"Mobile Number is Required\")\n                          .matches(/^[0-9]+$/, \"Must be only digits\")\n                          .min(10, \"Must be exactly 10 digits\")\n                          .max(10, \"Must be exactly 10 digits\"),\n                        country: Yup.string().required(\"Please Select Country\"),\n                        state: Yup.string().required(\"Please Select State\"),\n                        city: Yup.string().required(\"Please enter City\"),\n                        address: Yup.string(),\n                        email: Yup.string()\n                          .email(\"Email is invalid\")\n                          .required(\"Email is required\"),\n                      })}\n                      onSubmit={this.onSubmit}\n                      render={({ errors, touched, setFieldValue }) => (\n                        <div className=\"panel panel-default\">\n                          <div className=\"panel-body\">\n                            <Form>\n                              <div className=\"form-group\">\n                                <label htmlFor=\"FName\">First Name</label>\n                                <Field\n                                  name=\"fname\"\n                                  type=\"text\"\n                                  className={\n                                    \"form-control\" +\n                                    (errors.fname && touched.fname\n                                      ? \" is-invalid\"\n                                      : \"\")\n                                  }\n                                />\n                                <ErrorMessage\n                                  name=\"fname\"\n                                  component=\"div\"\n                                  className=\"invalid-feedback\"\n                                />\n                              </div>\n                              <div className=\"form-group\">\n                                <label htmlFor=\"LName\">Last Name</label>\n                                <Field\n                                  name=\"lname\"\n                                  type=\"text\"\n                                  className={\n                                    \"form-control\" +\n                                    (errors.lname && touched.lname\n                                      ? \" is-invalid\"\n                                      : \"\")\n                                  }\n                                />\n                                <ErrorMessage\n                                  name=\"lname\"\n                                  component=\"div\"\n                                  className=\"invalid-feedback\"\n                                />\n                              </div>\n                              <div className=\"form-group\">\n                                <label htmlFor=\"mobile\">Mobile</label>\n                                <Field\n                                  name=\"mobile\"\n                                  type=\"text\"\n                                  className={\n                                    \"form-control\" +\n                                    (errors.mobile && touched.mobile\n                                      ? \" is-invalid\"\n                                      : \"\")\n                                  }\n                                />\n                                <ErrorMessage\n                                  name=\"mobile\"\n                                  component=\"div\"\n                                  className=\"invalid-feedback\"\n                                />\n                              </div>\n                              <div className=\"form-group\">\n                                <label htmlFor=\"email\">Email</label>\n                                <Field\n                                  name=\"email\"\n                                  type=\"text\"\n                                  className={\n                                    \"form-control\" +\n                                    (errors.email && touched.email\n                                      ? \" is-invalid\"\n                                      : \"\")\n                                  }\n                                />\n                                <ErrorMessage\n                                  name=\"email\"\n                                  component=\"div\"\n                                  className=\"invalid-feedback\"\n                                />\n                              </div>\n                              <div className=\"form-group\">\n                                <label htmlFor=\"company\">Company</label>\n                                <Field\n                                  name=\"company\"\n                                  type=\"text\"\n                                  className={\n                                    \"form-control\" +\n                                    (errors.company && touched.company\n                                      ? \" is-invalid\"\n                                      : \"\")\n                                  }\n                                />\n                                <ErrorMessage\n                                  name=\"company\"\n                                  component=\"div\"\n                                  className=\"invalid-feedback\"\n                                />\n                              </div>\n                              <div className=\"form-group\">\n                                <label htmlFor=\"address\">Address</label>\n                                <Field\n                                  name=\"address\"\n                                  type=\"textarea\"\n                                  className={\n                                    \"form-control\" +\n                                    (errors.address && touched.address\n                                      ? \" is-invalid\"\n                                      : \"\")\n                                  }\n                                />\n                                <ErrorMessage\n                                  name=\"address\"\n                                  component=\"div\"\n                                  className=\"invalid-feedback\"\n                                />\n                              </div>\n                              <div className=\"form-group\">\n                                <label htmlFor=\"City\">City</label>\n                                <Field\n                                  name=\"city\"\n                                  type=\"text\"\n                                  className={\n                                    \"form-control\" +\n                                    (errors.city && touched.city\n                                      ? \" is-invalid\"\n                                      : \"\")\n                                  }\n                                />\n                                <ErrorMessage\n                                  name=\"city\"\n                                  component=\"div\"\n                                  className=\"invalid-feedback\"\n                                />\n                              </div>\n                              <div className=\"form-group\">\n                                <label htmlFor=\"state\">State</label>\n                                <Field\n                                  name=\"state\"\n                                  type=\"text\"\n                                  className={\n                                    \"form-control\" +\n                                    (errors.state && touched.state\n                                      ? \" is-invalid\"\n                                      : \"\")\n                                  }\n                                />\n                                <ErrorMessage\n                                  name=\"state\"\n                                  component=\"div\"\n                                  className=\"invalid-feedback\"\n                                />\n                              </div>\n                              <div className=\"form-group\">\n                                <label htmlFor=\"country\">Country</label>\n                                <Field\n                                  name=\"country\"\n                                  type=\"text\"\n                                  className={\n                                    \"form-control\" +\n                                    (errors.country && touched.country\n                                      ? \" is-invalid\"\n                                      : \"\")\n                                  }\n                                />\n                                <ErrorMessage\n                                  name=\"country\"\n                                  component=\"div\"\n                                  className=\"invalid-feedback\"\n                                />\n                              </div>\n                              <div className=\"form-group\">\n                                <label htmlFor=\"pincode\">PinCode</label>\n                                <Field\n                                  name=\"pincode\"\n                                  type=\"text\"\n                                  className={\n                                    \"form-control\" +\n                                    (errors.pincode && touched.pincode\n                                      ? \" is-invalid\"\n                                      : \"\")\n                                  }\n                                />\n                              </div>\n                              <div className=\"form-group\">\n                                <button\n                                  type=\"submit\"\n                                  className=\"btn btn-primary mr-2\"\n                                >\n                                  Update\n                                </button>\n                              </div>\n                            </Form>\n                          </div>\n                        </div>\n                      )}\n                    />\n                  </div>\n                </div>\n              </div>\n            </AccordionDetails>\n          </Accordion>\n          <br />\n          <Accordion>\n            <AccordionSummary\n              expandIcon={<ExpandMoreIcon />}\n              aria-controls=\"panel1a-content\"\n              id=\"panel1a-header\"\n            >\n              <Typography>Prefrencences</Typography>\n            </AccordionSummary>\n            <AccordionDetails>\n              <label>\n                <input\n                  type=\"checkbox\"\n                  defaultChecked={\n                    localStorage.getItem(\"freeEditor\") == \"true\" ? true : false\n                  }\n                  name=\"Prefrence\"\n                  onChange={(e) => {\n                    localStorage.setItem(\"freeEditor\", e.target.checked);\n                  }}\n                />{\" \"}\n                &nbsp;Free Form Editor\n              </label>\n            </AccordionDetails>\n          </Accordion>\n          <br />\n          <Accordion>\n            <AccordionSummary\n              expandIcon={<ExpandMoreIcon />}\n              aria-controls=\"panel1a-content\"\n              id=\"panel1a-header\"\n            >\n              <Typography>Available Slots</Typography>\n            </AccordionSummary>\n            <AccordionDetails>\n              <>\n                <div className=\"col-md-10\">\n                  {this.state.slotDetails.length > 0 ? (\n                    <>\n                      {this.state.slotDetails.map((value, index) => (\n                        <div className=\"cardBox\">\n                          {!value.isInput && (\n                            <>\n                              <span style={{ paddingRight: \"15px\" }}>\n                                {value.publish_name}\n                                <span style={{ fontWeight: \"bold\" }}>\n                                  .w3bizz.com\n                                </span>\n                              </span>\n\n                              <EditIcon\n                                fontSize=\"small\"\n                                onClick={(e) => {\n                                  this.editText(e, value, index);\n                                }}\n                              />\n                            </>\n                          )}\n                          {value.isInput && (\n                            <>\n                              <span style={{ paddingRight: \"15px\" }}>\n                                <input\n                                  type=\"text\"\n                                  value={this.state.publish_name}\n                                  onChange={(e) =>\n                                    this.setState({\n                                      publish_name: e.target.value,\n                                    })\n                                  }\n                                />\n                                <span style={{ fontWeight: \"bold\" }}>\n                                  .w3bizz.com\n                                </span>\n                              </span>\n                              <CheckIcon\n                                onClick={(e) => {\n                                  this.onUpdate(e, value);\n                                }}\n                              />\n                              <ClearIcon\n                                onClick={(e) => this.onCancel(e, value, index)}\n                              />\n                            </>\n                          )}\n                          <button\n                            className=\"btn btn-info left-space\"\n                            onClick={(e) => this.goToTemplate(e, value)}\n                          >\n                            Go to Template\n                          </button>\n                          <button\n                            className=\"btn btn-primary left-space\"\n                            onClick={(e) =>\n                              window.open(\n                                \"http://\" + value.publish_name + \".w3bizz.com\",\n                                \"_blank\"\n                              )\n                            }\n                          >\n                            Preview Website\n                          </button>\n                        </div>\n                      ))}\n                    </>\n                  ) : (\n                    <>\n                      <div>7 Days Free Trial Only. Please Book A Slot</div>\n                    </>\n                  )}\n                  <br />\n                  <br />\n                  <div>\n                    <button\n                      className=\"btn btn-success\"\n                      onClick={(e) => this.AddSlotsModal(e)}\n                    >\n                      {this.state.slotDetails.length > 0\n                        ? \"Add More Slots\"\n                        : \"Buy Slots\"}\n                    </button>\n                  </div>\n                </div>\n              </>\n            </AccordionDetails>\n          </Accordion>\n          <br />\n          <Accordion>\n            <AccordionSummary\n              expandIcon={<ExpandMoreIcon />}\n              aria-controls=\"panel1a-content\"\n              id=\"panel1a-header\"\n            >\n              <Typography>Expired Slots</Typography>\n            </AccordionSummary>\n            <AccordionDetails>\n              <>\n                <div className=\"col-md-10\">\n                  {this.state.slotDetailsExpired.length == 0 && (\n                    <h5>No Slots To Be Renewed</h5>\n                  )}\n                  {this.state.slotDetailsExpired.length > 0 && (\n                    <>\n                      <h5>Renew Slot at Rs.699</h5>\n                      <br />\n                      {this.state.slotDetailsExpired.map((value, index) => (\n                        <div className=\"cardBox\">\n                          <input\n                            type=\"checkbox\"\n                            name={value.slot_id + \"name\"}\n                            value={value.slot_id}\n                            onChange={(e) => this.onChangeElement(e, value)}\n                          />\n                          &nbsp;&nbsp;\n                          <span style={{ fontWeight: \"bold\" }}>\n                            {value.publish_name}\n                            <span>.w3bizz.com</span>\n                          </span>\n                        </div>\n                      ))}\n                    </>\n                  )}\n                  <br />\n                  {this.state.slotNumber > 0 && (\n                    <h6>\n                      Total Amount to Be Paid is {this.state.slotNumber * 699}\n                    </h6>\n                  )}\n                  <br />\n                  {this.state.slotDetailsExpired.length > 0 && (\n                    <div>\n                      <button\n                        className=\"btn btn-success\"\n                        onClick={(e) => this.RenewSlots(e)}\n                      >\n                        Renew Slots\n                      </button>\n                    </div>\n                  )}\n                </div>\n              </>\n            </AccordionDetails>\n          </Accordion>\n        </AdminLayout>\n        <MDBContainer>\n          <MDBModal\n            centered\n            isOpen={this.state.stripeModal}\n            toggle={this.toggle}\n          >\n            <MDBModalHeader toggle={this.toggle}>Renew Slots</MDBModalHeader>\n            <MDBModalBody>\n              <StripeApp\n                planValue={this.state.planValue}\n                slotNumber={this.state.slotNumber}\n                username={this.props.user.username}\n                updateData={this.state.slotDetailsExpired}\n                toast={toast}\n              />\n            </MDBModalBody>\n          </MDBModal>\n        </MDBContainer>\n        <SlotModal\n          modal={this.state.showModalPayDetails}\n          toggle={this.togglePay}\n          loader={this.toggleLoader}\n          slotDetails={this.state.slotDetails}\n          expiredSlots={[]}\n        />\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    user: state.login.data,\n    userTemplate: state.template.userTemplate,\n    published: state.template && state.template.published,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    loginUsersSuccess: (data) => dispatch(loginUserSuccess(data)),\n  };\n};\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(withRouter(ProfileUpdate));\n","F:\\w3bizz\\React\\src\\component\\template\\AdminTemplate.js",["189","190","191","192","193"],"import React, { Component } from 'react';\nimport Modal from 'react-modal'\nimport { connect } from 'react-redux';\nimport { setAdminTemplate, setDefaultPages } from '../../redux/actions/SetTemplateActions'\nimport AdminLayout from '../AdminLayout';\nimport { getTemplate } from '../../services/apiFunction';\nimport AdminTemplateById from './AdminTemplateById';\nimport LottieIcon from '../lottieIcons/LottieIco';\nimport loadingAnimationData from '../lottieIcons/loadingV2.json'\nimport TemplateModal from '../modal/Template'\nimport PageModal from '../modal/Page'\n\nclass AdminTemplate extends Component {\n    state = {\n        showModal: false,\n        loader: true,\n        isPaused: true,\n        isStopped: true,\n        showPageModal: false,\n    }\n\n\n    async componentDidMount() {\n        const response = await getTemplate(this.props.user.username)\n        if (response.STATUS == \"SUCCESS\") {\n            let list = []\n            if (response.DEFAULT_TEMPLATE && response.DEFAULT_TEMPLATE.length > 0) {\n                response.DEFAULT_TEMPLATE.map((val) => {\n                    if (val.is_hidden == \"FALSE\") {\n                        list.push(val)\n                    }\n                })\n            }\n            if (this.props.user.type == \"ADMIN\") {\n                this.props.AdminTemplate(response.DEFAULT_TEMPLATE)\n            }else{\n                this.props.AdminTemplate(list)\n            }\n            this.setState({ loader: false })\n        }\n\n    }\n\n    toggleLoader = () => {\n        this.setState({ loader: !this.state.loader })\n    }\n\n    toggle = () => {\n        this.setState({\n            showModal: !this.state.showModal,\n        });\n    }\n\n    togglePage = () => {\n        this.setState({\n            showPageModal: !this.state.showPageModal,\n        });\n    }\n\n    render() {\n        Modal.setAppElement('*')\n        const { user } = this.props;\n        const { loader } = this.state\n        return loader ?\n            (\n                <>\n                    <div style={{ display: 'flex', justifyContent: 'center', paddingTop: \"20%\" }}>\n                        <LottieIcon Play={true} animationData={loadingAnimationData} type=\"Running\" height={50} width={50} />\n                    </div>\n                </>\n            ) :\n            (\n                <>\n                    <AdminLayout title=\"Default Templates\">\n                        <div style={{ boxSizing: \"border-box\", width: \"100%\", height: \"4em\" }}>\n                            {user.type == \"ADMIN\" &&\n                                <>\n                                    <button style={{ float: \"right\", borderRadius: \"6px\", backgroundColor: \"#1DABB8\", marginLeft: \"10px\" }} className=\"btn text-white\" onClick={() => this.setState({ showModal: true })}>Create Template</button>\n                                </>\n                            }\n                        </div>\n                        <br />\n                        <AdminTemplateById loader={this.toggleLoader}/>\n                        <TemplateModal modal={this.state.showModal} loader={this.toggleLoader} toggle={this.toggle} title={\"Create Template\"} Add={true} data={\"\"} type={\"DEFAULT\"} />\n                        <PageModal modal={this.state.showPageModal} loader={this.toggleLoader} toggle={this.togglePage} title={\"Add Default Page\"} add={true} editData={\"\"} type={\"DEFAULT\"} />\n                    </AdminLayout>\n                </>\n            );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        user: state.login && state.login.data,\n        defaultPages: state.template && state.template.defaultPages\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        AdminTemplate: (data) => dispatch(setAdminTemplate(data)),\n        defaultPages: (data) => dispatch(setDefaultPages(data))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AdminTemplate);\n","F:\\w3bizz\\React\\src\\component\\pages\\DefaultPages.js",["194","195","196"],"import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { setUserTemplate, setAdminTemplate, setDefaultPages } from '../../redux/actions/SetTemplateActions'\r\nimport AdminLayout from '../AdminLayout';\r\nimport { getTemplate, mergePage } from '../../services/apiFunction';\r\nimport '../../asset/Template.css'\r\nimport loadingAnimationData from '../lottieIcons/loadingV2.json'\r\nimport LottieIcon from '../lottieIcons/LottieIco';\r\nimport PageModal from '../modal/Page'\r\nimport PageCard from '../cardComponent/PageCard';\r\n\r\nclass DefaultPage extends Component {\r\n    state = {\r\n        showModal: false,\r\n        loader: false,\r\n        isStopped: false,\r\n        isPaused: false,\r\n    }\r\n\r\n    toggleLoader = () => {\r\n        this.setState({loader:!this.state.loader})\r\n    }\r\n\r\n    toggle = () => {\r\n        this.setState({\r\n            showModal: !this.state.showModal,\r\n        });\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.getDefaultPages();\r\n    }\r\n\r\n    getDefaultPages = async () => {\r\n        this.setState({loader:true})\r\n        const response = await getTemplate(this.props.user.username)\r\n        if(response.STATUS == \"SUCCESS\"){\r\n            this.setState({loader:false})\r\n            this.props.createDefaultPage(response.DEFAULT_PAGES)\r\n        }\r\n    }\r\n    render() {\r\n        const {pageData} = this.props\r\n        return this.state.loader ? (\r\n            <LottieIcon animationData={loadingAnimationData} type=\"Running\" height={50} width={50} pause={false} stop={false}/>\r\n        ) :\r\n            (\r\n                <>\r\n                    <AdminLayout title={pageData.title}>\r\n                        <div style={{ boxSizing: \"border-box\", width: \"100%\", height: \"4em\" }}>\r\n                            <button style={{ float: \"right\", borderRadius: \"3px\", marginRight: \"10px\", backgroundColor: \"#1DABB8\" }} className=\"btn text-white\" onClick={() => this.setState({ showModal: true })}>Create Page</button>\r\n                        </div>\r\n                        <br />\r\n                        {pageData && pageData.length > 0 &&//Template Type\r\n                            <PageCard page={pageData} EditCode={true} EditPage={true} ShowHide={true} type={\"DEFAULT\"} loader={this.toggleLoader}/>\r\n                        }\r\n                        {this.state.showModal &&\r\n                            <PageModal modal={this.state.showModal} loader={this.toggleLoader} toggle={this.toggle} title={\"Add Page\"} Add={true} editData={\"\"} type={\"DEFAULT\"} />\r\n                        }\r\n                    </AdminLayout>\r\n                </>\r\n            );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        user: state.login && state.login.data,\r\n        pageData: state.template && state.template.defaultPages\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        createDefaultPage: (data) => dispatch(setDefaultPages(data)),\r\n        createAdminPage: (data) => dispatch(setAdminTemplate(data))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DefaultPage)","F:\\w3bizz\\React\\src\\component\\pages\\PageDisplay.js",["197","198","199","200","201","202","203","204","205","206","207"],"import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { setUserTemplate, setAdminTemplate } from '../../redux/actions/SetTemplateActions'\nimport AdminLayout from '../AdminLayout';\nimport {Tooltip} from '@material-ui/core';\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\nimport '../../asset/Template.css'\nimport loadingAnimationData from '../lottieIcons/loadingV2.json'\nimport LottieIcon from '../lottieIcons/LottieIco';\nimport PageModal from '../modal/Page'\nimport PageCard from '../cardComponent/PageCard';\nimport DefaultPagesModal from '../modal/DefaultPagesModal';\n\nclass RecentPage extends Component {\n    state = {\n        showModal: false,\n        showPageModal: false,\n        loader: false,\n        radioValue: '',\n        valueError: '',\n        pageData: [],\n        isStopped: false,\n        isPaused: false,\n    }\n\n    openModal = (e, value) => {\n        this.setState({ showPageModal: true })\n        e.preventDefault()\n    }\n\n    toggleLoader = () => {\n        this.setState({loader:!this.state.loader})\n    }\n\n    toggle = () => {\n        this.setState({\n            showModal: !this.state.showModal,\n        });\n    }\n\n    togglePageModal = () => {\n        this.setState({\n            showPageModal: !this.state.showPageModal,\n        });\n    }\n\n    render() {\n        \n        const { user, adminTemplate, userTemplate } = this.props\n        const { template, type } = this.props.location.state;\n        let templateData;\n        if(type == \"USER\"){\n            templateData = userTemplate.find(val=> val.s_no == template.s_no)\n        }else{\n            templateData = adminTemplate.find(val=> val.s_no == template.s_no)\n            if(user.type == \"DEFAULT\"){\n                let tempPage = []\n                if(templateData && templateData.pageData.length>0){\n                    templateData.pageData.map((val)=>{\n                        if(val.is_hidden == \"FALSE\" || val.is_hidden==\"\"){\n                            tempPage.push(val)\n                        }\n                    })\n                }\n                templateData.pageData = tempPage\n            }\n        }\n        return this.state.loader ? (\n            <div style={{ display: 'flex', justifyContent: 'center', marginTop:'20%' }}>\n                    <LottieIcon animationData={loadingAnimationData} type=\"Running\" height={50} width={50}/>\n            </div>\n        ) :\n        this.state.showPageModal ? (    \n            <>\n            <DefaultPagesModal modal={this.state.showPageModal} loader={this.toggleLoader} toggle={this.togglePageModal} title={\"Default Pages\"} templateData={template} />\n            </>\n        ):\n            (\n                <>\n                    <AdminLayout title={templateData.title}>\n                    {templateData && type == \"DEFAULT\" ?\n                        user.type == \"ADMIN\" &&\n                        <div style={{ boxSizing: \"border-box\", width: \"100%\", height: \"4em\" }}>\n                            <Tooltip title=\"Add Default Page\">\n                                <span style={{ float: \"right\", marginRight: \"10px\" }} onClick={(e) => { this.openModal(e, templateData) }}>\n                                    <AddCircleOutlineIcon />\n                                </span></Tooltip>\n                            <button style={{ float: \"right\", borderRadius: \"3px\", marginRight: \"10px\", backgroundColor: \"#1DABB8\" }} className=\"btn text-white\" onClick={() => this.setState({ showModal: true })}>Create Page</button>\n                        </div>\n                        :\n                        <div style={{ boxSizing: \"border-box\", width: \"100%\", height: \"4em\" }}>\n                            <Tooltip title=\"Add Default Page\">\n                                <span style={{ float: \"right\", marginRight: \"10px\" }} onClick={(e) => { this.openModal(e, templateData) }}>\n                                    <AddCircleOutlineIcon />\n                                </span></Tooltip>\n                            <button style={{ float: \"right\", borderRadius: \"3px\", marginRight: \"10px\", backgroundColor: \"#1DABB8\" }} className=\"btn text-white\" onClick={() => this.setState({ showModal: true })}>Create Page</button>\n                        </div>\n                        }\n                        <br />\n                        {templateData && type == \"DEFAULT\" ?//Template Type\n                            user.type == \"ADMIN\" ?//User Type\n                            <PageCard page={templateData.pageData} Preview={true} EditCode={true} EditPage={true} ShowHide={true} loader={this.toggleLoader}/>:\n                            <PageCard page={templateData.pageData}  Preview={true} ShowHide={true} loader={this.toggleLoader}/>\n                            :\n                            <PageCard page={templateData.pageData} EditCode={true} EditPage={true} ShowHide={true} loader={this.toggleLoader}/>\n                        }\n                        {this.state.showModal &&\n                            <PageModal modal={this.state.showModal} loader={this.toggleLoader} toggle={this.toggle} title={\"Add Page\"} Add={true} editData={\"\"} template_id={templateData.id}/>\n                        }\n                        </AdminLayout>\n                </>\n            );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        user: state.login && state.login.data,\n        userTemplate : state.template && state.template.userTemplate,\n        adminTemplate: state.template && state.template.adminTemplate,\n        defaultPages: state.template && state.template.defaultPages\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        createPage: (data) => dispatch(setUserTemplate(data)),\n        createAdminPage: (data) => dispatch(setAdminTemplate(data))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RecentPage);\n","F:\\w3bizz\\React\\src\\component\\home\\Home.js",[],"F:\\w3bizz\\React\\src\\services\\Auth.js",[],"F:\\w3bizz\\React\\src\\component\\AdminLayout.js",["208","209","210","211","212","213","214","215","216","217","218"],"import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport clsx from 'clsx';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport {\n  Drawer, AppBar, Toolbar, List, CssBaseline, Typography, Divider,\n  IconButton, ListItem, ListItemIcon, ListItemText, Collapse, Popover, Button, Link\n} from '@material-ui/core';\nimport {\n  Home, Menu as MenuIcon, ChevronLeft as ChevronLeftIcon, ChevronRight as ChevronRightIcon,\n  ExpandLess as IconExpandLess, ExpandMore as IconExpandMore, Web as WebIcon, MoveToInbox as InboxIcon,\n  KeyboardArrowDown as KeyboardArrowDownIcon, WebAsset\n} from '@material-ui/icons';\nimport { NavLink } from 'react-router-dom';\nimport { useHistory } from 'react-router-dom';\nimport { loginUserSuccess } from '../redux/actions/LoginActions'\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  appBar: {\n    zIndex: theme.zIndex.drawer + 1,\n    transition: theme.transitions.create(['width', 'margin'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n  },\n  menuItem: {\n    width: drawerWidth,\n  },\n  appBarShift: {\n    marginLeft: drawerWidth,\n    width: `calc(100% - ${drawerWidth}px)`,\n    transition: theme.transitions.create(['width', 'margin'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  menuButton: {\n    marginRight: 36,\n  },\n  hide: {\n    display: 'none',\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n    whiteSpace: 'nowrap',\n  },\n  drawerOpen: {\n    width: drawerWidth,\n    transition: theme.transitions.create('width', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  drawerClose: {\n    transition: theme.transitions.create('width', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    overflowX: 'hidden',\n    width: theme.spacing(7) + 1,\n    [theme.breakpoints.up('sm')]: {\n      width: theme.spacing(9) + 1,\n    },\n  },\n  toolbar: {\n    display: 'flex',\n    alignItems: 'center',\n    height: \"5.35em\",\n    justifyContent: 'flex-end',\n    padding: theme.spacing(0, 1),\n    // necessary for content to be below app bar\n    ...theme.mixins.toolbar,\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n  },\n  typography: {\n    padding: theme.spacing(2),\n    cursor: \"default\",\n  },\n  activeListItem: {\n    borderLeft: `4px solid ${\"lightgrey\"}`,\n    borderRadius: '4px',\n    backgroundColor: \"lightgrey\",\n    '& $listItemText': {\n      color: theme.palette.text.primary\n    },\n    '& $listItemIcon': {\n      color: theme.palette.primary.main,\n      marginLeft: '-4px'\n    }\n  }\n}));\n\nexport default function AdminLayout(props) {\n  const classes = useStyles();\n  const theme = useTheme();\n  const [open, setOpen] = React.useState(false);\n  const [open1, setOpen1] = React.useState(false);\n  const [open2, setOpen2] = React.useState(false);\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const history = useHistory()\n  const dispatch = useDispatch()\n  const user = useSelector((state) => state.login.data)\n\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n\n  const openAnchor = Boolean(anchorEl);\n  const id = openAnchor ? 'simple-popover' : undefined;\n\n  function handleClick() {\n    setOpen1(!open1)\n  }\n\n  function handleClick2() {\n    setOpen2(!open2)\n  }\n\n  const handleClickAnchor = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleCloseAnchor = () => {\n    setAnchorEl(null);\n  };\n\n  const logout = () => {\n    localStorage.clear()\n    let obj = {}\n    dispatch(loginUserSuccess(obj))\n    history.push('/')\n  }\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <AppBar\n        color=\"#1DABB8\"\n        position=\"fixed\"\n        className={clsx(classes.appBar, {\n          [classes.appBarShift]: open,\n        })}\n      >\n        <Toolbar style={{ color: \"#1DABB8\" }}>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            onClick={handleDrawerOpen}\n            edge=\"start\"\n            className={clsx(classes.menuButton, {\n              [classes.hide]: open,\n            })}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" noWrap style={{ flex: 1 }}>\n            {props.title}\n          </Typography>\n          <div>\n            <img src=\"/humanavtar.jpg\" height=\"75em\" aria-describedby={id} variant=\"contained\" style={{ color: \"grey\" }} onClick={handleClickAnchor} />\n            <Button className=\"btn text-white\" style={{ borderRadius: \"6px\", backgroundColor: \"#1DABB8\" }} onClick={() => { logout() }}>Logout</Button>\n          </div>\n        </Toolbar>\n      </AppBar>\n      <Drawer\n        variant=\"permanent\"\n        className={clsx(classes.drawer, {\n          [classes.drawerOpen]: open,\n          [classes.drawerClose]: !open,\n        })}\n        classes={{\n          paper: clsx({\n            [classes.drawerOpen]: open,\n            [classes.drawerClose]: !open,\n          }),\n        }}\n      >\n        <div className={classes.toolbar}>\n          <IconButton onClick={handleDrawerClose}>\n            {theme.direction === 'rtl' ? <ChevronRightIcon /> : <ChevronLeftIcon />}\n          </IconButton>\n        </div>\n        <Divider />\n        <List>\n\n          {user.type != \"ADMIN\" &&\n            <ListItem button component={NavLink} to=\"/recentWebTemplate\" className={classes.menuItem} activeClassName={classes.activeListItem}>\n              <ListItemIcon className={classes.menuItemIcon}>\n                <Home />\n              </ListItemIcon>\n              <ListItemText primary=\"Recent\" />\n            </ListItem>\n          }\n          {/* <Collapse in={open1} timeout=\"auto\" unmountOnExit>\n        <Divider />\n        <List component=\"div\" disablePadding>\n          <ListItem >\n          <ListItemIcon className={classes.menuItemIcon}>\n          <WebAssetIcon />\n        </ListItemIcon>\n            <ListItemText primary=\"Template\" />\n          </ListItem>\n          <ListItem button component={NavLink} to=\"/recentPageTemplate\" className={classes.menuItem}>\n          <ListItemIcon className={classes.menuItemIcon}>\n          <PageviewIcon />\n        </ListItemIcon>\n            <ListItemText primary=\"Web Page\" />\n          </ListItem>\n        </List>\n      </Collapse> */}\n\n          <ListItem button component={NavLink} to=\"/savedWebTemplate\" className={classes.menuItem} activeClassName={classes.activeListItem}>\n            <ListItemIcon selected={true} className={classes.menuItemIcon}>\n              <WebIcon />\n            </ListItemIcon>\n            <ListItemText primary=\"Template\" />\n          </ListItem>\n\n\n          {user.type == \"ADMIN\" &&\n            <ListItem button component={NavLink} to=\"/savedPages\" className={classes.menuItem} activeClassName={classes.activeListItem}>\n              <ListItemIcon selected={true} className={classes.menuItemIcon}>\n                <WebAsset />\n              </ListItemIcon>\n              <ListItemText primary=\"Default Page\" />\n            </ListItem>\n          }\n          {/* <Collapse in={open2} timeout=\"auto\" unmountOnExit>\n        <Divider />\n        <List component=\"div\" disablePadding>\n          <ListItem button component={NavLink} to=\"/savedWebTemplate\" className={classes.menuItem}>\n          <ListItemIcon className={classes.menuItemIcon}>\n          <WebAssetIcon />\n        </ListItemIcon>\n          <ListItemText primary=\"Template\" />\n          </ListItem>\n          <ListItem button component={NavLink} to=\"/savedPageTemplate\" className={classes.menuItem}>\n          <ListItemIcon className={classes.menuItemIcon}>\n          <PageviewIcon />\n        </ListItemIcon>\n            <ListItemText primary=\"Web Page\" />\n          </ListItem>\n        </List>\n      </Collapse> */}\n\n        </List>\n      </Drawer>\n      <main className={classes.content}>\n        <div className={classes.toolbar} />\n        <div>\n          {props.children}\n        </div>\n      </main>\n      <Popover\n        id={id}\n        open={openAnchor}\n        anchorEl={anchorEl}\n        onClose={handleCloseAnchor}\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'center',\n        }}\n        transformOrigin={{\n          vertical: 'top',\n          horizontal: 'center',\n        }}\n      >\n        <Typography className={classes.typography} onClick={() => { history.push('/updateProfile') }}>User-Profile</Typography>\n      </Popover>\n    </div>\n  );\n}\n\nAdminLayout.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  classes: PropTypes.object.isRequired,\n  title: PropTypes.string,\n  width: PropTypes.string.isRequired\n};\n","F:\\w3bizz\\React\\src\\services\\apiFunction.js",["219"],"import axios from 'axios';\r\n\r\nexport function postLogin(fields) {\r\n    return new Promise((resolve, reject) => {\r\n        axios.post(\"https://w3bizz.com/template/login.php\", fields)\r\n            .then((res) => resolve(res))\r\n            .catch((err) => reject(err))\r\n    })\r\n}\r\n\r\nexport function addPage(fields, username) {\r\n    return new Promise((resolve, reject) => {\r\n        axios.post(\"https://w3bizz.com/template/classes/addPage.php\", fields)\r\n            .then((res) => resolve(res.data))\r\n            .catch((err) => reject(err))\r\n    })\r\n}\r\n\r\nexport function uploadImage(data) {\r\n    let formData = new FormData()\r\n    formData.append(\"upload_preset\", \"w3bizz_serdxz\")\r\n    formData.append(\"file\", data)\r\n    return new Promise((resolve, reject) => {\r\n        axios.post(\"https://api.cloudinary.com/v1_1/w3bizz-com/image/upload\", formData)\r\n            .then((res) => resolve(res))\r\n            .catch((err) => reject(err))\r\n    })\r\n}\r\n\r\nexport function mergeTemplate(fields, username) {\r\n    return new Promise((resolve, reject) => {\r\n        axios.post(\"https://w3bizz.com/template/classes/mergeTemplate.php\", fields)\r\n            .then((res) => resolve(res.data))\r\n            .catch((err) => reject(err))\r\n    })\r\n}\r\n\r\nexport function mergePage(fields, username) {\r\n    return new Promise((resolve, reject) => {\r\n        axios.post(\"https://w3bizz.com/template/classes/mergePage.php\", fields)\r\n            .then((res) => resolve(res.data))\r\n            .catch((err) => reject(err))\r\n    })\r\n}\r\n\r\nexport function publishTemplate(fields, username) {\r\n    return new Promise((resolve, reject) => {\r\n        axios.post(\"https://w3bizz.com/template/classes/publish.php\", fields)\r\n            .then((res) => resolve(res.data))\r\n            .catch((err) => reject(err))\r\n    })\r\n}\r\n\r\nexport function addTemplate(fields, username) {\r\n    return new Promise((resolve, reject) => {\r\n        axios.post(\"https://w3bizz.com/template/classes/addTemplate.php\", fields)\r\n            .then((res) => resolve(res.data))\r\n            .catch((err) => reject(err))\r\n    })\r\n}\r\n\r\nexport function sendEmailOTP(fields, username) {\r\n    return new Promise((resolve, reject) => {\r\n        axios.post(\"https://w3bizz.com/template/classes/sendemailotp.php\", fields)\r\n            .then((res) => resolve(res.data))\r\n            .catch((err) => reject(err))\r\n    })\r\n}\r\n\r\nexport function sendVerifyOTP(fields, username) {\r\n    return new Promise((resolve, reject) => {\r\n        axios.post(\"https://w3bizz.com/template/classes/verifyotp.php\", fields)\r\n            .then((res) => resolve(res.data))\r\n            .catch((err) => reject(err))\r\n    })\r\n}\r\n\r\nexport function updateTemplate(fields) {\r\n    return new Promise((resolve, reject) => {\r\n        axios.post(\"https://w3bizz.com/template/classes/updateTemplate.php\", fields)\r\n            .then((res) => resolve(res.data))\r\n            .catch((err) => reject(err))\r\n    })\r\n}\r\n\r\nexport function addSlots(fields) {\r\n    return new Promise((resolve, reject) => {\r\n        axios.post(\"https://w3bizz.com/template/classes/addSlot.php\", fields)\r\n            .then((res) => resolve(res.data))\r\n            .catch((err) => reject(err))\r\n    })\r\n}\r\n\r\nexport function payMoney(fields) {\r\n    return new Promise((resolve, reject) => {\r\n        axios.post(\"https://w3bizz.com/template/classes/getIntent.php\", fields)\r\n            .then((res) => resolve(res.data))\r\n            .catch((err) => reject(err))\r\n    })\r\n}\r\n\r\nexport function addTransaction(fields) {\r\n    return new Promise((resolve, reject) => {\r\n        axios.post(\"https://w3bizz.com/template/classes/addTransaction.php\", fields)\r\n            .then((res) => resolve(res.data))\r\n            .catch((err) => reject(err))\r\n    })\r\n}\r\n\r\nexport function updateTransaction(fields) {\r\n    return new Promise((resolve, reject) => {\r\n        axios.post(\"https://w3bizz.com/template/classes/updateTransaction.php\", fields)\r\n            .then((res) => resolve(res.data))\r\n            .catch((err) => reject(err))\r\n    })\r\n}\r\n\r\nexport function updateSlots(fields) {\r\n    return new Promise((resolve, reject) => {\r\n        axios.post(\"https://w3bizz.com/template/classes/updateSlot.php\", fields)\r\n            .then((res) => resolve(res.data))\r\n            .catch((err) => reject(err))\r\n    })\r\n}\r\n\r\nexport function deleteSlots(fields) {\r\n    return new Promise((resolve, reject) => {\r\n        axios.post(\"https://w3bizz.com/template/classes/deleteSlot.php\", fields)\r\n            .then((res) => resolve(res.data))\r\n            .catch((err) => reject(err))\r\n    })\r\n}\r\n\r\nexport function deleteTransaction(fields) {\r\n    return new Promise((resolve, reject) => {\r\n        axios.post(\"https://w3bizz.com/template/classes/deleteTransaction.php\", fields)\r\n            .then((res) => resolve(res.data))\r\n            .catch((err) => reject(err))\r\n    })\r\n}\r\n\r\nexport function getTemplate(username) {\r\n    return new Promise((resolve, reject) => {\r\n        axios.get(`https://w3bizz.com/template/classes/getTemplate.php?username=${username}`)\r\n            .then((res) => resolve(res.data))\r\n            .catch((err) => reject(err))\r\n    })\r\n}\r\n\r\nexport function getTransaction(username) {\r\n    return new Promise((resolve, reject) => {\r\n        axios.get(`https://w3bizz.com/template/classes/getTransaction.php?username=${username}`)\r\n            .then((res) => resolve(res.data))\r\n            .catch((err) => reject(err))\r\n    })\r\n}\r\n\r\nexport function getSlots(username) {\r\n    return new Promise((resolve, reject) => {\r\n        axios.get(`https://w3bizz.com/template/classes/getSlot.php?username=${username}`)\r\n            .then((res) => resolve(res.data))\r\n            .catch((err) => reject(err))\r\n    })\r\n}\r\n\r\nexport function registerApi(data) {\r\n    return new Promise((resolve, reject) => {\r\n        axios.post('https://w3bizz.com/template/register.php', data)\r\n            .then((res) => resolve(res))\r\n            .catch((err) => reject(err))\r\n    })\r\n}\r\n\r\nexport function patchApi(data, id) {\r\n    return new Promise((resolve, reject) => {\r\n        if (id != undefined) {\r\n            data.username = id\r\n        }\r\n        axios.post(\"https://w3bizz.com/template/classes/updateUser.php\", data)\r\n            .then((res) => resolve(res.data))\r\n            .catch((err) => reject(err))\r\n    })\r\n}\r\n\r\nexport function updateHide(value) {\r\n    return new Promise((resolve, reject) => {\r\n        axios.post(\"https://w3bizz.com/template/classes/updateTemplate.php\", value)\r\n            .then((res) => resolve(res.data))\r\n            .catch((err) => reject(err))\r\n    })\r\n}\r\n\r\nexport function updateHidePage(value) {\r\n    return new Promise((resolve, reject) => {\r\n        axios.post(\"https://w3bizz.com/template/classes/updatePage.php\", value)\r\n            .then((res) => resolve(res.data))\r\n            .catch((err) => reject(err))\r\n    })\r\n}\r\n","F:\\w3bizz\\React\\src\\component\\template\\UserTemplateById.js",["220","221","222","223","224","225","226"],"import React, { Component } from 'react';\nimport TemplateModal from '../modal/Template'\nimport { connect } from 'react-redux';\nimport * as actions from '../../redux/actions/SetTemplateActions'\nimport {Tooltip, Card, CardContent} from '@material-ui/core';\nimport { withRouter } from 'react-router-dom'\nimport '../../asset/Template.css'\nimport {Web as WebIcon, WebAsset, Edit as EditIcon, Check as CheckIcon, Clear as ClearIcon} from '@material-ui/icons';\nimport TemplateCard from '../cardComponent/TemplateCard';\n\nclass UserTemplateById extends Component {\n\n    state = {\n        editDetails:'',\n        showModal: false,\n    }\n\n    render() {\n        const {template , loader} = this.props\n        return (\n            <>\n                <div className=\"container-fluid\">\n                    <div className=\"row\">\n                        {template.length > 0 ? \n                        (\n                        <>\n                        <TemplateCard Publish={true} ViewPages={true} EditTemplate={true} CopyTemplate={true} userTemplate={template} loader={loader}/>\n                        </>\n                        ):(\n                            <div>\n                                <h3 className=\"demo-heading\">\n                                It is Very Easy To Create Template.\n                                <span className=\"demo-sub\">You Can Either choose Built-In Template or Create New Blank Template to Start.</span>\n                                </h3>\n                                <div className=\"demo-div\">\n                                <Card className=\"demo-card\" onClick={(e)=>{this.props.history.push('/savedWebTemplate')}}>\n                                <WebIcon style={{fontSize:120}} className=\"demo-icon\"/>\n                                <h6 className=\"demo-title\">Template</h6>                                    \n                                <span className=\"demo-sub\">Choose from our pre-defined templates curated for your website.</span> \n                                </Card>\n                                <Card className=\"demo-card\" onClick={(e) => this.props.toggle()}>\n                                <WebAsset style={{fontSize:120}} className=\"demo-icon\"/>\n                                <h6 className=\"demo-title\">Create New Template</h6>\n                                <span className=\"demo-sub\">You can create a new blank template in few clicks and build your website from scratch.</span>                                  \n                                </Card>\n                                </div>\n                            </div>\n                        )}\n                    </div>\n                </div>\n            </>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        template: state.template.userTemplate\n    }\n}\n\nexport default connect(mapStateToProps, null)(withRouter(UserTemplateById));\n","F:\\w3bizz\\React\\src\\redux\\reducer\\SetTemplateReducers.js",[],"F:\\w3bizz\\React\\src\\redux\\reducer\\LoginReducers.js",[],"F:\\w3bizz\\React\\src\\component\\lottieIcons\\LottieIco.js",["227"],"import Lottie from 'react-lottie'\r\n\r\n const LottieIcon = (props) => {\r\n    const defaultOptions = {\r\n        loop: false,\r\n        autoplay: false, \r\n        animationData: props.animationData,\r\n        rendererSettings: {\r\n          preserveAspectRatio: 'xMidYMid slice'\r\n        }\r\n    };\r\n\r\n    const defaultRunningOptions = {\r\n        loop: true,\r\n        autoplay: true, \r\n        animationData: props.animationData,\r\n        rendererSettings: {\r\n          preserveAspectRatio: 'xMidYMid slice'\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <Lottie\r\n            options={props.type==\"Running\" ? defaultRunningOptions : defaultOptions}\r\n            height={props.height?props.height:30}\r\n            width={props.width?props.width:30}\r\n            style={props.style?props.style:{ margin: \"0 0 0 0\" }}\r\n            isStopped={props.stop}\r\n            isPaused={props.pause} />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default LottieIcon","F:\\w3bizz\\React\\src\\component\\modal\\Template.js",["228","229","230","231","232","233","234","235","236","237","238","239"],"import React, { Component } from 'react';\r\nimport { MDBContainer, MDBBtn, MDBModal, MDBModalBody, MDBModalHeader, MDBModalFooter } from 'mdbreact';\r\nimport { addPage, addTemplate, getTemplate, updateTemplate, uploadImage } from '../../services/apiFunction';\r\nimport { connect } from 'react-redux'\r\nimport { toast, ToastContainer } from 'react-toastify';\r\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\r\nimport * as Yup from 'yup'\r\nimport * as actions from '../../redux/actions/SetTemplateActions'\r\nimport { withRouter } from 'react-router-dom'\r\n\r\nclass TemplateModal extends Component {\r\n    state = {\r\n        modal: false,\r\n        file: '',\r\n        loader: '',\r\n        fileSrc: this.props.data ? this.props.data.image : ''\r\n    }\r\n\r\n    toggle = () => {\r\n        this.setState({\r\n            modal: !this.state.modal,\r\n            file: '',\r\n            fileSrc:''\r\n        });\r\n    }\r\n\r\n    onAdd = async (fields) => {\r\n        this.props.loader()\r\n        if (this.state.file) {\r\n            const response = await uploadImage(this.state.file)\r\n            fields.image = response.data.secure_url\r\n        }\r\n        fields.username = this.props.user.username\r\n        fields.category = \"new category\"\r\n        fields.tags = \"new tags\"\r\n        fields.is_hidden = \"FALSE\"\r\n        fields.type = this.props.type == \"DEFAULT\" ? \"DEFAULT\" : \"USER\"\r\n        const resp = await addTemplate(fields)\r\n        if (resp.STATUS == \"SUCCESS\") {\r\n            toast.success(\"Template Created Successfully\")\r\n            let obj = {}\r\n            obj.title = \"Home Page\"\r\n            obj.publish_name = \"New Template\"\r\n            obj.template_id = resp.TEMPLATE_ID\r\n            obj.is_homepage = \"TRUE\"\r\n            obj.is_hidden = \"FALSE\"\r\n            obj.type = \"USER\"\r\n            obj.code = \"\"\r\n            await addPage(obj)\r\n            const tempData1 = await getTemplate(this.props.user.username)\r\n            if (tempData1.STATUS == \"SUCCESS\") {\r\n                this.setState({ file: '', fileSrc: '' })\r\n                this.props.toggle()\r\n                this.props.loader()\r\n                if (this.props.type == \"DEFAULT\") {\r\n                    this.props.createAdminTemplate(tempData1.DEFAULT_TEMPLATE)\r\n                }\r\n                else {\r\n                    this.props.createUserTemplate(tempData1.USER_TEMPLATE)\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            this.props.loader()\r\n            toast.error(resp.data.message)\r\n        }\r\n    }\r\n\r\n    onEdit = async (fields) => {\r\n        if (this.state.file) {\r\n            const response = await uploadImage(this.state.file)\r\n            fields.image = response.data.secure_url\r\n        }\r\n        fields.username = this.props.user.username\r\n        fields.id = this.props.data.id\r\n        const resp = await updateTemplate(fields)\r\n        if (resp) {\r\n            toast.success(\"Template Updated Successfully\")\r\n            this.setState({ loader: false })\r\n            let template = this.props.user.type == \"ADMIN\" ? this.props.adminTemplate : this.props.userTemplate\r\n            var list = []\r\n            template.forEach((el) => {\r\n                if (el.id == fields.id) {\r\n                    el.title = fields.title\r\n                    list.push(el)\r\n                }\r\n                else {\r\n                    list.push(el)\r\n                }\r\n            })\r\n            this.props.toggle()\r\n            this.setState({ file: '', fileSrc: '' })\r\n            if (this.props.user.type == \"ADMIN\") {\r\n                this.props.createAdminTemplate(list)\r\n            }\r\n            else {\r\n                this.props.createUserTemplate(list)\r\n            }\r\n        }\r\n        else {\r\n            toast.error(resp.data.message)\r\n        }\r\n    }\r\n\r\n    handleFile = (e) => {\r\n        this.setState({\r\n            fileSrc: URL.createObjectURL(e.target.files[0]),\r\n            file: e.target.files[0]\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <MDBContainer>\r\n                <MDBModal centered isOpen={this.props.modal} toggle={this.props.toggle}>\r\n                    <MDBModalHeader toggle={this.props.toggle}>{this.props.title}</MDBModalHeader>\r\n                    <MDBModalBody>\r\n                        <Formik\r\n                            initialValues={{\r\n                                title: this.props.data.title ? this.props.data.title : '',\r\n                            }}\r\n                            validationSchema={Yup.object().shape({\r\n                                title: Yup.string()\r\n                                    .required('Template Title is required'),\r\n                            })}\r\n                            onSubmit={async (fields, { resetForm, initialValues }) => {\r\n                                if (this.props.Add == true) {\r\n                                    this.onAdd(fields)\r\n                                } else {\r\n                                    this.onEdit(fields)\r\n                                }\r\n\r\n                            }}\r\n                            render={({ errors, touched, setFieldValue }) => (\r\n\r\n                                <Form>\r\n                                    <div className=\"form-group\">\r\n                                        <label htmlFor=\"title\">Title</label>\r\n                                        <Field name=\"title\" type=\"text\" className={'form-control' + (errors.title && touched.title ? ' is-invalid' : '')} />\r\n                                        <ErrorMessage name=\"title\" component=\"div\" className=\"invalid-feedback\" />\r\n                                    </div>\r\n                                    <div className=\"form-group\">\r\n                                        <label htmlFor=\"title\">Images</label>\r\n                                        <input name=\"image\" onChange={(e) => this.handleFile(e)} type=\"file\" className=\"form-control\" />\r\n                                        <br />\r\n                                        {(this.state.fileSrc || this.props.data.image) &&\r\n                                            <img src={this.props.data.image ? this.props.data.image : this.state.fileSrc} style={{ width: \"10em\", height: \"6em\", marginTop: \"10px\" }} />\r\n                                        }\r\n                                    </div>\r\n                                    <br />\r\n                                    <div className=\"form-group\">\r\n                                        <button type=\"submit\" className=\"btn btn-primary\">{this.props.title}</button>\r\n                                        &nbsp;\r\n                                        <button type=\"reset\" onClick={() => this.setState({file:\"\"})} className=\"btn btn-secondary\">Reset</button>\r\n                                    </div>\r\n                                </Form>\r\n                            )}\r\n                        />\r\n                    </MDBModalBody>\r\n                </MDBModal>\r\n            </MDBContainer>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n\r\n    return {\r\n        user: state.login.data,\r\n        userTemplate: state.template.userTemplate,\r\n        adminTemplate: state.template.adminTemplate,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        createUserTemplate: (data) => dispatch(actions.setUserTemplate(data)),\r\n        createAdminTemplate: (data) => dispatch(actions.setAdminTemplate(data))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(TemplateModal));\r\n","F:\\w3bizz\\React\\src\\redux\\actions\\LoginActions.js",["240"],"import axios from 'axios'\n\nexport const loginUserError = (error) => {\n    return{\n        type:'LOGINUSERERROR',\n        payload:error\n    }\n}\n\nexport const loginUserSuccess = (data) => {\n    return{\n        type:'LOGINUSERSUCCESS',\n        payload:data\n    }\n}\n","F:\\w3bizz\\React\\src\\component\\modal\\Page.js",["241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261"],"F:\\w3bizz\\React\\src\\component\\modal\\DefaultPagesModal.js",["262","263","264","265","266"],"import React, { Component } from 'react';\r\nimport { MDBContainer, MDBModal, MDBModalBody, MDBModalHeader, MDBModalFooter } from 'mdbreact';\r\nimport { connect } from 'react-redux'\r\nimport { toast } from 'react-toastify';\r\nimport * as actions from '../../redux/actions/SetTemplateActions'\r\nimport '../../asset/Template.css'\r\nimport {Card, CardContent, Tooltip} from '@material-ui/core';\r\nimport '../../asset/Template.css'\r\nimport { getTemplate, mergePage } from '../../services/apiFunction';\r\n\r\nclass DefaultPageModal extends Component {\r\n\r\n    state = {\r\n        loader: false,\r\n        radioValue: '',\r\n        valueError: '',\r\n    }\r\n\r\n\r\n    handleSubmit = async (event) => {\r\n        let value = this.state.radioValue\r\n        const type = this.props.user.type\r\n        if (value != \"\") {\r\n            let obj = {}\r\n            obj.template_id = this.props.templateData.id\r\n            obj.page_id = value\r\n            const response = await mergePage(obj)\r\n            toast.success(response.MESSAGE)\r\n            this.setState({ showPageModal: false })\r\n            const template = await getTemplate(this.props.user.username)\r\n            if (template.STATUS == \"SUCCESS\") {\r\n                if (type == \"DEFAULT\") {\r\n                    this.props.createPage(template.USER_TEMPLATE)\r\n                    window.location.reload()\r\n                }\r\n                else {\r\n                    this.props.createAdminPage(template.DEFAULT_TEMPLATE)\r\n                    window.location.reload()\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            toast.error(\"No Page is Selected\")\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { defaultPages } = this.props\r\n        return (\r\n            <>\r\n                <MDBContainer style={{overflowX: \"scroll\", overflow: \"auto\"}}>\r\n                    <MDBModal size=\"lg\" centered isOpen={this.props.modal} toggle={this.props.toggle}>\r\n                        <MDBModalHeader toggle={this.props.toggle}>{this.props.title}</MDBModalHeader>\r\n                        <MDBModalBody>\r\n                            <div>\r\n                            <div className=\"row\">\r\n                            {defaultPages.length > 0 && defaultPages.map(value =>\r\n                                <>\r\n                                    <div className=\"col-sm-4\">\r\n                                        <div>\r\n                                            <label>\r\n                                                <input type=\"radio\" value={value.page_id} name=\"page\" className=\"card-input-element\" onChange={(e) => { this.setState({ radioValue: e.target.value }) }} />\r\n                                                <Card className=\"card-input\">\r\n                                                    <img src={value.image ? value.image : \"https://res.cloudinary.com/w3bizz-com/image/upload/c_scale,w_425/v1632246930/2_hjs08o.png\"} style={{ height: \"15em\", width: \"100%\" }} />\r\n                                                    <CardContent>\r\n                                                        <span>\r\n                                                            <h4 style={{ display: \"inline\" }}>{value.page_title}</h4>\r\n                                                        </span>\r\n                                                    </CardContent>\r\n                                                </Card>\r\n                                            </label>\r\n                                        </div>\r\n                                        <br />\r\n                                    </div>\r\n                                </>\r\n                            )}\r\n                            </div>\r\n                            </div>\r\n                        </MDBModalBody>\r\n                        <MDBModalFooter>\r\n                            <button className=\"btn btn-info\" style={{ float: \"right\" }} onClick={(event) => { this.handleSubmit(event) }}>Submit</button>\r\n                        </MDBModalFooter>\r\n                    </MDBModal>\r\n\r\n                </MDBContainer>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n\r\n    return {\r\n        user: state.login.data,\r\n        defaultPages: state.template && state.template.defaultPages\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        createPage: (data) => dispatch(actions.setUserTemplate(data)),\r\n        createAdminPage: (data) => dispatch(actions.setAdminTemplate(data))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DefaultPageModal)","F:\\w3bizz\\React\\src\\component\\template\\AdminTemplateById.js",["267","268","269"],"import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport * as actions from '../../redux/actions/SetTemplateActions'\nimport { withRouter } from 'react-router-dom'\nimport TemplateCard from '../cardComponent/TemplateCard';\n\nclass AdminTemplateById extends Component {\n    render() {\n        \n        const { user, adminTemplate } = this.props\n        return (\n            <>\n                <div className=\"container-fluid\">\n                    <div className=\"row\">\n                        {adminTemplate.length > 0 &&\n                            <>\n                                {user.type == \"ADMIN\" &&\n                                    <TemplateCard toggle={this.props.loader} ViewPages={true} EditTemplate={true} ShowHide={true} userTemplate={adminTemplate} />\n                                }\n                                {user.type == \"DEFAULT\" &&\n                                    <TemplateCard toggle={this.props.loader} ViewPages={true} UseNow={true} userTemplate={adminTemplate}/>\n                                }\n                            </>\n                        }\n                    </div>\n                </div>\n            </>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        user: state.login.data,\n        adminTemplate: state.template.adminTemplate,\n    }\n}\n\nexport default connect(mapStateToProps, null)(withRouter(AdminTemplateById));\n","F:\\w3bizz\\React\\src\\redux\\actions\\SetTemplateActions.js",[],"F:\\w3bizz\\React\\src\\component\\home\\HomeNavBar.js",["270","271"],"import React, { useState } from 'react';\r\n\r\nconst HomeNavBar = () => {\r\n    return (\r\n        <>\r\n        <nav className=\"navbar navbar-expand-lg navbar-light bg-white fixed-top \">\r\n               <div className=\"container \">\r\n                 <a\r\n                  aria-current=\"page\"\r\n                  className=\"navbar-brand\"\r\n                  href=\"https://www.chatwoot.com/\"\r\n                >\r\n                  <img\r\n                    src=\"/asset/brand-d6ec4f18194acc9e590c511b9ae51974.svg\"\r\n                    className=\"navbar-brand-img\"\r\n                    alt=\"...\"\r\n                    style={{maxHeight: \"2rem\" ,verticalAlign: \"top\",width: \"auto\"}}\r\n                  />\r\n                </a>\r\n                <button\r\n                  className=\"navbar-toggler\"\r\n                  type=\"button\"\r\n                  data-toggle=\"collapse\"\r\n                  data-target=\"#navbarCollapse\"\r\n                  aria-controls=\"navbarCollapse\"\r\n                  aria-expanded=\"false\"\r\n                  aria-label=\"Toggle navigation\"\r\n                >\r\n                  <span className=\"navbar-toggler-icon\" />\r\n                </button>\r\n                <div\r\n                  className=\"collapse navbar-collapse justify-content-end mt-xs-10\"\r\n                  id=\"navbarCollapse\"\r\n                >\r\n                  <ul className=\"navbar-nav\">\r\n                    <li className=\"nav-item dropdown\">\r\n                      <a\r\n                        className=\"nav-link dropdown-toggle\"\r\n                        id=\"navbarDocumentation\"\r\n                        data-toggle=\"dropdown\"\r\n                        href=\"https://www.chatwoot.com/#\"\r\n                        aria-haspopup=\"true\"\r\n                        aria-expanded=\"false\"\r\n                      >\r\n                        Features\r\n                      </a>\r\n                      <div\r\n                        className=\"dropdown-menu dropdown-menu-md px-5 bg-white\"\r\n                        aria-labelledby=\"navbarDocumentation\"\r\n                      >\r\n                        <div className=\"row \">\r\n                          <div className=\"col-md-6 border-right-md\">\r\n                            <div className=\"list-group list-group-flush \">\r\n                              <a\r\n                                className=\"features-menu-item list-group-item bg-white\"\r\n                                href=\"https://www.chatwoot.com/features/shared-inbox\"\r\n                              >\r\n                                <div className=\"mx-2\">\r\n                                  <h4 className=\"mb-1 d-flex align-items-center title\">\r\n                                    <div className=\"icon icon-xs mr-3 d-inline-block text-primary\">\r\n                                      <span role=\"img\" aria-label=\"Shared Inbox\">\r\n                                        📥\r\n                                      </span>\r\n                                    </div>\r\n                                    Shared inbox\r\n                                  </h4>\r\n                                  <p className=\"font-size-sm text-gray-700 mb-0\">\r\n                                    Collaborate easily with other agents and manage\r\n                                    conversations\r\n                                  </p>\r\n                                </div>\r\n                              </a>\r\n                              <a\r\n                                className=\"features-menu-item list-group-item bg-white\"\r\n                                href=\"https://www.chatwoot.com/features/live-chat\"\r\n                              >\r\n                                <div className=\"mx-2\">\r\n                                  <h4 className=\"mb-1 d-flex align-items-center title\">\r\n                                    <div className=\"icon icon-xs mr-3 d-inline-block text-primary\">\r\n                                      <span role=\"img\" aria-label=\"Live chat\">\r\n                                        💬\r\n                                      </span>\r\n                                    </div>\r\n                                    Live Chat\r\n                                  </h4>\r\n                                  <p className=\"font-size-sm text-gray-700 mb-0\">\r\n                                    Simple and elegant live chat for your website\r\n                                  </p>\r\n                                </div>\r\n                              </a>\r\n                              <a\r\n                                className=\"features-menu-item list-group-item bg-white\"\r\n                                href=\"https://www.chatwoot.com/features/channels\"\r\n                              >\r\n                                <div className=\"mx-2\">\r\n                                  <h4 className=\"mb-1 d-flex align-items-center title\">\r\n                                    <div className=\"icon icon-xs mr-3 d-inline-block text-primary\">\r\n                                      <span role=\"img\" aria-label=\"Live chat\">\r\n                                        🎡\r\n                                      </span>\r\n                                    </div>\r\n                                    Channels\r\n                                  </h4>\r\n                                  <p className=\"font-size-sm text-gray-700 mb-0\">\r\n                                    Connect with your customers on the channels of\r\n                                    their choice\r\n                                  </p>\r\n                                </div>\r\n                              </a>\r\n                            </div>\r\n                          </div>\r\n                          <div className=\"col-md-6\">\r\n                            <div className=\"list-group list-group-flush border-top border-top-md-0\">\r\n                              <a\r\n                                className=\"features-menu-item list-group-item bg-white\"\r\n                                href=\"https://www.chatwoot.com/features/chatbots\"\r\n                              >\r\n                                <div className=\"mx-2\">\r\n                                  <h4 className=\"mb-1 d-flex align-items-center title\">\r\n                                    <div className=\"icon icon-xs mr-3 d-inline-block text-primary\">\r\n                                      <span role=\"img\" aria-label=\"Chatbots\">\r\n                                        🤖\r\n                                      </span>\r\n                                    </div>\r\n                                    Chatbots\r\n                                  </h4>\r\n                                  <p className=\"font-size-sm text-gray-700 mb-0\">\r\n                                    Easily integrate with popular chatbot platforms to\r\n                                    automate conversations\r\n                                  </p>\r\n                                </div>\r\n                              </a>\r\n                              <a\r\n                                className=\"features-menu-item list-group-item bg-white\"\r\n                                href=\"https://www.chatwoot.com/mobile-apps\"\r\n                              >\r\n                                <div className=\"mx-2\">\r\n                                  <h4 className=\"mb-1 d-flex align-items-center title\">\r\n                                    <div className=\"icon icon-xs mr-3 d-inline-block text-primary\">\r\n                                      <span role=\"img\" aria-label=\"Mobile apps\">\r\n                                        📱\r\n                                      </span>\r\n                                    </div>\r\n                                    Mobile apps\r\n                                  </h4>\r\n                                  <p className=\"font-size-sm text-gray-700 mb-0\">\r\n                                    Don't miss out on new customers. Manage\r\n                                    conversations on the go\r\n                                  </p>\r\n                                </div>\r\n                              </a>\r\n                              <a\r\n                                className=\"features-menu-item list-group-item bg-white\"\r\n                                href=\"https://www.chatwoot.com/features/integrations\"\r\n                              >\r\n                                <div className=\"mx-2\">\r\n                                  <h4 className=\"mb-1 d-flex align-items-center title\">\r\n                                    <div className=\"icon icon-xs mr-3 d-inline-block text-primary\">\r\n                                      <span role=\"img\" aria-label=\"Integrations\">\r\n                                        ⚡\r\n                                      </span>\r\n                                    </div>\r\n                                    Integrations\r\n                                  </h4>\r\n                                  <p className=\"font-size-sm text-gray-700 mb-0\">\r\n                                    Super charge your workflow with integrations\r\n                                  </p>\r\n                                </div>\r\n                              </a>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                      <a className=\"nav-link\" href=\"https://www.chatwoot.com/blog\">\r\n                        Blog\r\n                      </a>\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                      <a className=\"nav-link\" href=\"https://www.chatwoot.com/pricing\">\r\n                        Pricing\r\n                      </a>\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                      <a\r\n                        className=\"nav-link\"\r\n                        href=\"https://www.chatwoot.com/help-center\"\r\n                      >\r\n                        Help Center\r\n                      </a>\r\n                    </li>\r\n                    <li className=\"nav-item mr-4\">\r\n                      <a\r\n                        className=\"nav-link\"\r\n                        href=\"https://app.chatwoot.com/app/login\"\r\n                      >\r\n                        Login\r\n                      </a>\r\n                    </li>\r\n                  </ul>\r\n                  <a\r\n                    className=\"navbar-btn btn btn-sm btn-primary lift\"\r\n                    href=\"https://app.chatwoot.com/app/auth/signup\"\r\n                  >\r\n                    Create an account\r\n                  </a>\r\n                </div>\r\n              </div>\r\n            </nav>\r\n            </>\r\n    );\r\n}\r\n \r\nexport default HomeNavBar;","F:\\w3bizz\\React\\src\\component\\cardComponent\\PageCard.js",["272","273","274","275","276","277","278","279","280","281","282","283","284","285","286","287"],"import React, { useState, useEffect } from 'react'\r\nimport { Tooltip, Card, CardContent, makeStyles } from '@material-ui/core';\r\nimport { getTemplate, updateHidePage } from '../../services/apiFunction';\r\nimport { toast } from 'react-toastify';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../../redux/actions/SetTemplateActions'\r\nimport '../../asset/Template.css'\r\nimport { useHistory } from 'react-router';\r\nimport PageModal from '../modal/Page'\r\nimport {\r\n    Edit as EditIcon,\r\n    Slideshow as SlideshowIcon,\r\n    Visibility as VisibilityIcon,\r\n    VisibilityOff as VisibilityOffIcon,\r\n    SettingsApplications as SettingsApplicationsIcon,\r\n} from '@material-ui/icons';\r\nimport '../../asset/PageCard.css'\r\n\r\nconst PageCard = (props) => {\r\n    const history = useHistory()\r\n    const [loader, setLoader] = useState(false)\r\n    const [editDetails, setEditDetails] = useState([])\r\n    const [showModal, setShowModal] = useState(false)\r\n    const [isPaused, setIsPaused] = useState(false)\r\n    \r\n    const handleView = (event, value) => {\r\n        let editor\r\n        let freeEdit = localStorage.getItem('freeEditor')\r\n        if(freeEdit){\r\n            editor = (freeEdit == \"true\") ? true  : false\r\n        }\r\n        else{\r\n            editor=false\r\n        }\r\n        window.open(`http://localhost:8080?pageid=${value.page_id}&block=${editor}`)\r\n    }\r\n\r\n    const handleHide = async (value) => {\r\n        let obj = {}\r\n        obj.id = value.page_id\r\n        obj.is_hidden = ((value.is_hidden === \"FALSE\" || value.is_hidden===\"\") ? \"TRUE\" : \"FALSE\")\r\n        const response = await updateHidePage(obj)\r\n        if (response.STATUS == \"SUCCESS\") {\r\n            let list = []\r\n            let response = await getTemplate(props.user.username)\r\n            if (props.user.type == \"ADMIN\") {\r\n                props.adminTemplate(response.DEFAULT_TEMPLATE)\r\n            }\r\n            else {\r\n                props.template(response.USER_TEMPLATE)\r\n            }\r\n        }\r\n    }\r\n\r\n    const toggle = () => {\r\n        setShowModal(!showModal)\r\n    }\r\n\r\n    const handleEdit = (e, value) => {\r\n        toggle()\r\n        setEditDetails(value)\r\n        e.preventDefault()\r\n    }\r\n\r\n    const preView = async (e, link) => {\r\n        if (link != '') {\r\n            window.open(link, \"_blank\")\r\n        }\r\n        else {\r\n            toast.error(\"No Preview is Present\")\r\n        }\r\n    }\r\n\r\n    const toggleLoader = () => {\r\n        setLoader(!loader)\r\n    }\r\n\r\n    const classes = makeStyles({\r\n        root: {\r\n            minWidth: 275,\r\n        },\r\n        bullet: {\r\n            display: 'inline-block',\r\n            margin: '0 2px',\r\n            transform: 'scale(0.8)',\r\n        },\r\n        title: {\r\n            fontSize: 14,\r\n        },\r\n        pos: {\r\n            marginBottom: 12,\r\n        },\r\n    });\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className=\"container-fluid\">\r\n                <div className=\"row\">\r\n                    {props.page.map(value =>\r\n                        <div className=\"col-sm-4 col-xs-4\">\r\n                            <Card className={classes.root} variant=\"outlined\" style={{ boxShadow: \"0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19)\" }}>\r\n                                <img src={value.image ? value.image : \"https://res.cloudinary.com/w3bizz-com/image/upload/c_scale,w_425/v1632246930/2_hjs08o.png\"} style={{ height: \"15em\", width: \"100%\" }} />\r\n                                <br />\r\n                                <CardContent>\r\n                                    <span >\r\n                                        <h4 style={{ display: \"inline\" }}>{value.page_title}</h4>\r\n                                        <br />\r\n                                        <br />\r\n                                        <span style={{ display: \"flex\" }} className=\"mouseCursor\">\r\n                                            {props.Preview == true &&\r\n                                                <Tooltip title=\"Preview of Page\"><SlideshowIcon onClick={(e) => { preView(e, value.preview_link) }} /></Tooltip>\r\n                                            }\r\n                                            {props.EditCode == true &&\r\n                                                <Tooltip title=\"Edit Page\"><EditIcon onClick={(event) => handleView(event, value)} /></Tooltip>\r\n                                            }\r\n                                            {props.ShowHide == true &&\r\n                                                <span onClick={() => { handleHide(value) }}>\r\n                                                    {value.is_hidden == \"TRUE\" ? <Tooltip title=\"SHOW\"><VisibilityOffIcon /></Tooltip> : <Tooltip title=\"HIDE\"><VisibilityIcon /></Tooltip>}\r\n                                                </span>\r\n                                            }\r\n                                            {props.EditPage == true &&\r\n                                                <Tooltip title=\"Edit Page Details\"><SettingsApplicationsIcon onClick={(event) => handleEdit(event, value)} /></Tooltip>\r\n                                            }\r\n                                        </span>\r\n                                    </span>\r\n                                </CardContent>\r\n                            </Card>\r\n                            <br />\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            </div>\r\n            <PageModal modal={showModal} loader={props.loader} toggle={toggle} title={\"Edit Page\"} Add={false} editData={editDetails} type={props.type}/>\r\n        </>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        user: state.login.data,\r\n        template: state.template.userTemplate,\r\n        published: state.template.published,\r\n        adminTemplate: state.template.adminTemplate\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        template: (data) => dispatch(actions.setUserTemplate(data)),\r\n        adminTemplate: (data) => dispatch(actions.setAdminTemplate(data)),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PageCard)","F:\\w3bizz\\React\\src\\component\\payment\\StripeApp.js",["288","289","290","291","292","293","294"],"F:\\w3bizz\\React\\src\\component\\modal\\SlotModal.js",["295","296","297","298","299","300","301","302","303","304"],"import React, { Component } from 'react';\r\nimport { MDBContainer, MDBModal, MDBModalBody, MDBModalHeader, MDBModalFooter } from 'mdbreact';\r\nimport { connect } from 'react-redux'\r\nimport { toast } from 'react-toastify';\r\nimport { loginUserSuccess } from '../../redux/actions/LoginActions'\r\nimport {Card, CardContent} from '@material-ui/core';\r\nimport '../../asset/Template.css'\r\nimport StripeApp from '../payment/StripeApp';\r\nimport { addSlots, patchApi } from '../../services/apiFunction';\r\nimport moment from 'moment';\r\n\r\nclass SlotModal extends Component {\r\n\r\n    state = {\r\n        file: '',\r\n        loader: '',\r\n        payModalError: '',\r\n        radioValue: '',\r\n        stripeModal: false,\r\n        slotNumber: 1,\r\n        planValue: '',\r\n        slotsNumber: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n    }\r\n\r\n    toggle = () => {\r\n        this.setState({\r\n            stripeModal: !this.state.stripeModal\r\n        });\r\n    }\r\n\r\n    AddPay = async (e) => {\r\n        e.preventDefault()\r\n        if (this.props.user.approved == '' && this.state.radioValue!='') {\r\n            let planValue = this.state.radioValue\r\n            this.setState({ planValue: planValue })\r\n            if (planValue == 2399) {\r\n                this.setState({ slotNumber: 3 })\r\n            }\r\n            this.setState({ stripeModal: true })\r\n            this.props.toggle()\r\n            this.setState({ payModalError: \"\" })\r\n        }else if(this.state.slotNumber && this.props.user.approved != \"\"){\r\n            let planValue = ((this.state.slotNumber) * 699)\r\n            this.setState({ planValue: planValue })\r\n            this.setState({ stripeModal: true })\r\n            this.props.toggle()\r\n            this.setState({ payModalError: \"\" })\r\n        }\r\n        else {\r\n            toast.error(\"Please Select Some Plan To Buy\")\r\n            this.setState({ payModalError: \"Please Select Some Plan\" })\r\n        }\r\n    }\r\n\r\n    AddTrialSlot = async (e) => {\r\n        \r\n        e.preventDefault()\r\n        this.props.loader()\r\n        let obj = {}\r\n        obj.username = this.props.user.username\r\n        obj.publish_name = this.props.user.lname + Math.floor(100000 + Math.random() * 900000)\r\n        obj.published = \"FALSE\"\r\n        obj.publish_date = \"\"\r\n        obj.purchase_date = moment().format(\"YYYY-MM-DD\")\r\n        obj.expiry_date = moment(moment(obj.purchase_date).add(7,'d')).format('YYYY-MM-DD')\r\n        const response = await addSlots(obj)\r\n        if (response.STATUS == \"SUCCESS\") {\r\n            let objUser = {}\r\n            objUser.id = this.props.user.username\r\n            objUser.email = this.props.user.email\r\n            objUser.trial_used = \"TRUE\"\r\n            await patchApi(objUser, objUser.id)\r\n            .then((val)=>{\r\n                let obj = {}\r\n                obj = this.props.user\r\n                obj.trial_used = \"TRUE\"\r\n                this.props.loginUsersSuccess(obj)\r\n            })\r\n            toast.success(\"Slot Created Successfully\")\r\n            this.props.toggle()\r\n        }\r\n        else {\r\n            toast.error(\"Error in Slot\")\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <MDBContainer>\r\n                    <MDBModal centered isOpen={this.props.modal} toggle={this.props.toggle}>\r\n                        <MDBModalHeader toggle={this.props.toggle}>{this.props.user.approved == \"\"? \"Purchase Slot\":\"Buy More Slots\"}</MDBModalHeader>\r\n                        <MDBModalBody>\r\n                            {((this.props.user.approved == \"\")) && \r\n                                <div className=\"row\">\r\n                                    <div className=\"col-sm-6\">\r\n                                        <label>\r\n                                            <input type=\"radio\" value=\"999\" name=\"page\" className=\"card-input-element\" onChange={(e) => { this.setState({ radioValue: e.target.value }) }} />\r\n                                            <Card className=\"card-input\">\r\n                                                <CardContent>\r\n                                                    <h3>Basic Plan</h3>\r\n                                                    <h2>Rs. 999</h2>\r\n                                                    <div>\r\n                                                        Books 1 Slot For Publishing Website\r\n                                                    </div>\r\n                                                </CardContent>\r\n                                            </Card>\r\n                                        </label>\r\n                                    </div>\r\n                                    <div className=\"col-sm-6\">\r\n                                        <label>\r\n                                            <input type=\"radio\" value=\"2399\" name=\"page\" className=\"card-input-element\" onChange={(e) => { this.setState({ radioValue: e.target.value }) }} />\r\n                                            <Card className=\"card-input\">\r\n                                                <CardContent>\r\n                                                    <h3>Pro Plan</h3>\r\n                                                    <h2>Rs. 2399</h2>\r\n                                                    <div>\r\n                                                        Books 3 Slot For Publishing Website\r\n                                                    </div>\r\n                                                </CardContent>\r\n                                            </Card>\r\n                                        </label>\r\n                                    </div>\r\n                                </div>\r\n                            }\r\n                            {\r\n                                this.props.user.approved == \"PAID\" &&\r\n                                <>\r\n                                    <br />\r\n                                    <div style={{ display: \"flex\" }}>\r\n                                        <h6>Buy &nbsp;</h6>\r\n                                        <select name=\"slotnumber\" value={this.state.slotNumber} onChange={(e) => { this.setState({ slotNumber: e.target.value }) }}>\r\n                                            {this.state.slotsNumber.map((val) => (\r\n                                                <option value={val}>{val}</option>\r\n                                            ))}\r\n                                        </select>\r\n                                        <h6> &nbsp;More Slots</h6>\r\n                                    </div>\r\n                                    <Card className=\"card-input\">\r\n                                        <CardContent>\r\n                                            <h3>Extra Slots</h3>\r\n                                            <h2>Rs. 699</h2>\r\n                                            <div>\r\n                                                You Can Use for Publishing more Websites\r\n                                            </div>\r\n                                        </CardContent>\r\n                                    </Card>\r\n                                    <br />\r\n                                    <div><h6>Total Amount to Be Paid is {(this.state.slotNumber) * (699)}</h6></div>\r\n                                </>\r\n                            }\r\n                        </MDBModalBody>\r\n                        <MDBModalFooter>\r\n                            <span style={{ float: \"right\" }}>\r\n                                {(this.props.user.trial_used == \"\" && this.props.user.approved == \"\") &&\r\n                                    <button className=\"btn btn-info\" onClick={(e) => { this.AddTrialSlot(e) }}>7 Days Free Trial</button>\r\n                                }\r\n                                &nbsp;\r\n                                <button className=\"btn btn-info\" onClick={(e) => { this.AddPay(e) }}>Buy Now</button>\r\n                            </span>\r\n                        </MDBModalFooter>\r\n                    </MDBModal>\r\n\r\n                    <MDBModal centered isOpen={this.state.stripeModal} toggle={this.toggle}>\r\n                        <MDBModalHeader toggle={this.toggle}>Pay Order</MDBModalHeader>\r\n                        <MDBModalBody>\r\n                            <StripeApp planValue={this.state.planValue} slotNumber={this.state.slotNumber} username={this.props.user.username} toast={toast} />\r\n                        </MDBModalBody>\r\n                    </MDBModal>\r\n\r\n                </MDBContainer>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n\r\n    return {\r\n        user: state.login.data,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        loginUsersSuccess: (data) => dispatch(loginUserSuccess(data))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SlotModal)","F:\\w3bizz\\React\\src\\component\\cardComponent\\TemplateCard.js",["305","306","307","308","309","310","311","312","313","314","315","316","317","318","319","320","321","322","323","324","325","326","327","328","329"],"import React, { useState, useEffect } from 'react'\r\nimport { Tooltip, Card, CardContent, makeStyles } from '@material-ui/core';\r\nimport { addSlots, getSlots, mergeTemplate, publishTemplate, updateHide, updateSlots } from '../../services/apiFunction';\r\nimport { toast } from 'react-toastify';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../../redux/actions/SetTemplateActions'\r\nimport LottieIcon from '../lottieIcons/LottieIco';\r\nimport animationDataCopy from '../lottieIcons/copy.json'\r\nimport editAnimationData from '../lottieIcons/edit.json'\r\nimport MenuIcon from '../lottieIcons/menuV2.json'\r\nimport loadingAnimationData from '../lottieIcons/LottieIco'\r\nimport '../../asset/Template.css'\r\nimport { VisibilityOff as VisibilityOffIcon, Visibility as VisibilityIcon } from '@material-ui/icons';\r\nimport { useHistory } from 'react-router';\r\nimport AvailableSlot from '../modal/AvailableSlot';\r\nimport TemplateModal from '../modal/Template'\r\nimport moment from 'moment';\r\n\r\nconst TemplateCard = (props) => {\r\n    const history = useHistory()\r\n    const [slot, setSlot] = useState('')\r\n    const [loader, setLoader] = useState(false)\r\n    const [slotDetails, setSlotDetails] = useState([])\r\n    const [expiredSlots, setExpiredSlots] = useState([])\r\n    const [templateID, setTemplateID] = useState('')\r\n    const [editDetails, setEditDetails] = useState([])\r\n    const [showModal, setShowModal] = useState(false)\r\n    const [editShowModal, setEditShowModal] = useState(false)\r\n    const [fileSrc, setFileSrc] = useState('')\r\n    const [isPaused, setIsPaused] = useState(true)\r\n    const [isStopped, setIsStopped] = useState(true)\r\n\r\n    const handleView = (event, value) => {\r\n        let type = value.type == \"DEFAULT\" ? \"DEFAULT\" : \"USER\"\r\n        history.push({ pathname: 'webTemplate', state: { template: value, type: type } })\r\n    }\r\n\r\n    const toggle = () => {\r\n        setShowModal(!showModal);\r\n    }\r\n\r\n    const editToggle = () => {\r\n        setEditShowModal(!editShowModal)\r\n    }\r\n\r\n    const toggleLoader = () => {\r\n        setLoader(!loader)\r\n    }\r\n\r\n    const publishTemplateFunc = async (e, value) => {\r\n        setTemplateID(value.id)\r\n        const response = await getSlots(props.user.username)\r\n        let date = moment().format('YYYY-MM-DD')\r\n        if (response.STATUS) {\r\n            let list = []\r\n            let expiredList = []\r\n            response.DATA.map((val) => {\r\n                if ((date <= val.expiry_date) || val.published == \"FALSE\") {\r\n                    val.isInput = false\r\n                    val.isExpired = false\r\n                    list.push(val)\r\n                } else {\r\n                    expiredList.push(val)\r\n                }\r\n            })\r\n            list = list.length > 0 ? list : response.DATA\r\n            setSlotDetails(list)\r\n            setExpiredSlots(expiredList)\r\n        }\r\n        setShowModal(true)\r\n    }\r\n\r\n\r\n    const classes = makeStyles({\r\n        root: {\r\n            minWidth: 275,\r\n        },\r\n        bullet: {\r\n            display: 'inline-block',\r\n            margin: '0 2px',\r\n            transform: 'scale(0.8)',\r\n        },\r\n        title: {\r\n            fontSize: 14,\r\n        },\r\n        pos: {\r\n            marginBottom: 12,\r\n        },\r\n    });\r\n\r\n    const handleHide = async (value) => {\r\n        let obj = {}\r\n        obj.username = value.username\r\n        obj.id = value.id\r\n        obj.is_hidden = (value.is_hidden === \"FALSE\" ? \"TRUE\" : \"FALSE\")\r\n        const response = await updateHide(obj)\r\n        if (response.STATUS == \"SUCCESS\") {\r\n            var list = []\r\n            props.userTemplate.forEach((el) => {\r\n                if (el.id == value.id) {\r\n                    el.is_hidden = obj.is_hidden\r\n                    list.push(el)\r\n                }\r\n                else {\r\n                    list.push(el)\r\n                }\r\n            })\r\n            if (props.user.type == \"ADMIN\") {\r\n                props.adminTemplate(list)\r\n            } else {\r\n                props.template(list)\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleEdit = (e, value) => {\r\n        setEditDetails(value)\r\n        setFileSrc(value.image)\r\n        setEditShowModal(true)\r\n        e.preventDefault()\r\n    }\r\n\r\n    const handleMergeTemplate = async (event, value, usenow) => {\r\n        setLoader(true)\r\n        let obj = {}\r\n        obj.username = props.user.username\r\n        obj.id = value.id\r\n        const response = await mergeTemplate(obj)\r\n        if (response.STATUS == \"SUCCESS\") {\r\n            toast.success(response.MESSAGE)\r\n            if(usenow == true){\r\n                history.push('/recentWebTemplate')\r\n            }else{\r\n            window.location.reload()\r\n            }\r\n        } else {\r\n            toast.error(response.MESSAGE)\r\n        }\r\n        setLoader(false)\r\n        event.preventDefault()\r\n    }\r\n\r\n    return loader ?\r\n        (<>\r\n            <LottieIcon animationData={loadingAnimationData} type=\"Running\" pause={isPaused} height={50} width={50} />\r\n        </>)\r\n        :\r\n        (\r\n            <>\r\n                <div className=\"container-fluid\">\r\n                    <div className=\"row\">\r\n                        {props.userTemplate.length > 0 &&\r\n                            props.userTemplate.map(value =>\r\n                                <div className=\"col-sm-4 col-xs-4\">\r\n                                    <Card className={classes.root} variant=\"outlined\" style={{ boxShadow: \"0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19)\" }}>\r\n                                        <img src={value.image ? value.image : \"https://res.cloudinary.com/w3bizz-com/image/upload/c_scale,w_425/v1632246929/1_qccloi.png\"} style={{ height: \"15em\", width: \"100%\" }} />\r\n                                        <br />\r\n                                        <CardContent>\r\n                                            <span>\r\n                                                <h4 style={{ display: \"inline\" }}>{value.title}</h4>\r\n                                                <br />\r\n                                                <br />\r\n                                                <div style={{ display: \"flex\" }}>\r\n                                                    {props.Publish == true &&\r\n                                                        <Tooltip title=\"Publish Web Template\">\r\n                                                            <span style={{ float: \"right\" }}>\r\n                                                                <button className=\"btn btn-info\" onClick={(e) => { publishTemplateFunc(e, value) }}>Publish Now</button>\r\n                                                            </span>\r\n                                                        </Tooltip>\r\n                                                    }\r\n                                                    {props.UseNow == true &&\r\n                                                        <Tooltip title=\"Use Now\">\r\n                                                            <span onClick={(e) => { handleMergeTemplate(e, value, true) }}>\r\n                                                                <button className=\"btn btn-info\">Use Now</button>\r\n                                                            </span>\r\n                                                        </Tooltip>\r\n                                                    }\r\n                                                    {props.ShowHide == true &&\r\n                                                        <span onClick={() => { handleHide(value) }}>\r\n                                                            {value.is_hidden == \"TRUE\" ? <Tooltip title=\"Show\"><VisibilityOffIcon /></Tooltip> : <Tooltip title=\"Hide\"><VisibilityIcon /></Tooltip>}\r\n                                                        </span>\r\n                                                    }\r\n                                                    {props.ViewPages == true &&\r\n                                                        <Tooltip title=\"View Pages\">\r\n                                                            <span onClick={(event) => handleView(event, value)}>\r\n                                                                <LottieIcon animationData={MenuIcon} pause={isPaused} stop={isStopped} />\r\n                                                            </span>\r\n                                                        </Tooltip>\r\n                                                    }\r\n                                                    {props.EditTemplate == true &&\r\n                                                        <Tooltip title=\"Edit Template Details\">\r\n                                                            <span onClick={(event) => handleEdit(event, value)}>\r\n                                                                <LottieIcon animationData={editAnimationData} pause={isPaused} stop={isStopped} />\r\n                                                            </span>\r\n                                                        </Tooltip>\r\n                                                    }\r\n                                                    {props.CopyTemplate == true &&\r\n                                                        <Tooltip title=\"Copy Template\">\r\n                                                            <span style={{ color: \"#1DABB8\" }} onClick={(e) => { handleMergeTemplate(e, value, false) }}>\r\n                                                                <LottieIcon animationData={animationDataCopy} pause={isPaused} stop={isStopped} />\r\n                                                            </span>\r\n                                                        </Tooltip>\r\n                                                    }\r\n                                                </div>\r\n                                            </span>\r\n                                        </CardContent>\r\n                                    </Card>\r\n                                    <br />\r\n                                </div>\r\n                            )}\r\n                    </div>\r\n                </div>\r\n                \r\n                    <AvailableSlot modal={showModal} title={\"Available Slots\"} toggle={toggle} slotDetails={slotDetails} templateID={templateID} expiredSlots={expiredSlots} />\r\n                \r\n                    <TemplateModal modal={editShowModal} loader={toggleLoader} toggle={editToggle} title={\"Edit Template\"} Add={false} data={editDetails} />\r\n                \r\n            </>\r\n        )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        user: state.login.data,\r\n        published: state.template.published\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        adminTemplate: (data) => dispatch(actions.setAdminTemplate(data)),\r\n        template: (data) => dispatch(actions.setUserTemplate(data))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TemplateCard)","F:\\w3bizz\\React\\src\\component\\modal\\AvailableSlot.js",["330","331","332","333","334","335","336","337","338","339","340","341","342","343","344","345","346","347"],{"ruleId":"348","replacedBy":"349"},{"ruleId":"350","replacedBy":"351"},{"ruleId":"352","severity":1,"message":"353","line":2,"column":8,"nodeType":"354","messageId":"355","endLine":2,"endColumn":14},{"ruleId":"356","severity":1,"message":"357","line":21,"column":30,"nodeType":"358","messageId":"359","endLine":21,"endColumn":32},{"ruleId":"356","severity":1,"message":"357","line":49,"column":43,"nodeType":"358","messageId":"359","endLine":49,"endColumn":45},{"ruleId":"360","severity":1,"message":"361","line":152,"column":13,"nodeType":"362","endLine":152,"endColumn":63},{"ruleId":"352","severity":1,"message":"363","line":5,"column":16,"nodeType":"354","messageId":"355","endLine":5,"endColumn":24},{"ruleId":"356","severity":1,"message":"357","line":26,"column":38,"nodeType":"358","messageId":"359","endLine":26,"endColumn":40},{"ruleId":"356","severity":1,"message":"357","line":32,"column":36,"nodeType":"358","messageId":"359","endLine":32,"endColumn":38},{"ruleId":"360","severity":1,"message":"361","line":64,"column":25,"nodeType":"362","endLine":64,"endColumn":72},{"ruleId":"356","severity":1,"message":"357","line":27,"column":28,"nodeType":"358","messageId":"359","endLine":27,"endColumn":30},{"ruleId":"356","severity":1,"message":"357","line":39,"column":26,"nodeType":"358","messageId":"359","endLine":39,"endColumn":28},{"ruleId":"356","severity":1,"message":"357","line":53,"column":24,"nodeType":"358","messageId":"359","endLine":53,"endColumn":26},{"ruleId":"360","severity":1,"message":"361","line":65,"column":21,"nodeType":"362","endLine":65,"endColumn":67},{"ruleId":"356","severity":1,"message":"357","line":22,"column":29,"nodeType":"358","messageId":"359","endLine":22,"endColumn":31},{"ruleId":"352","severity":1,"message":"364","line":42,"column":25,"nodeType":"354","messageId":"355","endLine":42,"endColumn":29},{"ruleId":"356","severity":1,"message":"357","line":67,"column":30,"nodeType":"358","messageId":"359","endLine":67,"endColumn":32},{"ruleId":"356","severity":1,"message":"357","line":71,"column":27,"nodeType":"358","messageId":"359","endLine":71,"endColumn":29},{"ruleId":"365","severity":1,"message":"366","line":110,"column":31,"nodeType":"367","messageId":"368","endLine":110,"endColumn":33},{"ruleId":"356","severity":1,"message":"357","line":111,"column":54,"nodeType":"358","messageId":"359","endLine":111,"endColumn":56},{"ruleId":"356","severity":1,"message":"369","line":135,"column":33,"nodeType":"358","messageId":"359","endLine":135,"endColumn":35},{"ruleId":"356","severity":1,"message":"357","line":144,"column":27,"nodeType":"358","messageId":"359","endLine":144,"endColumn":29},{"ruleId":"356","severity":1,"message":"357","line":166,"column":26,"nodeType":"358","messageId":"359","endLine":166,"endColumn":28},{"ruleId":"356","severity":1,"message":"369","line":171,"column":30,"nodeType":"358","messageId":"359","endLine":171,"endColumn":32},{"ruleId":"352","severity":1,"message":"370","line":198,"column":11,"nodeType":"354","messageId":"355","endLine":198,"endColumn":23},{"ruleId":"352","severity":1,"message":"371","line":209,"column":13,"nodeType":"354","messageId":"355","endLine":209,"endColumn":20},{"ruleId":"352","severity":1,"message":"372","line":209,"column":22,"nodeType":"354","messageId":"355","endLine":209,"endColumn":28},{"ruleId":"356","severity":1,"message":"357","line":477,"column":56,"nodeType":"358","messageId":"359","endLine":477,"endColumn":58},{"ruleId":"356","severity":1,"message":"357","line":600,"column":57,"nodeType":"358","messageId":"359","endLine":600,"endColumn":59},{"ruleId":"356","severity":1,"message":"357","line":25,"column":29,"nodeType":"358","messageId":"359","endLine":25,"endColumn":31},{"ruleId":"365","severity":1,"message":"366","line":28,"column":53,"nodeType":"367","messageId":"368","endLine":28,"endColumn":55},{"ruleId":"356","severity":1,"message":"357","line":29,"column":39,"nodeType":"358","messageId":"359","endLine":29,"endColumn":41},{"ruleId":"356","severity":1,"message":"357","line":34,"column":38,"nodeType":"358","messageId":"359","endLine":34,"endColumn":40},{"ruleId":"356","severity":1,"message":"357","line":76,"column":40,"nodeType":"358","messageId":"359","endLine":76,"endColumn":42},{"ruleId":"352","severity":1,"message":"373","line":3,"column":10,"nodeType":"354","messageId":"355","endLine":3,"endColumn":25},{"ruleId":"352","severity":1,"message":"374","line":5,"column":23,"nodeType":"354","messageId":"355","endLine":5,"endColumn":32},{"ruleId":"356","severity":1,"message":"357","line":37,"column":28,"nodeType":"358","messageId":"359","endLine":37,"endColumn":30},{"ruleId":"356","severity":1,"message":"357","line":52,"column":17,"nodeType":"358","messageId":"359","endLine":52,"endColumn":19},{"ruleId":"356","severity":1,"message":"357","line":53,"column":61,"nodeType":"358","messageId":"359","endLine":53,"endColumn":63},{"ruleId":"356","severity":1,"message":"357","line":55,"column":62,"nodeType":"358","messageId":"359","endLine":55,"endColumn":64},{"ruleId":"356","severity":1,"message":"357","line":56,"column":26,"nodeType":"358","messageId":"359","endLine":56,"endColumn":28},{"ruleId":"365","severity":1,"message":"366","line":59,"column":52,"nodeType":"367","messageId":"368","endLine":59,"endColumn":54},{"ruleId":"356","severity":1,"message":"357","line":60,"column":42,"nodeType":"358","messageId":"359","endLine":60,"endColumn":44},{"ruleId":"356","severity":1,"message":"357","line":60,"column":69,"nodeType":"358","messageId":"359","endLine":60,"endColumn":71},{"ruleId":"356","severity":1,"message":"357","line":81,"column":43,"nodeType":"358","messageId":"359","endLine":81,"endColumn":45},{"ruleId":"356","severity":1,"message":"357","line":82,"column":35,"nodeType":"358","messageId":"359","endLine":82,"endColumn":37},{"ruleId":"356","severity":1,"message":"357","line":100,"column":47,"nodeType":"358","messageId":"359","endLine":100,"endColumn":49},{"ruleId":"356","severity":1,"message":"357","line":101,"column":39,"nodeType":"358","messageId":"359","endLine":101,"endColumn":41},{"ruleId":"352","severity":1,"message":"375","line":8,"column":53,"nodeType":"354","messageId":"355","endLine":8,"endColumn":61},{"ruleId":"352","severity":1,"message":"376","line":8,"column":80,"nodeType":"354","messageId":"355","endLine":8,"endColumn":84},{"ruleId":"352","severity":1,"message":"377","line":12,"column":17,"nodeType":"354","messageId":"355","endLine":12,"endColumn":31},{"ruleId":"352","severity":1,"message":"378","line":12,"column":47,"nodeType":"354","messageId":"355","endLine":12,"endColumn":61},{"ruleId":"352","severity":1,"message":"379","line":12,"column":94,"nodeType":"354","messageId":"355","endLine":12,"endColumn":103},{"ruleId":"352","severity":1,"message":"380","line":13,"column":24,"nodeType":"354","messageId":"355","endLine":13,"endColumn":45},{"ruleId":"352","severity":1,"message":"381","line":121,"column":12,"nodeType":"354","messageId":"355","endLine":121,"endColumn":23},{"ruleId":"352","severity":1,"message":"382","line":125,"column":12,"nodeType":"354","messageId":"355","endLine":125,"endColumn":24},{"ruleId":"360","severity":1,"message":"361","line":173,"column":13,"nodeType":"362","endLine":173,"endColumn":152},{"ruleId":"356","severity":1,"message":"369","line":199,"column":22,"nodeType":"358","messageId":"359","endLine":199,"endColumn":24},{"ruleId":"356","severity":1,"message":"357","line":233,"column":22,"nodeType":"358","messageId":"359","endLine":233,"endColumn":24},{"ruleId":"356","severity":1,"message":"369","line":176,"column":16,"nodeType":"358","messageId":"359","endLine":176,"endColumn":18},{"ruleId":"352","severity":1,"message":"383","line":2,"column":8,"nodeType":"354","messageId":"355","endLine":2,"endColumn":21},{"ruleId":"352","severity":1,"message":"384","line":4,"column":13,"nodeType":"354","messageId":"355","endLine":4,"endColumn":20},{"ruleId":"352","severity":1,"message":"385","line":5,"column":9,"nodeType":"354","messageId":"355","endLine":5,"endColumn":16},{"ruleId":"352","severity":1,"message":"386","line":5,"column":24,"nodeType":"354","messageId":"355","endLine":5,"endColumn":35},{"ruleId":"352","severity":1,"message":"387","line":8,"column":43,"nodeType":"354","messageId":"355","endLine":8,"endColumn":51},{"ruleId":"352","severity":1,"message":"388","line":8,"column":62,"nodeType":"354","messageId":"355","endLine":8,"endColumn":71},{"ruleId":"352","severity":1,"message":"389","line":8,"column":82,"nodeType":"354","messageId":"355","endLine":8,"endColumn":91},{"ruleId":"356","severity":1,"message":"357","line":25,"column":32,"nodeType":"358","messageId":"359","endLine":25,"endColumn":34},{"ruleId":"352","severity":1,"message":"390","line":2,"column":24,"nodeType":"354","messageId":"355","endLine":2,"endColumn":30},{"ruleId":"352","severity":1,"message":"391","line":2,"column":72,"nodeType":"354","messageId":"355","endLine":2,"endColumn":86},{"ruleId":"352","severity":1,"message":"392","line":5,"column":17,"nodeType":"354","messageId":"355","endLine":5,"endColumn":31},{"ruleId":"356","severity":1,"message":"357","line":37,"column":39,"nodeType":"358","messageId":"359","endLine":37,"endColumn":41},{"ruleId":"356","severity":1,"message":"357","line":39,"column":25,"nodeType":"358","messageId":"359","endLine":39,"endColumn":27},{"ruleId":"356","severity":1,"message":"357","line":51,"column":34,"nodeType":"358","messageId":"359","endLine":51,"endColumn":36},{"ruleId":"356","severity":1,"message":"357","line":55,"column":37,"nodeType":"358","messageId":"359","endLine":55,"endColumn":39},{"ruleId":"356","severity":1,"message":"357","line":80,"column":49,"nodeType":"358","messageId":"359","endLine":80,"endColumn":51},{"ruleId":"356","severity":1,"message":"357","line":83,"column":27,"nodeType":"358","messageId":"359","endLine":83,"endColumn":29},{"ruleId":"356","severity":1,"message":"357","line":93,"column":38,"nodeType":"358","messageId":"359","endLine":93,"endColumn":40},{"ruleId":"356","severity":1,"message":"357","line":127,"column":52,"nodeType":"358","messageId":"359","endLine":127,"endColumn":54},{"ruleId":"360","severity":1,"message":"361","line":147,"column":45,"nodeType":"362","endLine":147,"endColumn":185},{"ruleId":"352","severity":1,"message":"393","line":1,"column":8,"nodeType":"354","messageId":"355","endLine":1,"endColumn":13},{"ruleId":"352","severity":1,"message":"391","line":7,"column":3,"nodeType":"354","messageId":"355","endLine":7,"endColumn":17},{"ruleId":"352","severity":1,"message":"392","line":16,"column":17,"nodeType":"354","messageId":"355","endLine":16,"endColumn":31},{"ruleId":"356","severity":1,"message":"357","line":44,"column":25,"nodeType":"358","messageId":"359","endLine":44,"endColumn":27},{"ruleId":"356","severity":1,"message":"357","line":59,"column":21,"nodeType":"358","messageId":"359","endLine":59,"endColumn":23},{"ruleId":"356","severity":1,"message":"357","line":61,"column":27,"nodeType":"358","messageId":"359","endLine":61,"endColumn":29},{"ruleId":"356","severity":1,"message":"357","line":65,"column":29,"nodeType":"358","messageId":"359","endLine":65,"endColumn":31},{"ruleId":"356","severity":1,"message":"357","line":68,"column":36,"nodeType":"358","messageId":"359","endLine":68,"endColumn":38},{"ruleId":"356","severity":1,"message":"357","line":83,"column":23,"nodeType":"358","messageId":"359","endLine":83,"endColumn":25},{"ruleId":"356","severity":1,"message":"357","line":85,"column":35,"nodeType":"358","messageId":"359","endLine":85,"endColumn":37},{"ruleId":"356","severity":1,"message":"357","line":86,"column":25,"nodeType":"358","messageId":"359","endLine":86,"endColumn":27},{"ruleId":"356","severity":1,"message":"357","line":101,"column":21,"nodeType":"358","messageId":"359","endLine":101,"endColumn":23},{"ruleId":"356","severity":1,"message":"357","line":103,"column":27,"nodeType":"358","messageId":"359","endLine":103,"endColumn":29},{"ruleId":"356","severity":1,"message":"357","line":105,"column":29,"nodeType":"358","messageId":"359","endLine":105,"endColumn":31},{"ruleId":"356","severity":1,"message":"357","line":108,"column":36,"nodeType":"358","messageId":"359","endLine":108,"endColumn":38},{"ruleId":"356","severity":1,"message":"357","line":168,"column":53,"nodeType":"358","messageId":"359","endLine":168,"endColumn":55},{"ruleId":"356","severity":1,"message":"357","line":190,"column":52,"nodeType":"358","messageId":"359","endLine":190,"endColumn":54},{"ruleId":"356","severity":1,"message":"357","line":190,"column":81,"nodeType":"358","messageId":"359","endLine":190,"endColumn":83},{"ruleId":"356","severity":1,"message":"357","line":195,"column":38,"nodeType":"358","messageId":"359","endLine":195,"endColumn":40},{"ruleId":"360","severity":1,"message":"361","line":256,"column":27,"nodeType":"362","endLine":261,"endColumn":29},{"ruleId":"360","severity":1,"message":"361","line":276,"column":27,"nodeType":"362","endLine":281,"endColumn":29},{"ruleId":"356","severity":1,"message":"369","line":295,"column":36,"nodeType":"358","messageId":"359","endLine":295,"endColumn":38},{"ruleId":"352","severity":1,"message":"385","line":7,"column":28,"nodeType":"354","messageId":"355","endLine":7,"endColumn":35},{"ruleId":"356","severity":1,"message":"369","line":23,"column":19,"nodeType":"358","messageId":"359","endLine":23,"endColumn":21},{"ruleId":"356","severity":1,"message":"357","line":31,"column":33,"nodeType":"358","messageId":"359","endLine":31,"endColumn":35},{"ruleId":"356","severity":1,"message":"357","line":32,"column":26,"nodeType":"358","messageId":"359","endLine":32,"endColumn":28},{"ruleId":"360","severity":1,"message":"361","line":64,"column":53,"nodeType":"362","endLine":64,"endColumn":228},{"ruleId":"352","severity":1,"message":"384","line":3,"column":13,"nodeType":"354","messageId":"355","endLine":3,"endColumn":20},{"ruleId":"356","severity":1,"message":"357","line":17,"column":44,"nodeType":"358","messageId":"359","endLine":17,"endColumn":46},{"ruleId":"356","severity":1,"message":"357","line":20,"column":44,"nodeType":"358","messageId":"359","endLine":20,"endColumn":46},{"ruleId":"352","severity":1,"message":"394","line":1,"column":17,"nodeType":"354","messageId":"355","endLine":1,"endColumn":25},{"ruleId":"395","severity":1,"message":"396","line":37,"column":23,"nodeType":"362","endLine":44,"endColumn":24},{"ruleId":"352","severity":1,"message":"397","line":1,"column":27,"nodeType":"354","messageId":"355","endLine":1,"endColumn":36},{"ruleId":"352","severity":1,"message":"398","line":20,"column":11,"nodeType":"354","messageId":"355","endLine":20,"endColumn":18},{"ruleId":"352","severity":1,"message":"399","line":24,"column":12,"nodeType":"354","messageId":"355","endLine":24,"endColumn":20},{"ruleId":"352","severity":1,"message":"400","line":24,"column":22,"nodeType":"354","messageId":"355","endLine":24,"endColumn":33},{"ruleId":"356","severity":1,"message":"357","line":30,"column":32,"nodeType":"358","messageId":"359","endLine":30,"endColumn":34},{"ruleId":"356","severity":1,"message":"357","line":43,"column":29,"nodeType":"358","messageId":"359","endLine":43,"endColumn":31},{"ruleId":"352","severity":1,"message":"401","line":44,"column":17,"nodeType":"354","messageId":"355","endLine":44,"endColumn":21},{"ruleId":"356","severity":1,"message":"357","line":46,"column":33,"nodeType":"358","messageId":"359","endLine":46,"endColumn":35},{"ruleId":"356","severity":1,"message":"369","line":66,"column":18,"nodeType":"358","messageId":"359","endLine":66,"endColumn":20},{"ruleId":"352","severity":1,"message":"402","line":74,"column":11,"nodeType":"354","messageId":"355","endLine":74,"endColumn":23},{"ruleId":"360","severity":1,"message":"361","line":103,"column":33,"nodeType":"362","endLine":103,"endColumn":208},{"ruleId":"356","severity":1,"message":"357","line":111,"column":60,"nodeType":"358","messageId":"359","endLine":111,"endColumn":62},{"ruleId":"356","severity":1,"message":"357","line":114,"column":61,"nodeType":"358","messageId":"359","endLine":114,"endColumn":63},{"ruleId":"356","severity":1,"message":"357","line":117,"column":61,"nodeType":"358","messageId":"359","endLine":117,"endColumn":63},{"ruleId":"356","severity":1,"message":"357","line":119,"column":70,"nodeType":"358","messageId":"359","endLine":119,"endColumn":72},{"ruleId":"356","severity":1,"message":"357","line":122,"column":61,"nodeType":"358","messageId":"359","endLine":122,"endColumn":63},{"ruleId":"352","severity":1,"message":"403","line":97,"column":10,"nodeType":"354","messageId":"355","endLine":97,"endColumn":24},{"ruleId":"356","severity":1,"message":"357","line":124,"column":24,"nodeType":"358","messageId":"359","endLine":124,"endColumn":26},{"ruleId":"352","severity":1,"message":"404","line":131,"column":11,"nodeType":"354","messageId":"355","endLine":131,"endColumn":17},{"ruleId":"352","severity":1,"message":"405","line":138,"column":17,"nodeType":"354","messageId":"355","endLine":138,"endColumn":21},{"ruleId":"352","severity":1,"message":"406","line":148,"column":17,"nodeType":"354","messageId":"355","endLine":148,"endColumn":25},{"ruleId":"356","severity":1,"message":"357","line":150,"column":29,"nodeType":"358","messageId":"359","endLine":150,"endColumn":31},{"ruleId":"356","severity":1,"message":"357","line":150,"column":56,"nodeType":"358","messageId":"359","endLine":150,"endColumn":58},{"ruleId":"356","severity":1,"message":"357","line":33,"column":38,"nodeType":"358","messageId":"359","endLine":33,"endColumn":40},{"ruleId":"356","severity":1,"message":"369","line":33,"column":68,"nodeType":"358","messageId":"359","endLine":33,"endColumn":70},{"ruleId":"356","severity":1,"message":"357","line":36,"column":27,"nodeType":"358","messageId":"359","endLine":36,"endColumn":29},{"ruleId":"356","severity":1,"message":"369","line":42,"column":68,"nodeType":"358","messageId":"359","endLine":42,"endColumn":70},{"ruleId":"356","severity":1,"message":"357","line":67,"column":29,"nodeType":"358","messageId":"359","endLine":67,"endColumn":31},{"ruleId":"356","severity":1,"message":"357","line":92,"column":94,"nodeType":"358","messageId":"359","endLine":92,"endColumn":96},{"ruleId":"356","severity":1,"message":"357","line":94,"column":57,"nodeType":"358","messageId":"359","endLine":94,"endColumn":59},{"ruleId":"356","severity":1,"message":"357","line":127,"column":58,"nodeType":"358","messageId":"359","endLine":127,"endColumn":60},{"ruleId":"356","severity":1,"message":"357","line":155,"column":62,"nodeType":"358","messageId":"359","endLine":155,"endColumn":64},{"ruleId":"356","severity":1,"message":"357","line":155,"column":96,"nodeType":"358","messageId":"359","endLine":155,"endColumn":98},{"ruleId":"352","severity":1,"message":"397","line":1,"column":27,"nodeType":"354","messageId":"355","endLine":1,"endColumn":36},{"ruleId":"352","severity":1,"message":"407","line":3,"column":10,"nodeType":"354","messageId":"355","endLine":3,"endColumn":18},{"ruleId":"352","severity":1,"message":"408","line":3,"column":45,"nodeType":"354","messageId":"355","endLine":3,"endColumn":60},{"ruleId":"352","severity":1,"message":"409","line":3,"column":74,"nodeType":"354","messageId":"355","endLine":3,"endColumn":85},{"ruleId":"352","severity":1,"message":"410","line":21,"column":12,"nodeType":"354","messageId":"355","endLine":21,"endColumn":16},{"ruleId":"352","severity":1,"message":"411","line":21,"column":18,"nodeType":"354","messageId":"355","endLine":21,"endColumn":25},{"ruleId":"352","severity":1,"message":"412","line":29,"column":12,"nodeType":"354","messageId":"355","endLine":29,"endColumn":19},{"ruleId":"352","severity":1,"message":"400","line":30,"column":22,"nodeType":"354","messageId":"355","endLine":30,"endColumn":33},{"ruleId":"352","severity":1,"message":"413","line":31,"column":23,"nodeType":"354","messageId":"355","endLine":31,"endColumn":35},{"ruleId":"356","severity":1,"message":"357","line":34,"column":31,"nodeType":"358","messageId":"359","endLine":34,"endColumn":33},{"ruleId":"365","severity":1,"message":"366","line":57,"column":37,"nodeType":"367","messageId":"368","endLine":57,"endColumn":39},{"ruleId":"356","severity":1,"message":"357","line":58,"column":64,"nodeType":"358","messageId":"359","endLine":58,"endColumn":66},{"ruleId":"356","severity":1,"message":"357","line":97,"column":29,"nodeType":"358","messageId":"359","endLine":97,"endColumn":31},{"ruleId":"356","severity":1,"message":"357","line":100,"column":27,"nodeType":"358","messageId":"359","endLine":100,"endColumn":29},{"ruleId":"356","severity":1,"message":"357","line":108,"column":33,"nodeType":"358","messageId":"359","endLine":108,"endColumn":35},{"ruleId":"356","severity":1,"message":"357","line":129,"column":29,"nodeType":"358","messageId":"359","endLine":129,"endColumn":31},{"ruleId":"356","severity":1,"message":"357","line":131,"column":23,"nodeType":"358","messageId":"359","endLine":131,"endColumn":25},{"ruleId":"360","severity":1,"message":"361","line":156,"column":41,"nodeType":"362","endLine":156,"endColumn":216},{"ruleId":"356","severity":1,"message":"357","line":164,"column":68,"nodeType":"358","messageId":"359","endLine":164,"endColumn":70},{"ruleId":"356","severity":1,"message":"357","line":171,"column":67,"nodeType":"358","messageId":"359","endLine":171,"endColumn":69},{"ruleId":"356","severity":1,"message":"357","line":178,"column":69,"nodeType":"358","messageId":"359","endLine":178,"endColumn":71},{"ruleId":"356","severity":1,"message":"357","line":180,"column":78,"nodeType":"358","messageId":"359","endLine":180,"endColumn":80},{"ruleId":"356","severity":1,"message":"357","line":183,"column":70,"nodeType":"358","messageId":"359","endLine":183,"endColumn":72},{"ruleId":"356","severity":1,"message":"357","line":190,"column":73,"nodeType":"358","messageId":"359","endLine":190,"endColumn":75},{"ruleId":"356","severity":1,"message":"357","line":197,"column":73,"nodeType":"358","messageId":"359","endLine":197,"endColumn":75},{"ruleId":"356","severity":1,"message":"357","line":69,"column":71,"nodeType":"358","messageId":"359","endLine":69,"endColumn":73},{"ruleId":"356","severity":1,"message":"357","line":70,"column":47,"nodeType":"358","messageId":"359","endLine":70,"endColumn":49},{"ruleId":"356","severity":1,"message":"357","line":70,"column":80,"nodeType":"358","messageId":"359","endLine":70,"endColumn":82},{"ruleId":"356","severity":1,"message":"357","line":77,"column":27,"nodeType":"358","messageId":"359","endLine":77,"endColumn":29},{"ruleId":"356","severity":1,"message":"357","line":79,"column":34,"nodeType":"358","messageId":"359","endLine":79,"endColumn":36},{"ruleId":"356","severity":1,"message":"369","line":81,"column":37,"nodeType":"358","messageId":"359","endLine":81,"endColumn":39},{"ruleId":"352","severity":1,"message":"414","line":90,"column":17,"nodeType":"354","messageId":"355","endLine":90,"endColumn":31},{"ruleId":"356","severity":1,"message":"357","line":98,"column":32,"nodeType":"358","messageId":"359","endLine":98,"endColumn":34},{"ruleId":"356","severity":1,"message":"357","line":101,"column":34,"nodeType":"358","messageId":"359","endLine":101,"endColumn":36},{"ruleId":"356","severity":1,"message":"369","line":111,"column":33,"nodeType":"358","messageId":"359","endLine":111,"endColumn":35},{"ruleId":"356","severity":1,"message":"357","line":117,"column":27,"nodeType":"358","messageId":"359","endLine":117,"endColumn":29},{"ruleId":"356","severity":1,"message":"357","line":120,"column":27,"nodeType":"358","messageId":"359","endLine":120,"endColumn":29},{"ruleId":"356","severity":1,"message":"357","line":151,"column":25,"nodeType":"358","messageId":"359","endLine":151,"endColumn":27},{"ruleId":"356","severity":1,"message":"357","line":205,"column":64,"nodeType":"358","messageId":"359","endLine":205,"endColumn":66},{"ruleId":"356","severity":1,"message":"357","line":222,"column":63,"nodeType":"358","messageId":"359","endLine":222,"endColumn":65},{"ruleId":"356","severity":1,"message":"357","line":257,"column":47,"nodeType":"358","messageId":"359","endLine":257,"endColumn":49},{"ruleId":"356","severity":1,"message":"357","line":260,"column":47,"nodeType":"358","messageId":"359","endLine":260,"endColumn":49},{"ruleId":"356","severity":1,"message":"369","line":302,"column":85,"nodeType":"358","messageId":"359","endLine":302,"endColumn":87},"no-native-reassign",["415"],"no-negated-in-lhs",["416"],"no-unused-vars","'logger' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Redirect' is defined but never used.","'file' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","Expected '!==' and instead saw '!='.","'customStyles' is assigned a value but never used.","'country' is assigned a value but never used.","'region' is assigned a value but never used.","'setUserTemplate' is defined but never used.","'mergePage' is defined but never used.","'Collapse' is defined but never used.","'Link' is defined but never used.","'IconExpandLess' is defined but never used.","'IconExpandMore' is defined but never used.","'InboxIcon' is defined but never used.","'KeyboardArrowDownIcon' is defined but never used.","'handleClick' is defined but never used.","'handleClick2' is defined but never used.","'TemplateModal' is defined but never used.","'actions' is defined but never used.","'Tooltip' is defined but never used.","'CardContent' is defined but never used.","'EditIcon' is defined but never used.","'CheckIcon' is defined but never used.","'ClearIcon' is defined but never used.","'MDBBtn' is defined but never used.","'MDBModalFooter' is defined but never used.","'ToastContainer' is defined but never used.","'axios' is defined but never used.","'useState' is defined but never used.","jsx-a11y/role-supports-aria-props","The attribute aria-haspopup is not supported by the role link. This role is implicit on the element a.","'useEffect' is defined but never used.","'history' is assigned a value but never used.","'isPaused' is assigned a value but never used.","'setIsPaused' is assigned a value but never used.","'list' is assigned a value but never used.","'toggleLoader' is assigned a value but never used.","'billingDetails' is assigned a value but never used.","'payRun' is assigned a value but never used.","'resp' is assigned a value but never used.","'response' is assigned a value but never used.","'addSlots' is defined but never used.","'publishTemplate' is defined but never used.","'updateSlots' is defined but never used.","'slot' is assigned a value but never used.","'setSlot' is assigned a value but never used.","'fileSrc' is assigned a value but never used.","'setIsStopped' is assigned a value but never used.","'responseUpdate' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]